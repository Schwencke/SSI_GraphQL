schema {
  query: RootQuery
  mutation: Mutation
}

"""
Specific fields for Ipsc Stage (used in IPSC, USPSA, SRA, TTS, Sivil, 3-Gun
"""
type IpscStageNode implements StageInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!
  is_locked: Boolean!

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime
  scorecards: [ScoreCardInterface!]!

  """list of scorecards that are DQ'ed on stage"""
  scorecards_dq: [ScoreCardInterface!]!

  """list of scorecards with a warning on stage"""
  scorecards_w_warning: [ScoreCardInterface!]!
  scoring_completed: Decimal!
  get_next_stage: StageInterface!
  get_previous_stage: StageInterface!
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode!
  number: Int!

  """name/title of stage (not number), max 35 char"""
  name: String!

  """place/location textual description, max 64 char"""
  venue: String!
  image: DjangoImageType
  banner: DjangoImageType

  """300 char"""
  banner_url: String!

  """1000 char"""
  procedure: String!

  """1000 char"""
  start_pos: String!

  """500 char"""
  firearm_condition: String!

  """200 char"""
  start_on: String!

  """200 char"""
  stop_on: String!

  """500 char"""
  penalties_notes: String!

  """200 char"""
  safety_angles: String!

  """1000 char"""
  setup_notes: String!

  """Sort of stage, 4 char"""
  sort: String!

  """included in event results or not"""
  included: Boolean!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!

  """
  summary of scoring progress, returns a comma separated string of ints for a five-tuple; <verified, unverified, scored, unscored, total_to_score>. This excludes any DQed competitors
  """
  scoring_progress: ScoringProgressNode!

  """
  summary of scoring progress, returns a list of two-tuples with <squad, scoring-progress> where scoring progress is comma separated string of ints for a five-tuple; <verified, unverified, scored, unscored, total_to_score>. This excludes any DQed competitors
  """
  squad_scoring_progress: [SquadScoringProgressNode!]!
  competitors_indexed(
    """
    all/no/yes as in all comps, no those without squad, yes those with squad
    """
    sqs: String! = "yes"
    shift_on: Int! = 1
    incl_dnf: Boolean! = false
    incl_dqed: Boolean! = false
  ): [CompetitorInterface!]!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_scorecard: ScoreCardInterface!
  event: IpscMatchNode!
  get_scoring_display: String!
  get_course_display: String!
  get_shotgun_ammo_display: String!
  get_firearms_display: String!

  """scoring on stage, 2 char"""
  scoring: String!

  """type of course for stage, 2 char"""
  course: String!

  """number of paper targets"""
  paper: Int!

  """number of Helfigur 2020 targets (used in TTS)"""
  paper_2: Int!

  """number of bonus targets"""
  bonus: Int!

  """number of poppers"""
  popper: Int!

  """number of plates"""
  plate: Int!

  """number of frangible targets """
  frangible: Int!

  """number or no-shoot or penalty targets"""
  penalty: Int!

  """ rounds needed for all except disappearing/bonus targets"""
  minimum_rounds: Int!

  """same as min except when using disappering targets"""
  maximum_rounds: Int!

  """
  manual rifle in IPSC, rounds needed for all except disappearing/bonus targets
  """
  manual_minimum_rounds: Int!

  """
  manual rifle in IPSC, same as min except when using disappering targets
  """
  manual_maximum_rounds: Int!

  """type of ammo to use on stage, 2 char"""
  shotgun_ammo: String!
  standard: DjangoModelType

  """comma separated list of fireams used in stage, 400 char"""
  firearms: String!

  """enhanced value targets; 10, 15, 20, 25, 30, 35, 40p"""
  evt: String!

  """Amount of SRA/TTS Tasks for 2,4,5,10p"""
  sra_tasks: String!

  """Amount of SRA/TTS Targets for 2,4,5,10p"""
  sra_targets: String!

  """3 gun"""
  rifle_targets: String!

  """3 gun"""
  shotgun_targets: String!

  """3 gun"""
  handgun_targets: String!
  match_percent: Decimal!
  max_points: Int!
  max_manual_rifle_points: Int!
  max_sivil_time: Int!
  total_targets: Int!

  """
  Show easy to read rounds - special formatting for shotgun to specify type of round to-be-use (bird|buck|slug)
  """
  get_rounds_display: String!

  """If IPSC and manual rifle with separate min/max rounds"""
  score_manual_rifle: Boolean!

  """steel/plates on stage (if > 2 perhaps allow for a xA button)"""
  all_steel: Int!

  """total of optional SRA/TTS Tasks"""
  sra_total_tasks: Int!

  """total of optional SRA/TTS Targets"""
  sra_total_targets: Int!

  """human readable info of optional SRA/TTS tasks"""
  get_sra_tasks_display: String!

  """human readable info of optional SRA/TTS targets"""
  get_sra_targets_display: String!

  """
  does stage have paper or bonus targets (i.e. show B/C/D and not only A)
  """
  has_paper_or_bonus: Boolean!

  """returns results for stage is allowed to view"""
  get_results(division: String = null, category: String = null): [IpscStageResultNode!]!
  get_disqualified(division: String = null, category: String = null): [IpscScoreCardNode!]!
  course_choices: [ChoiceNode!]!
  shotgun_ammo_choices: [ChoiceNode!]!
  scoring_choices: [ChoiceNode!]!
  firearm_choices: [ChoiceNode!]!
}

"""Stage interfance - used in sports that uses stages"""
interface StageInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!
  is_locked: Boolean!

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime
  scorecards: [ScoreCardInterface!]!

  """list of scorecards that are DQ'ed on stage"""
  scorecards_dq: [ScoreCardInterface!]!

  """list of scorecards with a warning on stage"""
  scorecards_w_warning: [ScoreCardInterface!]!
  scoring_completed: Decimal!
  get_next_stage: StageInterface!
  get_previous_stage: StageInterface!
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode!
  number: Int!

  """name/title of stage (not number), max 35 char"""
  name: String!

  """place/location textual description, max 64 char"""
  venue: String!
  image: DjangoImageType
  banner: DjangoImageType

  """300 char"""
  banner_url: String!

  """1000 char"""
  procedure: String!

  """1000 char"""
  start_pos: String!

  """500 char"""
  firearm_condition: String!

  """200 char"""
  start_on: String!

  """200 char"""
  stop_on: String!

  """500 char"""
  penalties_notes: String!

  """200 char"""
  safety_angles: String!

  """1000 char"""
  setup_notes: String!

  """Sort of stage, 4 char"""
  sort: String!

  """included in event results or not"""
  included: Boolean!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!

  """
  summary of scoring progress, returns a comma separated string of ints for a five-tuple; <verified, unverified, scored, unscored, total_to_score>. This excludes any DQed competitors
  """
  scoring_progress: ScoringProgressNode!

  """
  summary of scoring progress, returns a list of two-tuples with <squad, scoring-progress> where scoring progress is comma separated string of ints for a five-tuple; <verified, unverified, scored, unscored, total_to_score>. This excludes any DQed competitors
  """
  squad_scoring_progress: [SquadScoringProgressNode!]!
  competitors_indexed(
    """
    all/no/yes as in all comps, no those without squad, yes those with squad
    """
    sqs: String! = "yes"
    shift_on: Int! = 1
    incl_dnf: Boolean! = false
    incl_dqed: Boolean! = false
  ): [CompetitorInterface!]!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_scorecard: ScoreCardInterface!
}

"""Date with time (isoformat)"""
scalar DateTime

"""
Scorecard interface, used together with stages for scores of a competitor on a stage
"""
interface ScoreCardInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!

  """returns full scoring history Versions"""
  get_scoring_history: [VersionNode!]!
  is_verified: Boolean!

  """has signature/image been used to signing (else PIN code used)"""
  is_verified_w_signature: Boolean!
  is_locked: Boolean!

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime

  """ISO-8601 formatted"""
  verified: DateTime

  """Supports scoring analytics on stage/scoring-rule"""
  supports_scoring_analytics: Boolean!

  """
  List of human-readable strings with scoring analytics info (help to improve)
  """
  get_scoring_analytics: [String!]!
  verified_by: ShooterNode!
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode!

  """Got DQ'ed"""
  disqualified: Boolean!
  signature: DjangoImageType

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!
}

"""A saved version of a database model."""
type VersionNode {
  id: ID!
}

"""Shooter Node is the extended User within Shoot'n Score It"""
type ShooterNode implements Node {
  """The Globally Unique ID of this object"""
  id: GlobalID!
  is_backoffice_user: Boolean!

  """
  Designates that this user has all permissions without explicitly assigning them.
  """
  is_superuser: Boolean!
  premium_until: DateTime
  unread: [NotificationNode!]!
  read: [NotificationNode!]!
  archived: [NotificationNode!]!
  phone: String!
  ice_phone: String!
  get_timezone_display: String!
  get_sex_display: String!
  get_language_display: String!
  get_region_display: String!
  get_currency_display: String!
  get_visibility_display: String!
  get_input_units_display: String!
  get_premium_visibility_display: String!
  get_state_display: String!
  first_name: String!
  last_name: String!

  """language is both language and locale, 5 char max"""
  language: String!
  email: String!
  twitter: String!
  instagram: String!
  facebook: String!

  """personal and default visibility for everything in armoury"""
  visibility: String!

  """club name, char 50"""
  club: String!

  """timezone, from zoneinfo lib"""
  timezone: String!

  """300 char"""
  adress_1: String!

  """300 char"""
  adress_2: String!

  """255 char"""
  city: String!

  """10 char"""
  zipcode: String!

  """US state, 3 char"""
  state: String!

  """3 char, ISO3166A3"""
  region: String!

  """input units used, met/imp/mix"""
  input_units: String!
  get_all_presets: String!

  """currency ISO4217, 3 char"""
  currency: String!
  sex: String!
  premium_subscription: String!

  """generic licence id, 30 char"""
  license: String!

  """ICS Alisas, stored in lowercase, 3-16 char, A-Z 0-9"""
  ics_alias: String!
  uspsa_num: String!

  """NRA id, 16 char max"""
  nra_num: String!

  """Precision Rifle Shooting ID, 16 char max"""
  prs_num: String!

  """
  IROA number is the International Range Officer Association number (IPSC, USPSA). max 16 char
  """
  iroa_num: String!

  """
  IDPA numberthe membership number in IDPA org. It is a 8 character string, not sure of formatting but seems to be A00001 or F000001 where A is American and F is Foreigner. 10 char max
  """
  idpa_num: String!

  """SADPA number, unsure of format - or if there is one, 10 char max"""
  sadpa_num: String!

  """
  3-Gun ID is license number used for 3-Gun Nation shooting events, 10 char max
  """
  three_gun_id: String!

  """
  ICORE number, the membership number in ICORE.org. format unclear.... 8 char max
  """
  icore_num: String!

  """
  Nordic ID is license number used for Nordics shooting events, 16 char mac
  """
  nordic_num: String!

  """FITASC ID, 16 char max"""
  fitasc_id: String!

  """ISSF ID, 16 char max"""
  issf_num: String!

  """
  SRA ID (Finland) is license number used for SRA shooting events, 10 char max
  """
  sra_num: String!

  """World Association PPC 1500 ID, max 8 char. Seems to be max 5 used"""
  waid: String!

  """
  SASS number, the membership number in SASS org. It is a 6 character string.
  """
  sass_num: String!

  """SASS Alias or nickname, 50 char max"""
  sass_alias: String!
  last_login: DateTime
  date_joined: DateTime!

  """Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."""
  username: String!

  """
  Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
  """
  is_active: Boolean!

  """for 3rd party apps, never used within SSI or accessed, max 500 char"""
  custom_api: String!
  pk: GlobalID!

  """returns events where user/myself have a role, never shown for friends"""
  events(
    """part of name, case insensitive"""
    name: String = null

    """date formatted as YYYY-MM-DD"""
    starts_after: String = null

    """date formatted as YYYY-MM-DD"""
    starts_before: String = null

    """
    one or more comma separated SSI event status choices; dr,on,ol,pr,cp,cs
    """
    status: String = null

    """region code, ISO3601"""
    region: String = null

    """state, if supplied will set region to USA"""
    state: String = null

    """rule in SSI event coding"""
    rule: String = null

    """sub_rule in SSI event coding"""
    sub_rule: String = null

    """as applicable according to rule"""
    firearms: String = null
  ): [EventInterface!]!

  """returns events that myself has marked as favourite"""
  favourite_events: [EventInterface!]!

  """returns competitors that myself has marked as favourite"""
  favourite_competitors: [CompetitorInterface!]!

  """returns squads that myself has marked as favourite"""
  favourite_squads: [SquadInterface!]!

  """returns teams that myself has marked as favourite"""
  favourite_stages: [StageInterface!]!

  """returns stages that myself has marked as favourite"""
  favourite_teams: [TeamInterface!]!

  """returns competitors where user=myself only given values"""
  competitors(
    """comma-separated string of status code for competitor; w,p,a,n,d,x"""
    status: String = null

    """comma-separated string of status code for event; dr,on,ol,pr,cp,cs"""
    event_status: String = null

    """date formatted as YYYY-MM-DD"""
    event_starts_after: String = null

    """date formatted as YYYY-MM-DD"""
    event_starts_before: String = null
  ): [CompetitorInterface!]!

  """
  returns competitors where user am registered and not completed, not for friends (now)
  """
  registrations(
    """year, 4 digits."""
    year: Int = null

    """month 1-12, only works if also year provided"""
    month: Int = null
  ): [CompetitorInterface!]!

  """returns competitors where user have a result, not for friends (now)"""
  results(
    """year, 4 digits."""
    year: Int = null

    """month 1-12, only works if also year provided"""
    month: Int = null
  ): [CompetitorInterface!]!

  """
  returns club that user can associate with an event as organizer, not visible for friends
  """
  organizer_clubs: [OrganizationNode!]!

  """
  returns club and orgs where user am admin or member, not visible for friends (now)
  """
  club_or_organizations: [OrganizationNode!]!

  """
  returns orgs where user am admin or member, not visibile for friends (now)
  """
  organizations: [OrganizationNode!]!

  """return all or only org-members in some status for user"""
  organization_members(status: String = null): [OrganizationMemberNode!]!

  """returns clubs where user am admin or member, not for friends (now)"""
  clubs: [OrganizationNode!]!

  """return all or only club-members in some status for user"""
  club_members(status: String = null): [OrganizationMemberNode!]!

  """
  returns all firearms if for yourself (premium must be valid), and if friend then only public or shown to friends
  """
  firearms(
    """can be; rifle, shotgun, handgun or air"""
    weapon_generic: String = null

    """key for make, overrides weapon_generic"""
    make: String = null
  ): [FirearmNode!]!

  """
  returns all sights if for yourself (premium must be valid), and if friend then only public or shown to friends
  """
  sights(
    """key for make/mode"""
    make: String = null

    """text to search for in model"""
    model: String = null
  ): [SightNode!]!

  """
  returns all suppressors if for yourself (premium must be valid), and if friend then only public or shown to friends
  """
  suppressors(
    """key for make/mode"""
    make: String = null

    """text to search for in model"""
    model: String = null
  ): [SuppressorNode!]!

  """
  returns all ammo if for yourself (premium must be valid), and if friend then only public or shown to friends
  """
  ammunitions(
    """key for caliber"""
    caliber: String = null
  ): [AmmunitionNode!]!

  """
  Friends with-user OR to-user, only for yourself, never for friend or other
  """
  friends: [FriendNode!]!

  """country calling codes tuples"""
  get_cc_calling_choices: [ChoiceNode!]!

  """timezone choices value/display tuples"""
  get_timezone_choices: [ChoiceNode!]!

  """region choices value/display tuples"""
  get_sex_choices: [ChoiceNode!]!

  """language choices value/display tuples"""
  get_language_choices: [ChoiceNode!]!

  """region choices value/display tuples"""
  get_region_choices: [ChoiceNode!]!

  """currency choices value/display tuples"""
  get_currency_choices: [ChoiceNode!]!

  """personal visibility choices value/display tuples"""
  get_visibility_choices: [ChoiceNode!]!

  """input units choices value/display tuples"""
  get_input_units_choices: [ChoiceNode!]!

  """premium/armoury choices value/display tuples"""
  get_premium_visibility_choices: [ChoiceNode!]!

  """state choices value/display tuples"""
  get_state_choices: [ChoiceNode!]!

  """
  returns list of id's to club-members is any that user can compete for (=is approve member)
  """
  get_club_member_choices: [ChoiceNode!]!

  """
  returns list of id's that are permanent and I can assign to orgs / events
  """
  get_permanent_group_choices: [ChoiceNode!]!

  """
  returns field preset value or None, presets are on format e.g. ipsc_handgun_div, ipsc_handgun_pf
  """
  get_preset_value(key: String!): String!
}

"""An object with a Globally Unique ID"""
interface Node {
  """The Globally Unique ID of this object"""
  id: GlobalID!
}

"""
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
"""
scalar GlobalID

"""
Notification(id, level, recipient, unread, actor_content_type, actor_object_id, verb, description, target_content_type, target_object_id, action_object_content_type, action_object_object_id, timestamp, public, deleted, emailed, data)
"""
type NotificationNode {
  level: String!
  unread: Boolean!
  actor_content_type: DjangoModelType!
  actor_object_id: String!
  verb: String!
  description: String
  target_content_type: DjangoModelType
  target_object_id: String
  action_object_content_type: DjangoModelType
  action_object_object_id: String
  timestamp: DateTime!
  public: Boolean!
  deleted: Boolean!
  emailed: Boolean!
}

type DjangoModelType {
  pk: ID!
}

"""
EventInterface (corresponds to Match Model in django) and used for both Matche and Series
"""
interface EventInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!
  is_locked: Boolean!
  supports_rating: Boolean!
  is_rated: Boolean!

  """ISO-8601 formatted, when/if has been elo-rated"""
  rated: DateTime

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime

  """competitors that did not show/complete/finnish the event"""
  competitors_did_not_finish: [CompetitorInterface!]!
  competitors_approved_w_wo_results_wo_squad_not_dnf: [CompetitorInterface!]!
  competitors_approved_w_wo_results_not_dnf: [CompetitorInterface!]!

  """
  list of scorecards that are DQ'ed (if event used stages, else use competitors_dq)
  """
  scorecards_dq: [ScoreCardInterface!]!

  """
  list of competitors that are DQ'ed (if stages used, check scorecard for reason of DQ)
  """
  competitors_dq: [CompetitorInterface!]!

  """
  list of scorecards with warning (if event used stages, else use competitors_w_warning)
  """
  scorecards_w_warning: [ScoreCardInterface!]!

  """
  list of competitors a warning (if stages used, check scorecards for reason of warning)
  """
  competitors_w_warning: [CompetitorInterface!]!

  """ISO-8601 formatted"""
  starts: DateTime!

  """ISO-8601 formatted"""
  ends: DateTime

  """ISO-8601 formatted"""
  registration_starts: DateTime!

  """ISO-8601 formatted"""
  registration_closes: DateTime

  """ISO-8601 formatted"""
  squadding_starts: DateTime

  """ISO-8601 formatted"""
  pm_squadding_starts: DateTime

  """ISO-8601 formatted"""
  squadding_closes: DateTime
  short_url: String!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!
  minimum_rounds: Int!
  is_tournament_match: Boolean!
  is_component_match: Boolean!

  """
  Registration is only possible if registration date has started and not closed and the registration is open.
  Use this check to present if registration for a shooter shall be possible or not.
  """
  is_registration_possible: Boolean!
  is_squadding_possible: Boolean!
  is_pm_squadding_possible: Boolean!
  supports_bulk_scoring: Boolean!
  uses_stages: Boolean!
  uses_shoot_off_stages: Boolean!
  uses_strings: Boolean!
  number_of_strings: Boolean!
  number_of_rounds_per_string: Int!
  supports_shoot_off_strings: Boolean!
  do_index_competitor_when_scoring: Boolean!
  supports_standard_stages: Boolean!
  supports_score_string_for_squad: Boolean!
  supports_score_all_in_squad_at_stage: Boolean!
  is_premium_activated: Boolean!

  """returns list of RBAC roles for current user"""
  role_names: [String!]!

  """
  Returns True if the premium for event is fully paid or if 
  event is associated with a premium-org that has enable free-premium and small,
  not to many non-members and and fee not to high
  
  ** OR ** 
  
  the event has previoously been set to completed (under old premium valid things
  so we do not make them pay for old events)
  """
  is_premium_fully_valid: Boolean!
  has_geopos: Boolean!
  has_prematch: Boolean!

  """is prematch score included in overall results"""
  has_prematch_included: Boolean!
  uses_pin_verification: Boolean!
  uses_signature_verification: Boolean!
  scoring_completed: Decimal!

  """
  obfuscated id used when registering, only shown when reg possible or staff/admin of event to avoid bot-registrations
  """
  obfuscated_id: String!
  get_standard_stage_selection: [StandardStageInterface!]!
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode
  get_full_rule_display: String!
  get_full_level_display: String!
  get_prematch_display: String!
  get_status_display: String!
  get_registration_display: String!
  get_results_display: String!
  get_verify_using_display: String!
  get_region_display: String!
  get_currency_display: String!
  get_visibility_display: String!
  get_state_display: String!
  does_current_user_get_result: Boolean!
  number_of_prematch_competitors_registered: Int!
  number_of_prematch_competitors_waiting: Int!
  number_of_prematch_competitors_pending: Int!
  number_of_prematch_competitors_approved: Int!
  number_of_mainmatch_competitors_registered: Int!
  number_of_mainmatch_competitors_waiting: Int!
  number_of_mainmatch_competitors_pending: Int!
  number_of_mainmatch_competitors_approved: Int!
  competitors_unscored_list: [CompetitorInterface!]!
  prematch_competitors_registered: [CompetitorInterface!]!
  prematch_competitors: [CompetitorInterface!]!
  prematch_competitors_pending: [CompetitorInterface!]!
  prematch_competitors_approved: [CompetitorInterface!]!
  prematch_competitors_approved_wo_results: [CompetitorInterface!]!
  prematch_competitors_approved_w_wo_results: [CompetitorInterface!]!
  prematch_competitors_approved_w_wo_results_wo_squad: [CompetitorInterface!]!
  prematch_competitors_waiting: [CompetitorInterface!]!
  prematch_competitors_declined: [CompetitorInterface!]!
  prematch_competitors_deleted: [CompetitorInterface!]!
  mainmatch_competitors_registered: [CompetitorInterface!]!
  mainmatch_competitors: [CompetitorInterface!]!
  mainmatch_competitors_pending: [CompetitorInterface!]!
  mainmatch_competitors_approved: [CompetitorInterface!]!
  mainmatch_competitors_approved_wo_results: [CompetitorInterface!]!
  mainmatch_competitors_approved_w_wo_results: [CompetitorInterface!]!
  mainmatch_competitors_approved_w_wo_results_wo_squad: [CompetitorInterface!]!
  mainmatch_competitors_waiting: [CompetitorInterface!]!
  mainmatch_competitors_declined: [CompetitorInterface!]!
  mainmatch_competitors_deleted: [CompetitorInterface!]!
  group: DjangoModelType!
  organizer: OrganizationNode!
  accreditor: DjangoModelType
  accreditation_status: String!

  """name, max 50"""
  name: String!

  """max 600 char"""
  description: String!

  """max 800 char"""
  information: String!

  """max competitors in match or main match"""
  max_competitors: Int!

  """do we have a prematch, and is scoring included, 2 char"""
  prematch: String!

  """max competitors in pre-match, if used"""
  max_prematch_competitors: Int!

  """does event support teams"""
  allow_teams: Boolean!
  allows_spotter_shooter_teams: Boolean!

  """allow teams to edit and change members themself"""
  allow_team_self_management: Boolean!

  """team members in a team"""
  number_of_team_members: Int!

  """number of best scores used for team result"""
  result_from_team_members: Int!

  """max 2 char, status of even"""
  status: String!

  """status of registration, 2 char"""
  registration: String!

  """visibility of results, 2 char"""
  results: String!

  """verification method, 3 char"""
  verify_using: String!

  """
  defines family of sport (but you need rule+subrule and sometimes firearm to decide explicit sport), e.g. ipsc-famliy is IPSC, USPSA, SRA etc and sub-rule separates these
  """
  rule: String!

  """region, ISO31663A3, 3 char"""
  region: String!

  """currency, ISO4217, 3 char"""
  currency: String!

  """relevant url for event, max 300 char"""
  url: String!

  """display or link textfor url, max 20 char"""
  url_display: String!
  gcal_uid: String!

  """can a user register more then once or not"""
  multiple_reg_allowed: Boolean!

  """visibility of event, 3 char"""
  visibility: String!

  """US Stage choices, 3 char max"""
  state: String!

  """place/location textual description, max 64 char"""
  venue: String!

  """format as 5,5 decimal"""
  lat: Decimal

  """format as 5,5 decimal"""
  lng: Decimal
  image: DjangoImageType
  banner: DjangoImageType
  banner_url: String!
  f1: DjangoFileType
  f2: DjangoFileType
  f3: DjangoFileType
  f4: DjangoFileType
  f5: DjangoFileType
  f6: DjangoFileType
  f1_display: String!
  f2_display: String!
  f3_display: String!
  f4_display: String!
  f5_display: String!
  f6_display: String!
  has_accepted_event_data_ass_agreement: Boolean!

  """
  Event has enabled free Premium, requires that Organization associated with event allows for this (free within limits)
  """
  organization_enabled_event_premium: Boolean!
  comment: String!
  competitor_payment: String!
  total_net: Decimal!
  total_tax: Decimal!
  total_fee: Decimal!
  premium_currency: String!
  payment_methods: String!

  """for 3rd party apps, never used within SSI or accessed, max 500 char"""
  custom_api: String!
  competitors: [CompetitorInterface!]!

  """competitors indexed typically on stage-number shooting on"""
  competitors_indexed(
    """
    all/no/yes as in all comps, no those without squad, yes those with squad
    """
    sqs: String!
    shift_on: Int! = 1
    incl_dnf: Boolean! = false
    incl_dqed: Boolean! = false
  ): [CompetitorInterface!]!

  """
  list of possible deviating scores as a tuple <scorecard, alert-text message>
  """
  deviating_scorecards: [DeviatingScoreCardNode!]!

  """
  list of possible deviating competitors as a tuple <scorecard, alert-text message> (only for non-stage events)
  """
  deviating_competitors: [DeviatingCompetitorNode!]!

  """available standard-stages for sport, to be cloned if to be used"""
  available_standard_stages: [StandardStageInterface!]!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_competitor: CompetitorInterface!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_stage: StageInterface!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_team: TeamInterface!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_squad: SquadInterface!
  is_current_role_admin: Boolean!
  is_current_role_staff: Boolean!
  is_current_role_assistant: Boolean!

  """returns all event order payments (typically by competitors)"""
  order_payments: [PaymentInterface!]!

  """returns all event premium payments (for premium features of even)"""
  premium_payments: [PaymentInterface!]!
  merchandizes: [MerchandizeNode!]!
  merchandizes_on_registration: [MerchandizeNode!]!
  merchandize_orders: [MerchandizeOrderNode!]!
  component_matches: [ComponentMatchInterface!]!
  serie_type: String!
  get_prematch_choices: [ChoiceNode!]!
  get_status_choices: [ChoiceNode!]!
  get_registration_choices: [ChoiceNode!]!
  get_results_choices: [ChoiceNode!]!
  get_verify_using_choices: [ChoiceNode!]!
  get_region_choices: [ChoiceNode!]!
  get_currency_choices: [ChoiceNode!]!
  get_visibility_choices: [ChoiceNode!]!
  get_state_choices: [ChoiceNode!]!

  """returns list with id to organizations as values and name as display"""
  get_organizer_choices: [ChoiceNode!]!
  firearms: String!
  sub_rule: String!

  """stages in event"""
  stages: [StageInterface!]!
  squads: [SquadInterface!]!
  teams: [TeamInterface!]
}

"""
CompetitorInterface (corresponds to Match Model in django) but is used by both Match and Series
"""
interface CompetitorInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!

  """
  Returns true if all orders are paid *or* if self._paid = True (if there are no orders)
  """
  is_paid: Boolean!
  is_alread_logged: Boolean!
  is_locked: Boolean!

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime
  details: String!
  scorecards: [ScoreCardInterface!]!
  shooter: ShooterNode!
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode!
  get_club_display: String!
  get_club_short_display: String!
  get_sex_display: String!
  get_region_display: String!
  get_state_display: String!
  get_status_display: String!
  get_code_display: String!

  """max 30 char"""
  first_name: String!

  """max 30 char"""
  last_name: String!

  """value, 1 char"""
  sex: String!

  """max 300 char"""
  email: String!

  """ISO3166A3, 3 char. --- if no region or none"""
  region: String!

  """US state, 3 char"""
  state: String!

  """free text name of club, inferior to club_member if this is set"""
  club: String!

  """is for a club-member, can be used then to access club"""
  club_member: DjangoModelType

  """0 or blank means no number yet set, can take 5 min from registration"""
  number: Int!

  """registraion status, 1 char"""
  status: String!
  code: String!
  comment: String!

  """is competitor in prematch, default is False"""
  prematch: Boolean!

  """license number, 30 char"""
  license: String!
  notify: Boolean!

  """
  used to express if they did not show or stopped/left and this removed from scoring/results
  """
  did_not_finish: Boolean!
  has_accepted_event_data_policy: Boolean!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!

  """
  returns scoring version history iff not stages used in sport (i.e. scores stored directly per competitor)
  """
  scoring_history: [VersionNode!]!

  """
  assumes event uses stages & returns a comma separated string of ints for a five-tuple; <verified, unverified, scored, unscored, total_to_score>
  """
  scoring_progress: ScoringProgressNode!
  payments: [PaymentInterface!]!
  merchandize_orders: [MerchandizeOrderNode!]!

  """
  can current user update instance (e.g. are you allowed to update on yourself, or are you organizer)
  """
  can_current_update: Boolean!

  """
  ICE phone on format +CC-XXXXXXXXXX with leading country code dash phone number
  """
  ice_phone: String!

  """
  phone on format +CC-XXXXXXXXXX with leading country code dash phone number
  """
  phone: String!

  """
  returns result in visible format, if allowed to see for user making request
  """
  get_result_display: String!

  """country calling codes tuples"""
  get_cc_calling_choices: [ChoiceNode!]!
  get_sex_choices: [ChoiceNode!]!
  get_region_choices: [ChoiceNode!]!
  get_state_choices: [ChoiceNode!]!

  """returns list of id's to club-members is any that can compete for"""
  get_club_member_choices: [ChoiceNode!]!

  """returns list if admin/staff"""
  get_status_choices: [ChoiceNode!]!

  """returns list if admin/staff"""
  get_code_choices: [ChoiceNode!]!

  """
  returns list of avilable squads to choose from (if admin or approved competitor)
  """
  get_squad_choices: [ChoiceNode!]!

  """
  returns PIN code for self or if admin or staff of event (allows for off-line valuation if pin set)
  """
  pin: String!
}

"""
verified, unverified, scored (verified+unverified), unscored, total_to_score competitors (total is approved in event and not DQ'ed or DNF/DNS)
"""
type ScoringProgressNode {
  verified: Int!
  unverified: Int!
  scored: Int!
  unscored: Int!
  total: Int!
}

"""
NOTE - abstract model, only used by SWISH and not PAYPAL IPN (yes, mistake) so if things are
added remember to also add in PayPal.
Use this if ever extending with STRIPE or other
"""
type PaymentInterface {
  get_content_type_key: Int!
  get_content_type_model: String!
  get_sort_display: String!
  get_payment_class_display: String!
  get_payment_type_display: String!
  get_paid_from_display: String!
  get_status_display: String!

  """max 4 chars"""
  sort: String!

  """max 4 chars"""
  payment_class: String!

  """max 4 chars"""
  payment_type: String!

  """max 4 chars"""
  status: String!

  """max 200 chars"""
  comment: String!

  """max 200 chars, only buyer and seller view this"""
  payer_comment: String!

  """max 2000 chars, seller only"""
  seller_comment: String!
  flag: String!
  flag_code: String!
  flag_info: String!

  """max 300 chars"""
  txn_id: String!

  """max 100 chars"""
  txn_type: String!

  """max 200 chars"""
  customer_name: String!
  customer_ipaddress: String!

  """max 100 chars"""
  contact_first_name: String!

  """max 100 chars"""
  contact_last_name: String!

  """max 100 chars"""
  contact_email: String!

  """max 5 chars"""
  customer_type: String!

  """max 4 chars"""
  customer_vat: String!

  """3 chars, ISO3166A3"""
  customer_region: String!

  """3 chars, ISO4217"""
  currency: String!
  is_completed_but_with_refunded_orders: Boolean!
  shooter: ShooterNode!
  organization: OrganizationNode!
  organizationmember: OrganizationMemberNode!

  """
  Orders that payment is for (only for Event- and OrganizatioOrderPayments)
  """
  get_merchandize_orders: [MerchandizeOrderNode!]!

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!
}

"""Organization (club or association) Node"""
type OrganizationNode {
  id: ID!

  """
  phone on format +CC-XXXXXXXXXX with leading country code dash phone number
  """
  phone: String!

  """ISO-8601 formatted when officials last update"""
  officials_updated: DateTime

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime

  """ISO-8601 formatted"""
  premium_until: DateTime
  short_url: String!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode!
  get_full_name_display: String!
  get_sports_display: String!
  get_visibility_display: String!
  get_member_registration_display: String!
  get_member_visibility_display: String!
  get_event_visibility_display: String!
  get_merchandize_visibility_display: String!
  get_state_display: String!
  get_country_display: String!
  get_language_display: String!
  get_currency_display: String!
  get_member_payment_display: String!
  get_payment_methods_display: String!
  group: DjangoModelType!
  org_type: String!
  name: String!

  """sports org runs, or accredits"""
  short_name: String!
  description: String!
  information: String!

  """
  sports that org runs or is responsible for, or accredits (note - not used for normal clubs)
  """
  sports: String!

  """regions org can accredite for (note - not used for normal clubs)"""
  accredition_regions: String!

  """
  officials roles for event to generate logentrys for if accredited (note - not used for normal clubs)
  """
  recognized_officials: String!
  comment: String!
  visibility: String!
  member_registration: String!
  member_visibility: String!
  event_visibility: String!
  merchandize_visibility: String!
  adress_1: String!
  adress_2: String!
  state: String!
  city: String!
  zipcode: String!
  country: String!
  lat: Decimal
  lng: Decimal
  timezone: String!
  language: String!
  email: String!
  image: DjangoImageType
  twitter: String!
  instagram: String!
  facebook: String!
  gcal_uid: String!
  url: String!
  url_display: String!
  f1: DjangoFileType
  f2: DjangoFileType
  f3: DjangoFileType
  f4: DjangoFileType
  f5: DjangoFileType
  f1_display: String!
  f2_display: String!
  f3_display: String!
  f4_display: String!
  f5_display: String!
  has_accepted_org_data_ass_agreement: Boolean!
  is_locked: Boolean!
  currency: String!
  vat_number: String!
  org_id: String!
  pay_to_1: String!
  pay_to_2: String!
  pay_to_3: String!
  premium_subscription: String!
  member_payment: String!
  payment_methods: String!

  """for 3rd party apps, never used within SSI or accessed, max 500 char"""
  custom_api: String!

  """return the events for this organization"""
  events(
    """year, 4 digits."""
    year: Int = null

    """month 1-12, only works if also year provided"""
    month: Int = null
  ): [EventInterface!]!
  members(status: String = null): [OrganizationMemberNode!]!
  get_abstract_member: OrganizationMemberNode!
  is_current_role_admin: Boolean!
  is_current_role_staff: Boolean!
  is_current_role_assistant: Boolean!
  get_cc_calling_choices: [ChoiceNode!]!
  get_sports_choices: [ChoiceNode!]!
  get_visibility_choices: [ChoiceNode!]!
  get_member_registration_choices: [ChoiceNode!]!
  get_member_visibility_choices: [ChoiceNode!]!
  get_event_visibility_choices: [ChoiceNode!]!
  get_merchandize_visibility_choices: [ChoiceNode!]!
  get_state_choices: [ChoiceNode!]!
  get_country_choices: [ChoiceNode!]!
  get_language_choices: [ChoiceNode!]!
  get_currency_choices: [ChoiceNode!]!
  get_member_payment_choices: [ChoiceNode!]!
  get_payment_methods_choices: [ChoiceNode!]!
}

"""Decimal (fixed-point)"""
scalar Decimal

type DjangoImageType {
  name: String!
  path: String!
  size: Int!
  url: String!
  width: Int!
  height: Int!
}

type DjangoFileType {
  name: String!
  path: String!
  size: Int!
  url: String!
}

"""Organization Member Node"""
type OrganizationMemberNode implements Node {
  """The Globally Unique ID of this object"""
  id: GlobalID!

  """
  Subject, a User that is member of another organization (XOR with organization)
  """
  shooter: ShooterNode!
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode!

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted when officials last update"""
  officials_updated: DateTime

  """ISO-8601 formatted"""
  lock_changed: DateTime

  """ISO-8601 formatted"""
  member_start_date: DateTime

  """ISO-8601 formatted"""
  member_end_date: DateTime

  """has membership been activated, i.e. have a start-date set"""
  has_membership_been_activatede: Boolean!

  """has membership been inactivated, i.e. have no start-date set"""
  has_membership_been_inactivatede: Boolean!

  """has membership been activated and if end-date set, not yet expired"""
  is_membership_valid: Boolean!

  """has membership been inactivated and has end-date passed (if set)"""
  is_membership_expired: Boolean!
  get_sports_display: String!
  get_status_display: String!
  get_org_name_display: String!
  get_org_short_name_display: String!
  get_org_full_name_display: String!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!
  get_sports_choices: [ChoiceNode!]!
  get_status_choices: [ChoiceNode!]!

  """
  Used when Subject ia a organization that is member of another organization (XOR with shooter). Not used at the moment
  """
  organization: OrganizationNode

  """
  Used when a shooter is member in an organization (this is the normal usage)
  """
  in_organization: OrganizationNode!
  sports: String!
  status: String!
  number: Int!
  is_favourite: Boolean!
  comment: String!
  admin_comment: String!
  notify: Boolean!
  member_type: String!
  officials_roles: String!
  officials_points: Int!
  paid: Boolean!
  has_accepted_org_data_policy: Boolean!
  is_locked: Boolean!
  pk: GlobalID!

  """returns all competitors w. results for member"""
  results(year: Int!, month: Int = null): [CompetitorInterface!]!

  """returns all competitors for member"""
  competitors(
    """year, 4 digits."""
    year: Int = null

    """month 1-12, only works if also year provided"""
    month: Int = null
  ): [CompetitorInterface!]!

  """
  returns all logentries for member, if no year/month current full year assumed
  """
  logentries(
    """year, 4 digits."""
    year: Int = null

    """month 1-12, only works if also year provided"""
    month: Int = null
    log_klass: String = null
    log_type: String = null
  ): [LogEntryNode!]!

  """returns all payments from member/shooter for org merch"""
  payments(
    """year, 4 digits."""
    year: Int = null

    """month 1-12, only works if also year provided"""
    month: Int = null
  ): [MerchandizeOrderNode!]!
}

"""
Used for choice fields with value beeing db value and display the human-readable or display value
"""
type ChoiceNode {
  value: String!
  display: String!
}

"""
LogEntry Node. This is used for many many type of logentries and the Klass attribute states which type it is.
"""
type LogEntryNode {
  verified_by: ShooterNode!

  """ISO-8601 formatted"""
  verified: DateTime
  is_verified: Boolean!

  """has signature/image been used to signing (else PIN code used)"""
  is_verified_w_signature: Boolean!

  """ISO-8601 formatted"""
  starts: DateTime!

  """ISO-8601 formatted"""
  stops: DateTime
  get_chronograph_all_shots_w_unit: String!
  get_chronograph_mean_w_unit: String!
  get_chronograph_median_w_unit: String!
  get_chronograph_std_w_unit: String!
  get_temp_w_unit: String!
  get_wind_speed_w_unit: String!
  get_zeroed_distance_w_unit: String!
  get_target_distance_w_unit: String!
  get_air_pressure_w_unit: String!
  get_target_speed_w_unit: String!
  get_zeroed_shift_elevation_w_unit: String!
  get_zeroed_shift_windage_w_unit: String!
  get_shot_group_size_w_unit: String!
  get_shot_group_cc_shift_elevation_w_unit: String!
  get_shot_group_cc_shift_windage_w_unit: String!
  get_details_display: String!
  get_name_or_details_display: String!
  get_klass_display: String!
  get_input_units_display: String!
  get_output_units_display: String!
  get_entry_type_display: String!
  get_status_display: String!
  get_sport_display: String!
  get_shooting_focus_display: String!
  get_mental_focus_display: String!
  get_physical_focus_display: String!
  get_weather_display: String!
  klass: String!
  session: DjangoModelType
  exercise: DjangoModelType
  input_units: String!
  output_units: String!
  name: String!
  description: String!
  shooter_latitude: Decimal!
  shooter_longitude: Decimal!
  shooter_altitude: Decimal!
  firearm: FirearmNode!
  sight: DjangoModelType
  ammunition: DjangoModelType
  recipe: DjangoModelType
  organization: DjangoModelType
  organization_member: DjangoModelType
  entry_type: String!
  status: String!
  sport: String!
  shooting_focus: String!
  mental_focus: String!
  physical_focus: String!
  length: String!
  rounds: String!
  officials_roles: String!
  officials_points: String!
  results: String!
  string_points_1: String!
  string_points_2: String!
  string_points_3: String!
  string_points_4: String!
  string_points_5: String!
  string_hits_1: String!
  string_hits_2: String!
  string_hits_3: String!
  string_hits_4: String!
  string_hits_5: String!
  wind_direction: Int!
  humidity: Int!
  weather: String!
  sun_direction: Int!
  target_inclination_deg: Int!
  target_heading_deg: Int!
  chrono: String!
  temp_celcius: Decimal!
  temp_farenheit: Decimal!
  wind_speed_ms: Decimal!
  wind_speed_mph: Decimal!
  air_pressure_mbar: Decimal!
  air_pressure_inHg: Decimal!
  zeroed_distance_m: Decimal!
  zeroed_distance_yards: Decimal!
  zeroed_shift_elevation_mm: Decimal!
  zeroed_shift_elevation_inches: Decimal!
  zeroed_shift_windage_mm: Decimal!
  zeroed_shift_windage_inches: Decimal!
  target_distance_m: Decimal!
  target_distance_yards: Decimal!
  target_speed_ms: Decimal!
  target_speed_fps: Decimal!
  shot_group_cc_shift_elevation_mm: Decimal!
  shot_group_cc_shift_elevation_inches: Decimal!
  shot_group_cc_shift_windage_mm: Decimal!
  shot_group_cc_shift_windage_inches: Decimal!
  shot_group_size_mm: Decimal!
  shot_group_size_inches: Decimal!
  chronograph_cm_per_second: String!
  string_1: String!
  string_2: String!
  string_3: String!
  string_4: String!
  string_5: String!
  string_6: String!
  string_7: String!
  string_8: String!
  string_9: String!
  string_10: String!
  string_comment_1: String!
  string_comment_2: String!
  string_comment_3: String!
  string_comment_4: String!
  string_comment_5: String!
  string_comment_6: String!
  string_comment_7: String!
  string_comment_8: String!
  string_comment_9: String!
  string_comment_10: String!
  signature: DjangoImageType

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!
  get_klass_choices: [ChoiceNode!]!
  get_input_units_choices: [ChoiceNode!]!
  get_output_units_choices: [ChoiceNode!]!
  get_entry_type_choices: [ChoiceNode!]!
  get_status_choices: [ChoiceNode!]!
  get_sport_choices: [ChoiceNode!]!
  get_shooting_focus_choices: [ChoiceNode!]!
  get_mental_focus_choices: [ChoiceNode!]!
  get_physical_focus_choices: [ChoiceNode!]!
  get_weather_choices: [ChoiceNode!]!
}

"""Firearm Node"""
type FirearmNode {
  """ISO-8601 formatted"""
  purchased: DateTime

  """ISO-8601 formatted"""
  built: DateTime

  """ISO-8601 formatted"""
  last_fired: DateTime

  """ISO-8601 formatted"""
  last_cleaned: DateTime

  """ISO-8601 formatted"""
  last_repaired: DateTime
  get_make_and_caliber: String!
  get_barrel_length_w_unit: String!
  get_input_units_display: String!
  get_output_units_display: String!
  get_weapon_type_display: String!
  get_weapon_class_display: String!
  get_weapon_usage_display: String!
  get_make_display: String!
  get_barrel_twist_direct_display: String!
  get_caliber_display: String!
  organization: DjangoModelType
  input_units: String!
  output_units: String!

  """char 3"""
  weapon_type: String!

  """char 3"""
  weapon_class: String!

  """char 400, comma-separated list"""
  weapons_usage: String!

  """char 8"""
  make: String!

  """char 40"""
  name: String!

  """char 8"""
  caliber: String!

  """char 300"""
  serial: String!
  barrel_length_cm: Decimal!
  barrel_length_inches: Decimal!

  """in turns of inches, max 99999.9"""
  barrel_twist: Decimal!

  """direction of twist, L or R, max 3 char"""
  barrel_twist_direct: String!

  """rounds fired, will auto-increment with usage in SSI"""
  rounds_fired: Int!

  """for 3rd party apps, never used within SSI or accessed, max 500 char"""
  custom_api: String!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!
  uses_sights: [SightNode!]!
  uses_suppressors: [SuppressorNode!]!
  get_input_units_choices: [ChoiceNode!]!
  get_output_units_choices: [ChoiceNode!]!
  get_weapon_type_choices: [ChoiceNode!]!
  get_weapon_class_choices: [ChoiceNode!]!
  get_weapons_usage_choices: [ChoiceNode!]!
  get_make_choices: [ChoiceNode!]!
  get_barrel_twist_direct_choices: [ChoiceNode!]!
  get_caliber_choices: [ChoiceNode!]!
  get_prematch_choices: [ChoiceNode!]!
}

"""Sight Node"""
type SightNode {
  """ISO-8601 formatted"""
  purchased: DateTime
  get_height_w_unit: String!
  get_offset_w_unit: String!
  get_zeroed_distance_w_unit: String!
  get_zeroed_shift_elevation_w_unit: String!
  get_zeroed_shift_windage_w_unit: String!
  get_input_units_display: String!
  get_output_units_display: String!
  get_sight_type_display: String!
  get_make_display: String!
  get_reticle_display: String!
  get_elevation_unit_display: String!
  get_elevation_turret_grad_display: String!
  get_windage_unit_display: String!
  get_windage_turret_grad_display: String!
  get_lead_unit_display: String!
  organization: DjangoModelType
  input_units: String!
  output_units: String!

  """max 5 char"""
  sight_type: String!

  """max 6 char"""
  make: String!

  """max 40 char"""
  model: String!

  """max 300 char"""
  serial: String!

  """to be defined later"""
  reticle: String!

  """unit of clicks e.g. MOA, 5 char"""
  elevation_unit: String!

  """size of click, 5 char"""
  elevation_turret_grad: String!

  """unit of clicks e.g. MOA, 5 char"""
  windage_unit: String!

  """size of click, 5 char"""
  windage_turret_grad: String!

  """prefered or used lead unit of moving target"""
  lead_unit: String!
  firearm: DjangoModelType
  height_inches: Decimal!
  height_mm: Decimal!
  offset_mm: Decimal!
  offset_inches: Decimal!
  zeroed_distance_m: Decimal!
  zeroed_distance_yards: Decimal!
  zeroed_shift_elevation_mm: Decimal!
  zeroed_shift_elevation_inches: Decimal!
  zeroed_shift_windage_mm: Decimal!
  zeroed_shift_windage_inches: Decimal!

  """for 3rd party apps, never used within SSI or accessed, max 500 char"""
  custom_api: String!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!
  get_input_units_choices: [ChoiceNode!]!
  get_output_units_choices: [ChoiceNode!]!
  get_sight_type_choices: [ChoiceNode!]!
  get_make_choices: [ChoiceNode!]!
  get_reticle_choices: [ChoiceNode!]!
  get_elevation_unit_choices: [ChoiceNode!]!
  get_elevation_turret_grad_choices: [ChoiceNode!]!
  get_windage_unit_choices: [ChoiceNode!]!
  get_windage_turret_grad_choices: [ChoiceNode!]!
  get_lead_unit_choices: [ChoiceNode!]!
}

"""Suppressor Node"""
type SuppressorNode {
  """ISO-8601 formatted"""
  purchased: DateTime

  """ISO-8601 formatted"""
  last_cleaned: DateTime

  """ISO-8601 formatted"""
  last_fired: DateTime
  get_weight_w_unit: String!
  get_overall_length_w_unit: String!
  get_added_length_w_unit: String!
  get_input_units_display: String!
  get_output_units_display: String!
  get_make_display: String!
  get_caliber_display: String!
  organization: DjangoModelType
  input_units: String!
  output_units: String!

  """max 6 char"""
  make: String!

  """max 40 char"""
  model: String!

  """max 300 char"""
  serial: String!

  """char 8"""
  caliber: String!
  firearm: DjangoModelType
  overall_length_mm: Decimal!
  overall_length_inches: Decimal!
  added_length_mm: Decimal!
  added_length_inches: Decimal!
  weight_gram: Decimal!
  weight_ounces: Decimal!

  """Sound reduction by silcener"""
  sound_reduction: Decimal!

  """for 3rd party apps, never used within SSI or accessed, max 500 char"""
  custom_api: String!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!
  get_input_units_choices: [ChoiceNode!]!
  get_output_units_choices: [ChoiceNode!]!
  get_make_choices: [ChoiceNode!]!
  get_caliber_choices: [ChoiceNode!]!
}

"""Merchandize Order Node (associated with any event or organization) """
type MerchandizeOrderNode {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!
  shooter: ShooterNode!
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode!
  is_locked: Boolean!

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime
  is_unpaid: Boolean!
  is_paid: Boolean!
  is_refunded: Boolean!
  is_ordered: Boolean!
  is_accepted: Boolean!
  is_delivered: Boolean!

  """deletion is done by the shooter that made the order """
  is_deleted: Boolean!
  get_size_display: String!
  get_payment_display: String!
  get_status_display: String!

  """return details with amount/size and type of order"""
  get_full_display_text: String!
  amount: Int!
  choosen: Boolean!
  size: String!
  comment: String!
  payment: String!
  status: String!
  merchandize: DjangoModelType!
  get_size_choices: [ChoiceNode!]!
  get_payment_choices: [ChoiceNode!]!
  get_status_choices: [ChoiceNode!]!
}

"""
Standard stages are templates used to copy/clone from to create standard/classifier stages
"""
interface StandardStageInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!

  """ISO-8601 formatted"""
  created: DateTime!

  """rule/scoring, 2 char"""
  rule: String!

  """max 35 char"""
  name: String!
  active: Boolean!
  image: DjangoImageType

  """1000 char"""
  procedure: String!

  """1000 char"""
  start_pos: String!

  """500 char"""
  firearm_condition: String!

  """200 char"""
  start_on: String!

  """200 char"""
  stop_on: String!

  """500 char"""
  penalties_notes: String!

  """1000 char"""
  setup_notes: String!
}

"""
Used to show possible deviating scorecards + alert message to make it easy to spot errors
"""
type DeviatingScoreCardNode {
  scorecard: ScoreCardInterface!
  alert: String!
}

"""
Used for choice fields with value beeing db value and display the human-readable or display value
"""
type DeviatingCompetitorNode {
  competitor: CompetitorInterface!
  alert: String!
}

"""Team Interface - for a team in a sport"""
interface TeamInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!
  is_locked: Boolean!

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode!
  get_state_display: String!
  get_region_display: String!
  get_status_display: String!
  number_of_team_members: Int!
  number: Int!

  """char 45"""
  name: String!

  """region 3 char"""
  region: String!
  state: String!

  """registration status, 1 char"""
  status: String!
  paid: Boolean!

  """internal, 300 char"""
  comment: String!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_member: TeamMemberInterface!
  get_state_choices: [ChoiceNode!]!
  get_region_choices: [ChoiceNode!]!
  get_status_choices: [ChoiceNode!]!
}

"""for a team-member in a sport"""
interface TeamMemberInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!
  is_locked: Boolean!

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode!
  get_status_display: String!

  """registration status of team member"""
  status: String!

  """internal, 300 char"""
  comment: String!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!
  get_status_choices: [ChoiceNode!]!
}

"""Squads, groups of shooters in a match"""
interface SquadInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!
  is_locked: Boolean!

  """ISO-8601 formatted"""
  created: DateTime

  """ISO-8601 formatted"""
  updated: DateTime

  """ISO-8601 formatted"""
  lock_changed: DateTime

  """returns next squad in circular mode"""
  get_next_squad: SquadInterface!

  """returns previous squad in circular mode"""
  get_previous_squad: SquadInterface!
  created_by: ShooterNode
  updated_by: ShooterNode
  lock_changed_by: ShooterNode!
  number: Int!

  """max members in squad, default 10"""
  max_competitors: Int!

  """100 char"""
  comment: String!

  """2 char"""
  registration: String!

  """squad shoots prematch"""
  prematch: Boolean!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!

  """competitors indexed typically on stage-number shooting on"""
  competitors_indexed(shift_on: Int! = 1, incl_dnf: Boolean! = false, incl_dqed: Boolean! = false): [CompetitorInterface!]!

  """
  assumes event uses stages & returns a comma separated string of ints for a five-tuple; <verified, unverified, scored, unscored, total_to_score>
  """
  scoring_progress: ScoringProgressNode!
  scoring_progress_at_stage(
    """Stage ID"""
    stage_id: String = null
  ): ScoringProgressNode!

  """returns Squad X. or Posse X. or Patrol X where X is number"""
  get_squad_display: String!
  get_squad_registration_choices: [ChoiceNode!]!
}

"""
Generic Merchandize - can be associated with any form of event (a match or serie or organization - all whom have a shop)

Note: remember to add the following in any Event; merchandizes = fields.GenericRelation(NewMerchandize)

this way you can do event.merchandizes.all() 
"""
type MerchandizeNode {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!
  orders: [MerchandizeOrderNode!]!
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode!
  is_locked: Boolean!

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime

  """ISO-8601 formatted"""
  offer_starts: DateTime

  """ISO-8601 formatted"""
  offer_ends: DateTime
  is_offered_to_anyone: Boolean!
  is_offered_to_competitors_only: Boolean!
  is_offered_to_competitors: Boolean!
  offered_during_registration: Boolean!
  offered_during_match: Boolean!
  can_be_bought_by_self: Boolean!
  is_single_choice: Boolean!
  is_size: Boolean!
  is_amount: Boolean!
  is_registration: Boolean!
  is_membership: Boolean!
  is_membership_dates: Boolean!
  is_membership_length: Boolean!
  is_service: Boolean!
  is_service_dates: Boolean!
  is_service_length: Boolean!
  get_choice_display: String!
  get_offered_when_display: String!
  get_offered_to_display: String!
  get_to_members_display: String!
  get_recurrence_display: String!

  """max 30 chars"""
  name: String!

  """max 300 chars"""
  details: String!
  included: Boolean!
  choice: String!
  offered_when: String!
  offered_to: String!
  available_sizes: String!
  price: Decimal!
  vat_level: Decimal!
  allow_comment: Boolean!
  pay_online: Boolean!
  comment_help_text: String!
  offered_to_members: String!
  recurrence: String!
  service_starts: DateTime
  service_ends: DateTime
  service_length_min: Int!

  """event that offers merchandize or None"""
  subject_event: EventInterface!

  """organization that offers merchandize or None"""
  subject_organization: OrganizationNode!
  is_subject_event: Boolean!
  is_subject_organization: Boolean!
  get_abstract_order: MerchandizeOrderNode!
  get_choice_choices: [ChoiceNode!]!
  get_offered_when_choices: [ChoiceNode!]!
  get_offered_to_choices: [ChoiceNode!]!
  get_offered_to_members_choices: [ChoiceNode!]!
  get_recurrence_choices: [ChoiceNode!]!
}

"\n        ComponentMatch Interface - link between a Match w. a Series. Allows that a Match can be\n        component match in many Series and then included/excluded and more depending on state of the component \n    "
interface ComponentMatchInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!
  is_locked: Boolean!

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime
  match: EventInterface!
  serie: EventInterface!
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode!
  number: Int!
  included: Boolean!
}

"""Ammunition Node"""
type AmmunitionNode {
  get_velocity_w_unit: String!
  get_oal_w_unit: String!
  get_powder_weight_w_unit: String!
  get_powder_w_unit: String!
  get_powder_cost_w_unit: String!
  get_bullet_weight_w_unit: String!
  get_bullet_w_unit: String!
  get_bullet_length_w_unit: String!
  get_bullet_diameter_w_unit: String!
  get_input_units_display: String!
  get_output_units_display: String!
  get_ammmo_type_display: String!
  get_caliber_display: String!
  get_purpose_display: String!
  get_bullet_bc_drag_model_display: String!
  get_currency_display: String!
  organization: DjangoModelType
  recipe: DjangoModelType
  input_units: String!
  output_units: String!

  """type of ammo, 3 char"""
  ammo_type: String!

  """char 40"""
  batch_name: String!

  """caliber, 8 char"""
  caliber: String!

  """char 400"""
  purpose: String!

  """Take caution, special usage, requirements or other"""
  take_caution: Boolean!
  velocity_ms: Decimal!
  velocity_fps: Decimal!
  oal_mm: Decimal!
  oal_inches: Decimal!

  """rounds from start of ammo"""
  rounds: Int!

  """rounds fires"""
  rounds_fired: Int!

  """char 40"""
  powder_make: String!

  """char 40"""
  powder_lot: String!
  powder_weight_gram: Decimal!
  powder_weight_grains: Decimal!
  powder_cost_500_gram: Decimal!
  powder_cost_500_pound: Decimal!

  """char 40"""
  bullet_make: String!
  bullet_weight_gram: Decimal!
  bullet_weight_grains: Decimal!
  bullet_length_mm: Decimal!
  bullet_length_inches: Decimal!
  bullet_diameter_mm: Decimal!
  bullet_diameter_inches: Decimal!

  """BC, max 9999999.999"""
  bullet_bc: Decimal!

  """char 3"""
  bullet_bc_drag_model: String!

  """bullet cost, max 99999999.99"""
  bullet_cost: Decimal!

  """char 40"""
  primer_make: String!

  """primer cost, max 99999999.99"""
  primer_cost: Decimal!

  """char 40"""
  brass_make: String!

  """brass cost, max 99999999.99"""
  brass_cost: Decimal!

  """other costs per round, max 99999999.99"""
  other_cost_per_round: Decimal!

  """other total / one-off costs, max 99999999.99"""
  other_total_cost: Decimal!

  """currency, ISO4217, 3 char"""
  currency: String!

  """for 3rd party apps, never used within SSI or accessed, max 500 char"""
  custom_api: String!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!
  get_input_units_choices: [ChoiceNode!]!
  get_output_units_choices: [ChoiceNode!]!
  get_ammo_type_choices: [ChoiceNode!]!
  get_caliber_choices: [ChoiceNode!]!
  get_purpose_choices: [ChoiceNode!]!
  get_bullet_bc_drag_model_choices: [ChoiceNode!]!
  get_currency_choices: [ChoiceNode!]!
}

"""
Friend (or actually a friend relation, as it can be accepted - before this as invitation) Node
"""
type FriendNode {
  id: ID!

  """from/issuing invitation"""
  user_subject: ShooterNode!

  """to/reciving invitation"""
  user_object: ShooterNode!
  created_by: ShooterNode!

  """ISO-8601 formatted"""
  expires: DateTime
  get_status_display: String!
  role: DjangoModelType!
  status: String!
  subject_incentive_type: String!
  subject_incentive_value: Int!
  object_incentive_type: String!
  object_incentive_value: Int!
  get_status_choices: [ChoiceNode!]!
}

type SquadScoringProgressNode {
  squad: SquadInterface!
  scoring_progress: ScoringProgressNode!
}

"""IpscMatch used for IPSC, USPSA, SRA, TTS, Sivil, 3-Gun matches"""
type IpscMatchNode implements EventInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!
  is_locked: Boolean!
  supports_rating: Boolean!
  is_rated: Boolean!

  """ISO-8601 formatted, when/if has been elo-rated"""
  rated: DateTime

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime

  """competitors that did not show/complete/finnish the event"""
  competitors_did_not_finish: [CompetitorInterface!]!
  competitors_approved_w_wo_results_wo_squad_not_dnf: [CompetitorInterface!]!
  competitors_approved_w_wo_results_not_dnf: [CompetitorInterface!]!

  """
  list of scorecards that are DQ'ed (if event used stages, else use competitors_dq)
  """
  scorecards_dq: [ScoreCardInterface!]!

  """
  list of competitors that are DQ'ed (if stages used, check scorecard for reason of DQ)
  """
  competitors_dq: [CompetitorInterface!]!

  """
  list of scorecards with warning (if event used stages, else use competitors_w_warning)
  """
  scorecards_w_warning: [ScoreCardInterface!]!

  """
  list of competitors a warning (if stages used, check scorecards for reason of warning)
  """
  competitors_w_warning: [CompetitorInterface!]!

  """ISO-8601 formatted"""
  starts: DateTime!

  """ISO-8601 formatted"""
  ends: DateTime

  """ISO-8601 formatted"""
  registration_starts: DateTime!

  """ISO-8601 formatted"""
  registration_closes: DateTime

  """ISO-8601 formatted"""
  squadding_starts: DateTime

  """ISO-8601 formatted"""
  pm_squadding_starts: DateTime

  """ISO-8601 formatted"""
  squadding_closes: DateTime
  short_url: String!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!

  """
  minimum rounds here is only used to show as info, never to
  be used in scoring number of hits etc.
  """
  minimum_rounds: Int!
  is_tournament_match: Boolean!
  is_component_match: Boolean!

  """
  Registration is only possible if registration date has started and not closed and the registration is open.
  Use this check to present if registration for a shooter shall be possible or not.
  """
  is_registration_possible: Boolean!
  is_squadding_possible: Boolean!
  is_pm_squadding_possible: Boolean!
  supports_bulk_scoring: Boolean!
  uses_stages: Boolean!
  uses_shoot_off_stages: Boolean!
  uses_strings: Boolean!
  number_of_strings: Boolean!
  number_of_rounds_per_string: Int!
  supports_shoot_off_strings: Boolean!
  do_index_competitor_when_scoring: Boolean!
  supports_standard_stages: Boolean!
  supports_score_string_for_squad: Boolean!
  supports_score_all_in_squad_at_stage: Boolean!
  is_premium_activated: Boolean!

  """returns list of RBAC roles for current user"""
  role_names: [String!]!

  """
  Returns True if the premium for event is fully paid or if 
  event is associated with a premium-org that has enable free-premium and small,
  not to many non-members and and fee not to high
  
  ** OR ** 
  
  the event has previoously been set to completed (under old premium valid things
  so we do not make them pay for old events)
  """
  is_premium_fully_valid: Boolean!
  has_geopos: Boolean!
  has_prematch: Boolean!

  """is prematch score included in overall results"""
  has_prematch_included: Boolean!
  uses_pin_verification: Boolean!
  uses_signature_verification: Boolean!
  scoring_completed: Decimal!

  """
  obfuscated id used when registering, only shown when reg possible or staff/admin of event to avoid bot-registrations
  """
  obfuscated_id: String!
  get_standard_stage_selection: [StandardStageInterface!]!
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode
  get_full_rule_display: String!
  get_full_level_display: String!
  get_prematch_display: String!
  get_status_display: String!
  get_registration_display: String!
  get_results_display: String!
  get_verify_using_display: String!
  get_region_display: String!
  get_currency_display: String!
  get_visibility_display: String!
  get_state_display: String!
  does_current_user_get_result: Boolean!
  number_of_prematch_competitors_registered: Int!
  number_of_prematch_competitors_waiting: Int!
  number_of_prematch_competitors_pending: Int!
  number_of_prematch_competitors_approved: Int!
  number_of_mainmatch_competitors_registered: Int!
  number_of_mainmatch_competitors_waiting: Int!
  number_of_mainmatch_competitors_pending: Int!
  number_of_mainmatch_competitors_approved: Int!
  competitors_unscored_list: [CompetitorInterface!]!
  prematch_competitors_registered: [CompetitorInterface!]!
  prematch_competitors: [CompetitorInterface!]!
  prematch_competitors_pending: [CompetitorInterface!]!
  prematch_competitors_approved: [CompetitorInterface!]!
  prematch_competitors_approved_wo_results: [CompetitorInterface!]!
  prematch_competitors_approved_w_wo_results: [CompetitorInterface!]!
  prematch_competitors_approved_w_wo_results_wo_squad: [CompetitorInterface!]!
  prematch_competitors_waiting: [CompetitorInterface!]!
  prematch_competitors_declined: [CompetitorInterface!]!
  prematch_competitors_deleted: [CompetitorInterface!]!
  mainmatch_competitors_registered: [CompetitorInterface!]!
  mainmatch_competitors: [CompetitorInterface!]!
  mainmatch_competitors_pending: [CompetitorInterface!]!
  mainmatch_competitors_approved: [CompetitorInterface!]!
  mainmatch_competitors_approved_wo_results: [CompetitorInterface!]!
  mainmatch_competitors_approved_w_wo_results: [CompetitorInterface!]!
  mainmatch_competitors_approved_w_wo_results_wo_squad: [CompetitorInterface!]!
  mainmatch_competitors_waiting: [CompetitorInterface!]!
  mainmatch_competitors_declined: [CompetitorInterface!]!
  mainmatch_competitors_deleted: [CompetitorInterface!]!
  group: DjangoModelType!
  organizer: OrganizationNode!
  accreditor: DjangoModelType
  accreditation_status: String!

  """name, max 50"""
  name: String!

  """max 600 char"""
  description: String!

  """max 800 char"""
  information: String!

  """max competitors in match or main match"""
  max_competitors: Int!

  """do we have a prematch, and is scoring included, 2 char"""
  prematch: String!

  """max competitors in pre-match, if used"""
  max_prematch_competitors: Int!

  """does event support teams"""
  allow_teams: Boolean!
  allows_spotter_shooter_teams: Boolean!

  """allow teams to edit and change members themself"""
  allow_team_self_management: Boolean!

  """team members in a team"""
  number_of_team_members: Int!

  """number of best scores used for team result"""
  result_from_team_members: Int!

  """max 2 char, status of even"""
  status: String!

  """status of registration, 2 char"""
  registration: String!

  """visibility of results, 2 char"""
  results: String!

  """verification method, 3 char"""
  verify_using: String!

  """
  defines family of sport (but you need rule+subrule and sometimes firearm to decide explicit sport), e.g. ipsc-famliy is IPSC, USPSA, SRA etc and sub-rule separates these
  """
  rule: String!

  """region, ISO31663A3, 3 char"""
  region: String!

  """currency, ISO4217, 3 char"""
  currency: String!

  """relevant url for event, max 300 char"""
  url: String!

  """display or link textfor url, max 20 char"""
  url_display: String!
  gcal_uid: String!

  """can a user register more then once or not"""
  multiple_reg_allowed: Boolean!

  """visibility of event, 3 char"""
  visibility: String!

  """US Stage choices, 3 char max"""
  state: String!

  """place/location textual description, max 64 char"""
  venue: String!

  """format as 5,5 decimal"""
  lat: Decimal

  """format as 5,5 decimal"""
  lng: Decimal
  image: DjangoImageType
  banner: DjangoImageType
  banner_url: String!
  f1: DjangoFileType
  f2: DjangoFileType
  f3: DjangoFileType
  f4: DjangoFileType
  f5: DjangoFileType
  f6: DjangoFileType
  f1_display: String!
  f2_display: String!
  f3_display: String!
  f4_display: String!
  f5_display: String!
  f6_display: String!
  has_accepted_event_data_ass_agreement: Boolean!

  """
  Event has enabled free Premium, requires that Organization associated with event allows for this (free within limits)
  """
  organization_enabled_event_premium: Boolean!
  comment: String!
  competitor_payment: String!
  total_net: Decimal!
  total_tax: Decimal!
  total_fee: Decimal!
  premium_currency: String!
  payment_methods: String!

  """for 3rd party apps, never used within SSI or accessed, max 500 char"""
  custom_api: String!
  competitors: [CompetitorInterface!]!

  """competitors indexed typically on stage-number shooting on"""
  competitors_indexed(
    """
    all/no/yes as in all comps, no those without squad, yes those with squad
    """
    sqs: String!
    shift_on: Int! = 1
    incl_dnf: Boolean! = false
    incl_dqed: Boolean! = false
  ): [CompetitorInterface!]!

  """
  list of possible deviating scores as a tuple <scorecard, alert-text message>
  """
  deviating_scorecards: [DeviatingScoreCardNode!]!

  """
  list of possible deviating competitors as a tuple <scorecard, alert-text message> (only for non-stage events)
  """
  deviating_competitors: [DeviatingCompetitorNode!]!

  """available standard-stages for sport, to be cloned if to be used"""
  available_standard_stages: [StandardStageInterface!]!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_competitor: CompetitorInterface!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_stage: StageInterface!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_team: TeamInterface!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_squad: SquadInterface!
  is_current_role_admin: Boolean!
  is_current_role_staff: Boolean!
  is_current_role_assistant: Boolean!

  """returns all event order payments (typically by competitors)"""
  order_payments: [PaymentInterface!]!

  """returns all event premium payments (for premium features of even)"""
  premium_payments: [PaymentInterface!]!
  merchandizes: [MerchandizeNode!]!
  merchandizes_on_registration: [MerchandizeNode!]!
  merchandize_orders: [MerchandizeOrderNode!]!
  component_matches: [ComponentMatchInterface!]!
  serie_type: String!
  get_prematch_choices: [ChoiceNode!]!
  get_status_choices: [ChoiceNode!]!
  get_registration_choices: [ChoiceNode!]!
  get_results_choices: [ChoiceNode!]!
  get_verify_using_choices: [ChoiceNode!]!
  get_region_choices: [ChoiceNode!]!
  get_currency_choices: [ChoiceNode!]!
  get_visibility_choices: [ChoiceNode!]!
  get_state_choices: [ChoiceNode!]!

  """returns list with id to organizations as values and name as display"""
  get_organizer_choices: [ChoiceNode!]!

  """comma separated list of firearms, max 400 char"""
  firearms: String!

  """sub-rule, 2 char, default nm"""
  sub_rule: String!

  """stages in event"""
  stages: [StageInterface!]!
  squads: [SquadInterface!]!
  teams: [TeamInterface!]

  """level, 2 char"""
  level: String!

  """recognized divisions in event, comma-separated string, max 400 char"""
  tournament_divisions: String!

  """recognized divisions in event, comma-separated string, max 400 char"""
  handgun_divs: String!

  """recognized divisions in event, comma-separated string, max 400 char"""
  rifle_divs: String!

  """recognized divisions in event, comma-separated string, max 400 char"""
  mini_rifle_divs: String!

  """recognized divisions in event, comma-separated string, max 400 char"""
  prec_rifle_divs: String!

  """recognized divisions in event, comma-separated string, max 400 char"""
  shotgun_divs: String!

  """recognized divisions in event, comma-separated string, max 400 char"""
  air_divs: String!

  """
  recognized divisions in event, comma-separated string, max 400 char. PCC can alss be div in handgun event
  """
  pcc_divs: String!

  """
  recognized categories in event, comma-separated string, max 200 char, only SRA Events
  """
  categories: String!

  """min competitors to generate category results"""
  cat_result_limit: Int!

  """
  Merges GS->SS->S, SJ->J, LS->LS if competitors less then required for category result
  """
  merge_ss_with_s: Boolean!

  """returns number of rounds in event"""
  get_rounds_display: Int!
  get_divisions_display: String!
  get_level_display: String!
  get_firearms_display: String!
  get_tournament_divisions_display: String!
  get_handgun_divs_display: String!
  get_rifle_divs_display: String!
  get_mini_rifle_divs_display: String!
  get_prec_rifle_divs_display: String!
  get_shotgun_divs_display: String!
  get_air_divs_display: String!
  get_pcc_divs_display: String!
  get_categories_display: String!

  """
  Returns a list of tuples <competitor, place, percentage, points>                                             for div and/or cat or Combined. Only if allowed to see  results
  """
  get_results(division: String = null, category: String = null): [IpscMatchResultNode!]!

  """Returns a list with ScoreCards that are disqualified in event"""
  get_disqualified(division: String = null, category: String = null): [IpscScoreCardNode!]!
  get_level_choices: [ChoiceNode!]!
  get_firearms_choices: [ChoiceNode!]!
  get_tournament_divisions_choices: [ChoiceNode!]!
  get_handgun_divs_choices: [ChoiceNode!]!
  get_rifle_divs_choices: [ChoiceNode!]!
  get_mini_rifle_divs_choices: [ChoiceNode!]!
  get_prec_rifle_divs_choices: [ChoiceNode!]!
  get_shotgun_divs_choices: [ChoiceNode!]!
  get_air_divs_choices: [ChoiceNode!]!
  get_pcc_divs_choices: [ChoiceNode!]!
  get_categories_choices: [ChoiceNode!]!
}

"""Competitor, place, percentage, points"""
type IpscMatchResultNode {
  competitor: IpscCompetitorNode
  place: Int
  percentage: Float
  points: Float
}

"""
Specific fields for Ipsc Competitor (used in IPSC, USPSA, SRA, TTS, Sivil, 3-Gun
"""
type IpscCompetitorNode implements CompetitorInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!

  """
  Returns true if all orders are paid *or* if self._paid = True (if there are no orders)
  """
  is_paid: Boolean!
  is_alread_logged: Boolean!
  is_locked: Boolean!

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime
  details: String!
  scorecards: [ScoreCardInterface!]!
  shooter: ShooterNode!
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode!
  get_club_display: String!
  get_club_short_display: String!
  get_sex_display: String!
  get_region_display: String!
  get_state_display: String!
  get_status_display: String!
  get_code_display: String!

  """max 30 char"""
  first_name: String!

  """max 30 char"""
  last_name: String!

  """value, 1 char"""
  sex: String!

  """max 300 char"""
  email: String!

  """ISO3166A3, 3 char. --- if no region or none"""
  region: String!

  """US state, 3 char"""
  state: String!

  """free text name of club, inferior to club_member if this is set"""
  club: String!

  """is for a club-member, can be used then to access club"""
  club_member: DjangoModelType

  """0 or blank means no number yet set, can take 5 min from registration"""
  number: Int!

  """registraion status, 1 char"""
  status: String!
  code: String!
  comment: String!

  """is competitor in prematch, default is False"""
  prematch: Boolean!

  """license number, 30 char"""
  license: String!
  notify: Boolean!

  """
  used to express if they did not show or stopped/left and this removed from scoring/results
  """
  did_not_finish: Boolean!
  has_accepted_event_data_policy: Boolean!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!

  """
  returns scoring version history iff not stages used in sport (i.e. scores stored directly per competitor)
  """
  scoring_history: [VersionNode!]!

  """
  assumes event uses stages & returns a comma separated string of ints for a five-tuple; <verified, unverified, scored, unscored, total_to_score>
  """
  scoring_progress: ScoringProgressNode!
  payments: [PaymentInterface!]!
  merchandize_orders: [MerchandizeOrderNode!]!

  """
  can current user update instance (e.g. are you allowed to update on yourself, or are you organizer)
  """
  can_current_update: Boolean!

  """
  ICE phone on format +CC-XXXXXXXXXX with leading country code dash phone number
  """
  ice_phone: String!

  """
  phone on format +CC-XXXXXXXXXX with leading country code dash phone number
  """
  phone: String!

  """
  returns result in visible format, if allowed to see for user making request
  """
  get_result_display: String!

  """country calling codes tuples"""
  get_cc_calling_choices: [ChoiceNode!]!
  get_sex_choices: [ChoiceNode!]!
  get_region_choices: [ChoiceNode!]!
  get_state_choices: [ChoiceNode!]!

  """returns list of id's to club-members is any that can compete for"""
  get_club_member_choices: [ChoiceNode!]!

  """returns list if admin/staff"""
  get_status_choices: [ChoiceNode!]!

  """returns list if admin/staff"""
  get_code_choices: [ChoiceNode!]!

  """
  returns list of avilable squads to choose from (if admin or approved competitor)
  """
  get_squad_choices: [ChoiceNode!]!

  """
  returns PIN code for self or if admin or staff of event (allows for off-line valuation if pin set)
  """
  pin: String!
  get_handgun_div_display: String!
  get_handgun_pf_display: String!
  get_rifle_div_display: String!
  get_rifle_pf_display: String!
  get_mini_rifle_div_display: String!
  get_prec_rifle_div_display: String!
  get_prec_rifle_pf_display: String!
  get_shotgun_div_display: String!
  get_air_div_display: String!
  get_pcc_div_display: String!
  get_tournament_division_display: String!
  get_sra_division_display: String!
  get_classification_display: String!
  shoots_manual_rifle: Boolean!
  minimum_rounds: Int!
  ipsc_region: String!
  get_division_display: String!
  div_place: Int!
  div_percent: Decimal!
  div_points: Decimal!
  cat_place: Int!
  cat_percent: Decimal!
  cat_points: Decimal!
  combined_place: Int!
  combined_percent: Decimal!
  combined_points: Decimal!
  tot_a: Int!
  tot_b: Int!
  tot_c: Int!
  tot_d: Int!
  tot_evt10: Int!
  tot_miss: Int!
  tot_penalty: Int!
  tot_procedural: Int!
  tot_raw_time: Decimal!
  event: IpscMatchNode!
  squad: IpscSquadNode

  """division, 5 char"""
  handgun_div: String!

  """+ or -, 1 char"""
  handgun_pf: String!

  """division, 5 char"""
  rifle_div: String!

  """+ or -, 1 char"""
  rifle_pf: String!

  """division, 5 char"""
  mini_rifle_div: String!

  """division, 5 char"""
  prec_rifle_div: String!

  """+ or -, 1 char"""
  prec_rifle_pf: String!

  """division, 5 char"""
  shotgun_div: String!

  """division, 5 char"""
  air_div: String!

  """division, 5 char"""
  pcc_div: String!
  tournament_division: String!

  """classification, 2 char"""
  classification: String!

  """
  ICS Alias, 16 char. ICS Alias is a worldwide ID within IPSC (4-16 alphanum only, no spaces, stored as lower-case
  """
  ics_alias: String!

  """
  USPSA num, 10 char. USPSA num is as ICS Alias but for USPSA, see user profile for full details
  """
  uspsa_num: String!

  """SRA ID, 10 char"""
  sra_num: String!

  """3-Gun ID, 10 char"""
  three_gun_id: String!

  """merged field of category and catetory2 in django model"""
  category: String!
  handgun_pf_choices: [ChoiceNode!]!
  rifle_pf_choices: [ChoiceNode!]!
  prec_rifle_pf_choices: [ChoiceNode!]!

  """choices for category, SRA is multiple choice"""
  category_choices: [ChoiceNode!]!
  classification_choices: [ChoiceNode!]!
  get_handgun_div_choices: [ChoiceNode!]!
  get_rifle_div_choices: [ChoiceNode!]!
  get_mini_rifle_div_choices: [ChoiceNode!]!
  get_prec_rifle_div_choices: [ChoiceNode!]!
  get_shotgun_div_choices: [ChoiceNode!]!
  get_air_div_choices: [ChoiceNode!]!
  get_pcc_div_choices: [ChoiceNode!]!
  get_tournament_division_choices: [ChoiceNode!]!
}

"""
Specific fields for Ipsc ScorCard (used in IPSC, USPSA, SRA, TTS, Sivil, 3-Gun
"""
type IpscScoreCardNode implements ScoreCardInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!

  """returns full scoring history Versions"""
  get_scoring_history: [VersionNode!]!
  is_verified: Boolean!

  """has signature/image been used to signing (else PIN code used)"""
  is_verified_w_signature: Boolean!
  is_locked: Boolean!

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime

  """ISO-8601 formatted"""
  verified: DateTime

  """Supports scoring analytics on stage/scoring-rule"""
  supports_scoring_analytics: Boolean!

  """
  List of human-readable strings with scoring analytics info (help to improve)
  """
  get_scoring_analytics: [String!]!
  verified_by: ShooterNode!
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode!

  """Got DQ'ed"""
  disqualified: Boolean!
  signature: DjangoImageType

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!
  stage: IpscStageNode!
  competitor: IpscCompetitorNode!
  div_place: Int!
  div_percent: Decimal!
  div_points: Decimal!
  cat_place: Int!
  cat_percent: Decimal!
  cat_points: Decimal!
  combined_place: Int!
  combined_percent: Decimal!
  combined_points: Decimal!
  get_dq_reason_display: String!

  """#A hits"""
  ascore: Int!

  """#B hits"""
  bscore: Int!

  """#C hits"""
  cscore: Int!

  """#D hits"""
  dscore: Int!

  """#H hits"""
  hscore: Int!

  """#X hits"""
  xscore: Int!

  """#Mike/misses"""
  miss: Int!

  """#overtime penalty +5p or also used for extra shots penalty"""
  overtime: Int!

  """# penalty of ns hits"""
  penalty: Int!

  """# procedurals"""
  procedural: Int!

  """Decimal 4,2 - 9999,99 is max number"""
  time: Decimal!

  """# Target not hit, time-plus only"""
  tnh: Int!

  """# Target not neutralized, time-plus only"""
  tnn: Int!

  """# Target not engaged, time-plus only"""
  tne: Int!

  """
  Time-plus only & EVT10 used as bonus target in SRA. Comma separated string of ints
  """
  evt: String!

  """
  Number of SRA Tasks completed for 2,4,5,10p. Comma separated string of ints
  """
  sra_tasks: String!

  """
  Number of SRA Targets completed for 2,4,5,10p. Comma separated string of ints
  """
  sra_targets: String!

  """time-plus only"""
  stage_not_fired: Boolean!

  """Sum of all time + bonus time of hitfactor. max 99,999"""
  timeplus: Decimal!

  """used in multigun where stage has different firearms and pf"""
  pf_correction: Int!

  """Zeroed in IPSC *but* Did Not Fire (DNF) in USPSA"""
  zeroed: Boolean!

  """rule 9.7.6.2 insufficient hits or misses recorded on the scoresheet"""
  incomplete: Boolean!

  """warning on stage"""
  warning: Boolean!

  """0-20 max as % special penalty"""
  spec_penalty: Int!

  """the total score from all A-D"""
  score: Int!

  """the total deductions from all penalties etc"""
  deductions: Int!

  """points = score - deductions, calculated"""
  points: Int!

  """hitfactor, stores/uses 7 decimalas but show less for user"""
  hitfactor: Decimal

  """DQ, 2 char. IF 'no' then not DQ"""
  dq_reason: String!

  """char 100"""
  comment: String!

  """3-Gun"""
  single_non_zero: Int!

  """3-Gun"""
  miss_aerial_clay: Int!

  """3-Gun"""
  fte: Int!

  """3-Gun"""
  mot_0: Int!

  """3-Gun"""
  mot_1: Int!

  """3-Gun"""
  mot_2: Int!

  """3-Gun"""
  procedural_1: Int!

  """3-Gun"""
  procedural_2: Int!
  get_dq_reason_choices: [ChoiceNode!]!
}

"""Scorecard, place, percentage, points"""
type IpscStageResultNode {
  scorecard: IpscScoreCardNode
  place: Int!
  percentage: Decimal!
  points: Decimal!
}

"""
SteelStage(id, number, name, venue, image, banner, banner_url, procedure, start_pos, firearm_condition, start_on, stop_on, penalties_notes, safety_angles, setup_notes, sort, included, _locked, created_by, created, updated_by, updated, lock_changed_by, lock_changed, event, scoring, firearm, string, count, stop_plate, sound_correction, standard, _scoring_completed, plates, option_plate_1, option_plate_2, option_plate_3, option_plate_4, stop_plate_index, hits_plate_1, hits_plate_2, hits_plate_3, hits_plate_4, hits_plate_5, hits_plate_6, hits_plate_7, hits_plate_8, hits_plate_9, hits_plate_10)
"""
type SteelStageNode implements StageInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!
  is_locked: Boolean!

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime
  scorecards: [ScoreCardInterface!]!

  """list of scorecards that are DQ'ed on stage"""
  scorecards_dq: [ScoreCardInterface!]!

  """list of scorecards with a warning on stage"""
  scorecards_w_warning: [ScoreCardInterface!]!
  scoring_completed: Decimal!
  get_next_stage: StageInterface!
  get_previous_stage: StageInterface!
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode!
  number: Int!

  """name/title of stage (not number), max 35 char"""
  name: String!

  """place/location textual description, max 64 char"""
  venue: String!
  image: DjangoImageType
  banner: DjangoImageType

  """300 char"""
  banner_url: String!

  """1000 char"""
  procedure: String!

  """1000 char"""
  start_pos: String!

  """500 char"""
  firearm_condition: String!

  """200 char"""
  start_on: String!

  """200 char"""
  stop_on: String!

  """500 char"""
  penalties_notes: String!

  """200 char"""
  safety_angles: String!

  """1000 char"""
  setup_notes: String!

  """Sort of stage, 4 char"""
  sort: String!

  """included in event results or not"""
  included: Boolean!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!

  """
  summary of scoring progress, returns a comma separated string of ints for a five-tuple; <verified, unverified, scored, unscored, total_to_score>. This excludes any DQed competitors
  """
  scoring_progress: ScoringProgressNode!

  """
  summary of scoring progress, returns a list of two-tuples with <squad, scoring-progress> where scoring progress is comma separated string of ints for a five-tuple; <verified, unverified, scored, unscored, total_to_score>. This excludes any DQed competitors
  """
  squad_scoring_progress: [SquadScoringProgressNode!]!
  competitors_indexed(
    """
    all/no/yes as in all comps, no those without squad, yes those with squad
    """
    sqs: String! = "yes"
    shift_on: Int! = 1
    incl_dnf: Boolean! = false
    incl_dqed: Boolean! = false
  ): [CompetitorInterface!]!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_scorecard: ScoreCardInterface!
  get_scoring_display: String!
  get_firearm_display: String!
  scoring: String!
  firearm: String!
  string: Int!
  count: Int!
  stop_plate: Int!
  sound_correction: Decimal!
  standard: DjangoModelType
  plates: Int!

  """NSSF optional plates"""
  option_plate_1: Decimal!

  """NSSF optional plates"""
  option_plate_2: Decimal!

  """NSSF optional plates"""
  option_plate_3: Decimal!

  """NSSF optional plates"""
  option_plate_4: Decimal!
  stop_plate_index: Int!

  """ISSA - can have 1..n hits required per target"""
  hits_plate_1: Int!

  """ISSA - can have 1..n hits required per target"""
  hits_plate_2: Int!

  """ISSA - can have 1..n hits required per target"""
  hits_plate_3: Int!

  """ISSA - can have 1..n hits required per target"""
  hits_plate_4: Int!

  """ISSA - can have 1..n hits required per target"""
  hits_plate_5: Int!

  """ISSA - can have 1..n hits required per target"""
  hits_plate_6: Int!

  """ISSA - can have 1..n hits required per target"""
  hits_plate_7: Int!

  """ISSA - can have 1..n hits required per target"""
  hits_plate_8: Int!

  """ISSA - can have 1..n hits required per target"""
  hits_plate_9: Int!

  """ISSA - can have 1..n hits required per target"""
  hits_plate_10: Int!

  """returns results as ordered of results for stage is allowed to view"""
  get_results(division: String = null): [SteelStageResultNode!]!

  """returns all DQs for stage"""
  get_disqualified(division: String = null): [SteelScoreCardNode!]!
  get_scoring_choices: [ChoiceNode!]!
  get_firearm_choices: [ChoiceNode!]!
}

"""Scorecard, place, percentage, points"""
type SteelStageResultNode {
  scorecard: SteelScoreCardNode
  place: Int
  time: Float
  average_time: Float
}

"""SteelScoreCard used for SteelChallenge"""
type SteelScoreCardNode implements ScoreCardInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!

  """returns full scoring history Versions"""
  get_scoring_history: [VersionNode!]!
  is_verified: Boolean!

  """has signature/image been used to signing (else PIN code used)"""
  is_verified_w_signature: Boolean!
  is_locked: Boolean!

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime

  """ISO-8601 formatted"""
  verified: DateTime

  """Supports scoring analytics on stage/scoring-rule"""
  supports_scoring_analytics: Boolean!

  """
  List of human-readable strings with scoring analytics info (help to improve)
  """
  get_scoring_analytics: [String!]!
  verified_by: ShooterNode!
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode!

  """Got DQ'ed"""
  disqualified: Boolean!
  signature: DjangoImageType

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!
  stage: SteelStageNode!
  competitor: SteelCompetitorNode!
  total_time: Decimal!
  average_time: Decimal!
  scoring_completed: Decimal!
  div_place: Int!
  combined_place: Int!
  total_miss: Int!
  total_penalties: Int!

  """
  a comma separated string with; time in sec | penalty + corr time in sec | total score | misses | penalties | 30sec-max-penalties (nssf) | optional-target-1-deduction (nssf)> | optional-target-2-deduction (nssf)> | optional-target-3-deduction (nssf)> | optional-target-4-deduction (nssf)
  """
  s1: String!

  """
  a comma separated string with; time in sec | penalty + corr time in sec | total score | misses | penalties | 30sec-max-penalties (nssf) | optional-target-1-deduction (nssf)> | optional-target-2-deduction (nssf)> | optional-target-3-deduction (nssf)> | optional-target-4-deduction (nssf)
  """
  s2: String!

  """
  a comma separated string with; time in sec | penalty + corr time in sec | total score | misses | penalties | 30sec-max-penalties (nssf) | optional-target-1-deduction (nssf)> | optional-target-2-deduction (nssf)> | optional-target-3-deduction (nssf)> | optional-target-4-deduction (nssf)
  """
  s3: String!

  """
  a comma separated string with; time in sec | penalty + corr time in sec | total score | misses | penalties | 30sec-max-penalties (nssf) | optional-target-1-deduction (nssf)> | optional-target-2-deduction (nssf)> | optional-target-3-deduction (nssf)> | optional-target-4-deduction (nssf)
  """
  s4: String!

  """
  a comma separated string with; time in sec | penalty + corr time in sec | total score | misses | penalties | 30sec-max-penalties (nssf) | optional-target-1-deduction (nssf)> | optional-target-2-deduction (nssf)> | optional-target-3-deduction (nssf)> | optional-target-4-deduction (nssf)
  """
  s5: String!

  """
  a comma separated string with; time in sec | penalty + corr time in sec | total score | misses | penalties | 30sec-max-penalties (nssf) | optional-target-1-deduction (nssf)> | optional-target-2-deduction (nssf)> | optional-target-3-deduction (nssf)> | optional-target-4-deduction (nssf)
  """
  s6: String!

  """
  a comma separated string with; time in sec | penalty + corr time in sec | total score | misses | penalties | 30sec-max-penalties (nssf) | optional-target-1-deduction (nssf)> | optional-target-2-deduction (nssf)> | optional-target-3-deduction (nssf)> | optional-target-4-deduction (nssf)
  """
  s7: String!

  """
  a comma separated string with; time in sec | penalty + corr time in sec | total score | misses | penalties | 30sec-max-penalties (nssf) | optional-target-1-deduction (nssf)> | optional-target-2-deduction (nssf)> | optional-target-3-deduction (nssf)> | optional-target-4-deduction (nssf)
  """
  s8: String!
  get_dq_reason_display: String!
  dq_reason: String!
  comment: String!
  get_dq_reason_choices: [ChoiceNode!]!
}

"""Steel Competitor (used in Steel Challenge)"""
type SteelCompetitorNode implements CompetitorInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!

  """
  Returns true if all orders are paid *or* if self._paid = True (if there are no orders)
  """
  is_paid: Boolean!
  is_alread_logged: Boolean!
  is_locked: Boolean!

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime
  details: String!
  scorecards: [ScoreCardInterface!]!
  shooter: ShooterNode!
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode!
  get_club_display: String!
  get_club_short_display: String!
  get_sex_display: String!
  get_region_display: String!
  get_state_display: String!
  get_status_display: String!
  get_code_display: String!

  """max 30 char"""
  first_name: String!

  """max 30 char"""
  last_name: String!

  """value, 1 char"""
  sex: String!

  """max 300 char"""
  email: String!

  """ISO3166A3, 3 char. --- if no region or none"""
  region: String!

  """US state, 3 char"""
  state: String!

  """free text name of club, inferior to club_member if this is set"""
  club: String!

  """is for a club-member, can be used then to access club"""
  club_member: DjangoModelType

  """0 or blank means no number yet set, can take 5 min from registration"""
  number: Int!

  """registraion status, 1 char"""
  status: String!
  code: String!
  comment: String!

  """is competitor in prematch, default is False"""
  prematch: Boolean!

  """license number, 30 char"""
  license: String!
  notify: Boolean!

  """
  used to express if they did not show or stopped/left and this removed from scoring/results
  """
  did_not_finish: Boolean!
  has_accepted_event_data_policy: Boolean!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!

  """
  returns scoring version history iff not stages used in sport (i.e. scores stored directly per competitor)
  """
  scoring_history: [VersionNode!]!

  """
  assumes event uses stages & returns a comma separated string of ints for a five-tuple; <verified, unverified, scored, unscored, total_to_score>
  """
  scoring_progress: ScoringProgressNode!
  payments: [PaymentInterface!]!
  merchandize_orders: [MerchandizeOrderNode!]!

  """
  can current user update instance (e.g. are you allowed to update on yourself, or are you organizer)
  """
  can_current_update: Boolean!

  """
  ICE phone on format +CC-XXXXXXXXXX with leading country code dash phone number
  """
  ice_phone: String!

  """
  phone on format +CC-XXXXXXXXXX with leading country code dash phone number
  """
  phone: String!

  """
  returns result in visible format, if allowed to see for user making request
  """
  get_result_display: String!

  """country calling codes tuples"""
  get_cc_calling_choices: [ChoiceNode!]!
  get_sex_choices: [ChoiceNode!]!
  get_region_choices: [ChoiceNode!]!
  get_state_choices: [ChoiceNode!]!

  """returns list of id's to club-members is any that can compete for"""
  get_club_member_choices: [ChoiceNode!]!

  """returns list if admin/staff"""
  get_status_choices: [ChoiceNode!]!

  """returns list if admin/staff"""
  get_code_choices: [ChoiceNode!]!

  """
  returns list of avilable squads to choose from (if admin or approved competitor)
  """
  get_squad_choices: [ChoiceNode!]!

  """
  returns PIN code for self or if admin or staff of event (allows for off-line valuation if pin set)
  """
  pin: String!
  sum_total_time: Decimal!
  sum_average_time: Decimal!
  div_place: Int!
  combined_place: Int!
  tot_miss: Int!
  tot_penalties: Int!
  tot_raw_time: Decimal!
  event: SteelMatchNode!
  squad: SteelSquadNode
  get_division_display: String!
  get_categories_display: String!
  get_division_choices: [ChoiceNode!]!
  get_categories_choices: [ChoiceNode!]!
  division: String!
  categories: String!
}

"""
SteelStandardStage(id, rule, name, active, created, image, procedure, start_pos, firearm_condition, start_on, stop_on, penalties_notes, setup_notes, scoring, string, count, stop_plate, sound_correction, plates)
"""
type SteelStandardStageNode implements StandardStageInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!

  """ISO-8601 formatted"""
  created: DateTime!

  """rule/scoring, 2 char"""
  rule: String!

  """max 35 char"""
  name: String!
  active: Boolean!
  image: DjangoImageType

  """1000 char"""
  procedure: String!

  """1000 char"""
  start_pos: String!

  """500 char"""
  firearm_condition: String!

  """200 char"""
  start_on: String!

  """200 char"""
  stop_on: String!

  """500 char"""
  penalties_notes: String!

  """1000 char"""
  setup_notes: String!
  get_scoring_display: String!
  get_firearm_display: String!
  scoring: String!
  string: Int!
  count: Int!
  stop_plate: Int!
  sound_correction: Decimal!
  plates: Int!
  get_scoring_choices: [ChoiceNode!]!
  get_firearm_choices: [ChoiceNode!]!
}

"""
IdpaStage(id, number, name, venue, image, banner, banner_url, procedure, start_pos, firearm_condition, start_on, stop_on, penalties_notes, safety_angles, setup_notes, sort, included, _locked, created_by, created, updated_by, updated, lock_changed_by, lock_changed, event, scoring, firearms, paper, popper, plate, frangible, penalty, max_x_hits, strings, minimum_rounds, standard, _scoring_completed)
"""
type IdpaStageNode implements StageInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!
  is_locked: Boolean!

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime
  scorecards: [ScoreCardInterface!]!

  """list of scorecards that are DQ'ed on stage"""
  scorecards_dq: [ScoreCardInterface!]!

  """list of scorecards with a warning on stage"""
  scorecards_w_warning: [ScoreCardInterface!]!
  scoring_completed: Decimal!
  get_next_stage: StageInterface!
  get_previous_stage: StageInterface!
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode!
  number: Int!

  """name/title of stage (not number), max 35 char"""
  name: String!

  """place/location textual description, max 64 char"""
  venue: String!
  image: DjangoImageType
  banner: DjangoImageType

  """300 char"""
  banner_url: String!

  """1000 char"""
  procedure: String!

  """1000 char"""
  start_pos: String!

  """500 char"""
  firearm_condition: String!

  """200 char"""
  start_on: String!

  """200 char"""
  stop_on: String!

  """500 char"""
  penalties_notes: String!

  """200 char"""
  safety_angles: String!

  """1000 char"""
  setup_notes: String!

  """Sort of stage, 4 char"""
  sort: String!

  """included in event results or not"""
  included: Boolean!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!

  """
  summary of scoring progress, returns a comma separated string of ints for a five-tuple; <verified, unverified, scored, unscored, total_to_score>. This excludes any DQed competitors
  """
  scoring_progress: ScoringProgressNode!

  """
  summary of scoring progress, returns a list of two-tuples with <squad, scoring-progress> where scoring progress is comma separated string of ints for a five-tuple; <verified, unverified, scored, unscored, total_to_score>. This excludes any DQed competitors
  """
  squad_scoring_progress: [SquadScoringProgressNode!]!
  competitors_indexed(
    """
    all/no/yes as in all comps, no those without squad, yes those with squad
    """
    sqs: String! = "yes"
    shift_on: Int! = 1
    incl_dnf: Boolean! = false
    incl_dqed: Boolean! = false
  ): [CompetitorInterface!]!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_scorecard: ScoreCardInterface!
  get_scoring_display: String!
  get_firearms_display: String!
  scoring: String!
  firearms: String!
  paper: Int!
  popper: Int!
  plate: Int!
  frangible: Int!
  penalty: Int!
  max_x_hits: Int!
  strings: Int!
  minimum_rounds: Int!
  standard: DjangoModelType

  """
  returns results as ordered list of scorecard for stage is allowed to view
  """
  get_results(division: String = null, category: String = null, combined: String = null): [IdpaStageResultNode!]!

  """returns all DQs for stage"""
  get_disqualified(division: String = null, category: String = null): [IdpaScoreCardNode!]!
  get_scoring_choices: [ChoiceNode!]!
  get_firearms_choices: [ChoiceNode!]!
}

"""Scorecard, place, percentage, points"""
type IdpaStageResultNode {
  scorecard: IdpaScoreCardNode
  place: Int
}

"""IdpaScoreCard used for IDPA, SADPA and iCore"""
type IdpaScoreCardNode implements ScoreCardInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!

  """returns full scoring history Versions"""
  get_scoring_history: [VersionNode!]!
  is_verified: Boolean!

  """has signature/image been used to signing (else PIN code used)"""
  is_verified_w_signature: Boolean!
  is_locked: Boolean!

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime

  """ISO-8601 formatted"""
  verified: DateTime

  """Supports scoring analytics on stage/scoring-rule"""
  supports_scoring_analytics: Boolean!

  """
  List of human-readable strings with scoring analytics info (help to improve)
  """
  get_scoring_analytics: [String!]!
  verified_by: ShooterNode!
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode!

  """Got DQ'ed"""
  disqualified: Boolean!
  signature: DjangoImageType

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!
  stage: IdpaStageNode!
  competitor: IdpaCompetitorNode!
  raw_time: Decimal!

  """this is the extra time added due to points down and penalties"""
  incurred_time: Decimal!
  get_dq_reason_display: String!
  points_down: Int!
  procedural: Int!
  flagrant: Int!
  hnt: Int!
  ftn: Int!
  ftdr: Int!

  """for ICORE only"""
  a_hits: Int!

  """for ICORE only"""
  b_hits: Int!

  """for ICORE only"""
  c_hits: Int!

  """for ICORE only"""
  x_hits: Int!
  miss: Int!
  no_shoot: Int!
  premature: Int!
  foot_fault: Int!
  fte: Int!
  proc: Int!
  extra_hit: Int!
  extra_shot: Int!
  overtime_shot: Int!
  fthsp: Int!
  s1: Decimal!
  s2: Decimal!
  s3: Decimal!
  s4: Decimal!
  s5: Decimal!
  s6: Decimal!
  s7: Decimal!
  s8: Decimal!
  s9: Decimal!
  s10: Decimal!
  s11: Decimal!
  s12: Decimal!
  score: Decimal!

  """DNF IDPA, used as Failure to Finish Stage in SADPA"""
  dnf: Boolean!

  """ DNFM new in 2013 rule IDPA, used as Failure to Fininsh Match in SADPA also
  """
  dnfm: Boolean!
  dq_reason: String!
  comment: String!
  get_dq_reason_choices: [ChoiceNode!]!
}

"""Idpa Competitor (used in ISPA, SADPA and iCore)"""
type IdpaCompetitorNode implements CompetitorInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!

  """
  Returns true if all orders are paid *or* if self._paid = True (if there are no orders)
  """
  is_paid: Boolean!
  is_alread_logged: Boolean!
  is_locked: Boolean!

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime
  details: String!
  scorecards: [ScoreCardInterface!]!
  shooter: ShooterNode!
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode!
  get_club_display: String!
  get_club_short_display: String!
  get_sex_display: String!
  get_region_display: String!
  get_state_display: String!
  get_status_display: String!
  get_code_display: String!

  """max 30 char"""
  first_name: String!

  """max 30 char"""
  last_name: String!

  """value, 1 char"""
  sex: String!

  """max 300 char"""
  email: String!

  """ISO3166A3, 3 char. --- if no region or none"""
  region: String!

  """US state, 3 char"""
  state: String!

  """free text name of club, inferior to club_member if this is set"""
  club: String!

  """is for a club-member, can be used then to access club"""
  club_member: DjangoModelType

  """0 or blank means no number yet set, can take 5 min from registration"""
  number: Int!

  """registraion status, 1 char"""
  status: String!
  code: String!
  comment: String!

  """is competitor in prematch, default is False"""
  prematch: Boolean!

  """license number, 30 char"""
  license: String!
  notify: Boolean!

  """
  used to express if they did not show or stopped/left and this removed from scoring/results
  """
  did_not_finish: Boolean!
  has_accepted_event_data_policy: Boolean!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!

  """
  returns scoring version history iff not stages used in sport (i.e. scores stored directly per competitor)
  """
  scoring_history: [VersionNode!]!

  """
  assumes event uses stages & returns a comma separated string of ints for a five-tuple; <verified, unverified, scored, unscored, total_to_score>
  """
  scoring_progress: ScoringProgressNode!
  payments: [PaymentInterface!]!
  merchandize_orders: [MerchandizeOrderNode!]!

  """
  can current user update instance (e.g. are you allowed to update on yourself, or are you organizer)
  """
  can_current_update: Boolean!

  """
  ICE phone on format +CC-XXXXXXXXXX with leading country code dash phone number
  """
  ice_phone: String!

  """
  phone on format +CC-XXXXXXXXXX with leading country code dash phone number
  """
  phone: String!

  """
  returns result in visible format, if allowed to see for user making request
  """
  get_result_display: String!

  """country calling codes tuples"""
  get_cc_calling_choices: [ChoiceNode!]!
  get_sex_choices: [ChoiceNode!]!
  get_region_choices: [ChoiceNode!]!
  get_state_choices: [ChoiceNode!]!

  """returns list of id's to club-members is any that can compete for"""
  get_club_member_choices: [ChoiceNode!]!

  """returns list if admin/staff"""
  get_status_choices: [ChoiceNode!]!

  """returns list if admin/staff"""
  get_code_choices: [ChoiceNode!]!

  """
  returns list of avilable squads to choose from (if admin or approved competitor)
  """
  get_squad_choices: [ChoiceNode!]!

  """
  returns PIN code for self or if admin or staff of event (allows for off-line valuation if pin set)
  """
  pin: String!
  score: Int!
  div_place: Int!
  tot_points_down: Int!
  tot_procedural: Int!
  tot_flagrant: Int!
  tot_hnt: Int!
  tot_ftn: Int!
  tot_ftdr: Int!
  tot_raw_time: Decimal!
  event: IdpaMatchNode!
  squad: IdpaSquadNode
  get_handgun_div_display: String!
  get_rifle_div_display: String!
  get_shotgun_div_display: String!
  get_dmg_div_display: String!
  get_category_display: String!
  get_classification_display: String!
  handgun_div: String!
  rifle_div: String!
  shotgun_div: String!
  dmg_div: String!
  category: String!
  classification: String!
  idpa_num: String!
  sadpa_num: String!
  icore_num: String!
  get_handgun_div_choices: [ChoiceNode!]!
  get_rifle_div_choices: [ChoiceNode!]!
  get_shotgun_div_choices: [ChoiceNode!]!
  get_dmg_div_choices: [ChoiceNode!]!
  get_category_choices: [ChoiceNode!]!
  get_classification_choices: [ChoiceNode!]!
}

"""PpcMatch is used for PPC matches"""
type PpcMatchNode implements EventInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!
  is_locked: Boolean!
  supports_rating: Boolean!
  is_rated: Boolean!

  """ISO-8601 formatted, when/if has been elo-rated"""
  rated: DateTime

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime

  """competitors that did not show/complete/finnish the event"""
  competitors_did_not_finish: [CompetitorInterface!]!
  competitors_approved_w_wo_results_wo_squad_not_dnf: [CompetitorInterface!]!
  competitors_approved_w_wo_results_not_dnf: [CompetitorInterface!]!

  """
  list of scorecards that are DQ'ed (if event used stages, else use competitors_dq)
  """
  scorecards_dq: [ScoreCardInterface!]!

  """
  list of competitors that are DQ'ed (if stages used, check scorecard for reason of DQ)
  """
  competitors_dq: [CompetitorInterface!]!

  """
  list of scorecards with warning (if event used stages, else use competitors_w_warning)
  """
  scorecards_w_warning: [ScoreCardInterface!]!

  """
  list of competitors a warning (if stages used, check scorecards for reason of warning)
  """
  competitors_w_warning: [CompetitorInterface!]!

  """ISO-8601 formatted"""
  starts: DateTime!

  """ISO-8601 formatted"""
  ends: DateTime

  """ISO-8601 formatted"""
  registration_starts: DateTime!

  """ISO-8601 formatted"""
  registration_closes: DateTime

  """ISO-8601 formatted"""
  squadding_starts: DateTime

  """ISO-8601 formatted"""
  pm_squadding_starts: DateTime

  """ISO-8601 formatted"""
  squadding_closes: DateTime
  short_url: String!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!
  minimum_rounds: Int!
  is_tournament_match: Boolean!
  is_component_match: Boolean!

  """
  Registration is only possible if registration date has started and not closed and the registration is open.
  Use this check to present if registration for a shooter shall be possible or not.
  """
  is_registration_possible: Boolean!
  is_squadding_possible: Boolean!
  is_pm_squadding_possible: Boolean!
  supports_bulk_scoring: Boolean!
  uses_stages: Boolean!
  uses_shoot_off_stages: Boolean!
  uses_strings: Boolean!
  number_of_strings: Boolean!
  number_of_rounds_per_string: Int!
  supports_shoot_off_strings: Boolean!
  do_index_competitor_when_scoring: Boolean!
  supports_standard_stages: Boolean!
  supports_score_string_for_squad: Boolean!
  supports_score_all_in_squad_at_stage: Boolean!
  is_premium_activated: Boolean!

  """returns list of RBAC roles for current user"""
  role_names: [String!]!

  """
  Returns True if the premium for event is fully paid or if 
  event is associated with a premium-org that has enable free-premium and small,
  not to many non-members and and fee not to high
  
  ** OR ** 
  
  the event has previoously been set to completed (under old premium valid things
  so we do not make them pay for old events)
  """
  is_premium_fully_valid: Boolean!
  has_geopos: Boolean!
  has_prematch: Boolean!

  """is prematch score included in overall results"""
  has_prematch_included: Boolean!
  uses_pin_verification: Boolean!
  uses_signature_verification: Boolean!
  scoring_completed: Decimal!

  """
  obfuscated id used when registering, only shown when reg possible or staff/admin of event to avoid bot-registrations
  """
  obfuscated_id: String!
  get_standard_stage_selection: [StandardStageInterface!]!
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode
  get_full_rule_display: String!
  get_full_level_display: String!
  get_prematch_display: String!
  get_status_display: String!
  get_registration_display: String!
  get_results_display: String!
  get_verify_using_display: String!
  get_region_display: String!
  get_currency_display: String!
  get_visibility_display: String!
  get_state_display: String!
  does_current_user_get_result: Boolean!
  number_of_prematch_competitors_registered: Int!
  number_of_prematch_competitors_waiting: Int!
  number_of_prematch_competitors_pending: Int!
  number_of_prematch_competitors_approved: Int!
  number_of_mainmatch_competitors_registered: Int!
  number_of_mainmatch_competitors_waiting: Int!
  number_of_mainmatch_competitors_pending: Int!
  number_of_mainmatch_competitors_approved: Int!
  competitors_unscored_list: [CompetitorInterface!]!
  prematch_competitors_registered: [CompetitorInterface!]!
  prematch_competitors: [CompetitorInterface!]!
  prematch_competitors_pending: [CompetitorInterface!]!
  prematch_competitors_approved: [CompetitorInterface!]!
  prematch_competitors_approved_wo_results: [CompetitorInterface!]!
  prematch_competitors_approved_w_wo_results: [CompetitorInterface!]!
  prematch_competitors_approved_w_wo_results_wo_squad: [CompetitorInterface!]!
  prematch_competitors_waiting: [CompetitorInterface!]!
  prematch_competitors_declined: [CompetitorInterface!]!
  prematch_competitors_deleted: [CompetitorInterface!]!
  mainmatch_competitors_registered: [CompetitorInterface!]!
  mainmatch_competitors: [CompetitorInterface!]!
  mainmatch_competitors_pending: [CompetitorInterface!]!
  mainmatch_competitors_approved: [CompetitorInterface!]!
  mainmatch_competitors_approved_wo_results: [CompetitorInterface!]!
  mainmatch_competitors_approved_w_wo_results: [CompetitorInterface!]!
  mainmatch_competitors_approved_w_wo_results_wo_squad: [CompetitorInterface!]!
  mainmatch_competitors_waiting: [CompetitorInterface!]!
  mainmatch_competitors_declined: [CompetitorInterface!]!
  mainmatch_competitors_deleted: [CompetitorInterface!]!
  group: DjangoModelType!
  organizer: OrganizationNode!
  accreditor: DjangoModelType
  accreditation_status: String!

  """name, max 50"""
  name: String!

  """max 600 char"""
  description: String!

  """max 800 char"""
  information: String!

  """max competitors in match or main match"""
  max_competitors: Int!

  """do we have a prematch, and is scoring included, 2 char"""
  prematch: String!

  """max competitors in pre-match, if used"""
  max_prematch_competitors: Int!

  """does event support teams"""
  allow_teams: Boolean!
  allows_spotter_shooter_teams: Boolean!

  """allow teams to edit and change members themself"""
  allow_team_self_management: Boolean!

  """team members in a team"""
  number_of_team_members: Int!

  """number of best scores used for team result"""
  result_from_team_members: Int!

  """max 2 char, status of even"""
  status: String!

  """status of registration, 2 char"""
  registration: String!

  """visibility of results, 2 char"""
  results: String!

  """verification method, 3 char"""
  verify_using: String!

  """
  defines family of sport (but you need rule+subrule and sometimes firearm to decide explicit sport), e.g. ipsc-famliy is IPSC, USPSA, SRA etc and sub-rule separates these
  """
  rule: String!

  """region, ISO31663A3, 3 char"""
  region: String!

  """currency, ISO4217, 3 char"""
  currency: String!

  """relevant url for event, max 300 char"""
  url: String!

  """display or link textfor url, max 20 char"""
  url_display: String!
  gcal_uid: String!

  """can a user register more then once or not"""
  multiple_reg_allowed: Boolean!

  """visibility of event, 3 char"""
  visibility: String!

  """US Stage choices, 3 char max"""
  state: String!

  """place/location textual description, max 64 char"""
  venue: String!

  """format as 5,5 decimal"""
  lat: Decimal

  """format as 5,5 decimal"""
  lng: Decimal
  image: DjangoImageType
  banner: DjangoImageType
  banner_url: String!
  f1: DjangoFileType
  f2: DjangoFileType
  f3: DjangoFileType
  f4: DjangoFileType
  f5: DjangoFileType
  f6: DjangoFileType
  f1_display: String!
  f2_display: String!
  f3_display: String!
  f4_display: String!
  f5_display: String!
  f6_display: String!
  has_accepted_event_data_ass_agreement: Boolean!

  """
  Event has enabled free Premium, requires that Organization associated with event allows for this (free within limits)
  """
  organization_enabled_event_premium: Boolean!
  comment: String!
  competitor_payment: String!
  total_net: Decimal!
  total_tax: Decimal!
  total_fee: Decimal!
  premium_currency: String!
  payment_methods: String!

  """for 3rd party apps, never used within SSI or accessed, max 500 char"""
  custom_api: String!
  competitors: [CompetitorInterface!]!

  """competitors indexed typically on stage-number shooting on"""
  competitors_indexed(
    """
    all/no/yes as in all comps, no those without squad, yes those with squad
    """
    sqs: String!
    shift_on: Int! = 1
    incl_dnf: Boolean! = false
    incl_dqed: Boolean! = false
  ): [CompetitorInterface!]!

  """
  list of possible deviating scores as a tuple <scorecard, alert-text message>
  """
  deviating_scorecards: [DeviatingScoreCardNode!]!

  """
  list of possible deviating competitors as a tuple <scorecard, alert-text message> (only for non-stage events)
  """
  deviating_competitors: [DeviatingCompetitorNode!]!

  """available standard-stages for sport, to be cloned if to be used"""
  available_standard_stages: [StandardStageInterface!]!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_competitor: CompetitorInterface!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_stage: StageInterface!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_team: TeamInterface!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_squad: SquadInterface!
  is_current_role_admin: Boolean!
  is_current_role_staff: Boolean!
  is_current_role_assistant: Boolean!

  """returns all event order payments (typically by competitors)"""
  order_payments: [PaymentInterface!]!

  """returns all event premium payments (for premium features of even)"""
  premium_payments: [PaymentInterface!]!
  merchandizes: [MerchandizeNode!]!
  merchandizes_on_registration: [MerchandizeNode!]!
  merchandize_orders: [MerchandizeOrderNode!]!
  component_matches: [ComponentMatchInterface!]!
  serie_type: String!
  get_prematch_choices: [ChoiceNode!]!
  get_status_choices: [ChoiceNode!]!
  get_registration_choices: [ChoiceNode!]!
  get_results_choices: [ChoiceNode!]!
  get_verify_using_choices: [ChoiceNode!]!
  get_region_choices: [ChoiceNode!]!
  get_currency_choices: [ChoiceNode!]!
  get_visibility_choices: [ChoiceNode!]!
  get_state_choices: [ChoiceNode!]!

  """returns list with id to organizations as values and name as display"""
  get_organizer_choices: [ChoiceNode!]!
  firearms: String!
  sub_rule: String!

  """stages in event"""
  stages: [StageInterface!]!
  squads: [SquadInterface!]!
  teams: [TeamInterface!]
  get_sub_rule_display: String!
  get_weapon_classes_display: String!
  weapon_classes: String!

  """
  Returns a list of sorted Competitors in result ordering. Only if allowed to see  results
  """
  get_results(weapon_class: String = null, classification: String = null): [PpcMatchResultNode!]!

  """Returns a list with Competitors that are disqualified in event"""
  get_disqualified(weapon_class: String = null, classification: String = null): [PpcCompetitorNode!]!
  get_sub_rule_choices: [ChoiceNode!]!
  get_weapon_classes_choices: [ChoiceNode!]!
}

"""competitor & total score (sum of times)"""
type PpcMatchResultNode {
  competitor: PpcCompetitorNode
  place: Int
}

"""Ppc Competitor (used in PPC)"""
type PpcCompetitorNode implements CompetitorInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!

  """
  Returns true if all orders are paid *or* if self._paid = True (if there are no orders)
  """
  is_paid: Boolean!
  is_alread_logged: Boolean!
  is_locked: Boolean!

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime
  details: String!
  scorecards: [ScoreCardInterface!]!
  shooter: ShooterNode!
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode!
  get_club_display: String!
  get_club_short_display: String!
  get_sex_display: String!
  get_region_display: String!
  get_state_display: String!
  get_status_display: String!
  get_code_display: String!

  """max 30 char"""
  first_name: String!

  """max 30 char"""
  last_name: String!

  """value, 1 char"""
  sex: String!

  """max 300 char"""
  email: String!

  """ISO3166A3, 3 char. --- if no region or none"""
  region: String!

  """US state, 3 char"""
  state: String!

  """free text name of club, inferior to club_member if this is set"""
  club: String!

  """is for a club-member, can be used then to access club"""
  club_member: DjangoModelType

  """0 or blank means no number yet set, can take 5 min from registration"""
  number: Int!

  """registraion status, 1 char"""
  status: String!
  code: String!
  comment: String!

  """is competitor in prematch, default is False"""
  prematch: Boolean!

  """license number, 30 char"""
  license: String!
  notify: Boolean!

  """
  used to express if they did not show or stopped/left and this removed from scoring/results
  """
  did_not_finish: Boolean!
  has_accepted_event_data_policy: Boolean!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!

  """
  returns scoring version history iff not stages used in sport (i.e. scores stored directly per competitor)
  """
  scoring_history: [VersionNode!]!

  """
  assumes event uses stages & returns a comma separated string of ints for a five-tuple; <verified, unverified, scored, unscored, total_to_score>
  """
  scoring_progress: ScoringProgressNode!
  payments: [PaymentInterface!]!
  merchandize_orders: [MerchandizeOrderNode!]!

  """
  can current user update instance (e.g. are you allowed to update on yourself, or are you organizer)
  """
  can_current_update: Boolean!

  """
  ICE phone on format +CC-XXXXXXXXXX with leading country code dash phone number
  """
  ice_phone: String!

  """
  phone on format +CC-XXXXXXXXXX with leading country code dash phone number
  """
  phone: String!

  """
  returns result in visible format, if allowed to see for user making request
  """
  get_result_display: String!

  """country calling codes tuples"""
  get_cc_calling_choices: [ChoiceNode!]!
  get_sex_choices: [ChoiceNode!]!
  get_region_choices: [ChoiceNode!]!
  get_state_choices: [ChoiceNode!]!

  """returns list of id's to club-members is any that can compete for"""
  get_club_member_choices: [ChoiceNode!]!

  """returns list if admin/staff"""
  get_status_choices: [ChoiceNode!]!

  """returns list if admin/staff"""
  get_code_choices: [ChoiceNode!]!

  """
  returns list of avilable squads to choose from (if admin or approved competitor)
  """
  get_squad_choices: [ChoiceNode!]!

  """
  returns PIN code for self or if admin or staff of event (allows for off-line valuation if pin set)
  """
  pin: String!
  get_weapon_class_display: String!
  get_classification_display: String!
  get_dq_reason_display: String!
  verified_by: DjangoModelType

  """ISO-8601 formatted"""
  verified: DateTime
  is_verified: Boolean!

  """has signature/image been used to signing (else PIN code used)"""
  is_verified_w_signature: Boolean!
  event: PpcMatchNode!
  squad: PpcSquadNode
  weapon_class: String!
  classification: String!
  waid: String!
  s1: String!
  s2: String!
  s3: String!
  s4: String!
  s5: String!
  s6: String!
  signature: DjangoImageType
  dq_reason: String!
  score_comment: String!
  weapon_class_choices: [ChoiceNode!]!
  classification_choices: [ChoiceNode!]!
  dq_reason_choices: [ChoiceNode!]!
}

"""CmpMatch is used for CMP matches"""
type CmpMatchNode implements EventInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!
  is_locked: Boolean!
  supports_rating: Boolean!
  is_rated: Boolean!

  """ISO-8601 formatted, when/if has been elo-rated"""
  rated: DateTime

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime

  """competitors that did not show/complete/finnish the event"""
  competitors_did_not_finish: [CompetitorInterface!]!
  competitors_approved_w_wo_results_wo_squad_not_dnf: [CompetitorInterface!]!
  competitors_approved_w_wo_results_not_dnf: [CompetitorInterface!]!

  """
  list of scorecards that are DQ'ed (if event used stages, else use competitors_dq)
  """
  scorecards_dq: [ScoreCardInterface!]!

  """
  list of competitors that are DQ'ed (if stages used, check scorecard for reason of DQ)
  """
  competitors_dq: [CompetitorInterface!]!

  """
  list of scorecards with warning (if event used stages, else use competitors_w_warning)
  """
  scorecards_w_warning: [ScoreCardInterface!]!

  """
  list of competitors a warning (if stages used, check scorecards for reason of warning)
  """
  competitors_w_warning: [CompetitorInterface!]!

  """ISO-8601 formatted"""
  starts: DateTime!

  """ISO-8601 formatted"""
  ends: DateTime

  """ISO-8601 formatted"""
  registration_starts: DateTime!

  """ISO-8601 formatted"""
  registration_closes: DateTime

  """ISO-8601 formatted"""
  squadding_starts: DateTime

  """ISO-8601 formatted"""
  pm_squadding_starts: DateTime

  """ISO-8601 formatted"""
  squadding_closes: DateTime
  short_url: String!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!
  minimum_rounds: Int!
  is_tournament_match: Boolean!
  is_component_match: Boolean!

  """
  Registration is only possible if registration date has started and not closed and the registration is open.
  Use this check to present if registration for a shooter shall be possible or not.
  """
  is_registration_possible: Boolean!
  is_squadding_possible: Boolean!
  is_pm_squadding_possible: Boolean!
  supports_bulk_scoring: Boolean!
  uses_stages: Boolean!
  uses_shoot_off_stages: Boolean!
  uses_strings: Boolean!
  number_of_strings: Boolean!
  number_of_rounds_per_string: Int!
  supports_shoot_off_strings: Boolean!
  do_index_competitor_when_scoring: Boolean!
  supports_standard_stages: Boolean!
  supports_score_string_for_squad: Boolean!
  supports_score_all_in_squad_at_stage: Boolean!
  is_premium_activated: Boolean!

  """returns list of RBAC roles for current user"""
  role_names: [String!]!

  """
  Returns True if the premium for event is fully paid or if 
  event is associated with a premium-org that has enable free-premium and small,
  not to many non-members and and fee not to high
  
  ** OR ** 
  
  the event has previoously been set to completed (under old premium valid things
  so we do not make them pay for old events)
  """
  is_premium_fully_valid: Boolean!
  has_geopos: Boolean!
  has_prematch: Boolean!

  """is prematch score included in overall results"""
  has_prematch_included: Boolean!
  uses_pin_verification: Boolean!
  uses_signature_verification: Boolean!
  scoring_completed: Decimal!

  """
  obfuscated id used when registering, only shown when reg possible or staff/admin of event to avoid bot-registrations
  """
  obfuscated_id: String!
  get_standard_stage_selection: [StandardStageInterface!]!
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode
  get_full_rule_display: String!
  get_full_level_display: String!
  get_prematch_display: String!
  get_status_display: String!
  get_registration_display: String!
  get_results_display: String!
  get_verify_using_display: String!
  get_region_display: String!
  get_currency_display: String!
  get_visibility_display: String!
  get_state_display: String!
  does_current_user_get_result: Boolean!
  number_of_prematch_competitors_registered: Int!
  number_of_prematch_competitors_waiting: Int!
  number_of_prematch_competitors_pending: Int!
  number_of_prematch_competitors_approved: Int!
  number_of_mainmatch_competitors_registered: Int!
  number_of_mainmatch_competitors_waiting: Int!
  number_of_mainmatch_competitors_pending: Int!
  number_of_mainmatch_competitors_approved: Int!
  competitors_unscored_list: [CompetitorInterface!]!
  prematch_competitors_registered: [CompetitorInterface!]!
  prematch_competitors: [CompetitorInterface!]!
  prematch_competitors_pending: [CompetitorInterface!]!
  prematch_competitors_approved: [CompetitorInterface!]!
  prematch_competitors_approved_wo_results: [CompetitorInterface!]!
  prematch_competitors_approved_w_wo_results: [CompetitorInterface!]!
  prematch_competitors_approved_w_wo_results_wo_squad: [CompetitorInterface!]!
  prematch_competitors_waiting: [CompetitorInterface!]!
  prematch_competitors_declined: [CompetitorInterface!]!
  prematch_competitors_deleted: [CompetitorInterface!]!
  mainmatch_competitors_registered: [CompetitorInterface!]!
  mainmatch_competitors: [CompetitorInterface!]!
  mainmatch_competitors_pending: [CompetitorInterface!]!
  mainmatch_competitors_approved: [CompetitorInterface!]!
  mainmatch_competitors_approved_wo_results: [CompetitorInterface!]!
  mainmatch_competitors_approved_w_wo_results: [CompetitorInterface!]!
  mainmatch_competitors_approved_w_wo_results_wo_squad: [CompetitorInterface!]!
  mainmatch_competitors_waiting: [CompetitorInterface!]!
  mainmatch_competitors_declined: [CompetitorInterface!]!
  mainmatch_competitors_deleted: [CompetitorInterface!]!
  group: DjangoModelType!
  organizer: OrganizationNode!
  accreditor: DjangoModelType
  accreditation_status: String!

  """name, max 50"""
  name: String!

  """max 600 char"""
  description: String!

  """max 800 char"""
  information: String!

  """max competitors in match or main match"""
  max_competitors: Int!

  """do we have a prematch, and is scoring included, 2 char"""
  prematch: String!

  """max competitors in pre-match, if used"""
  max_prematch_competitors: Int!

  """does event support teams"""
  allow_teams: Boolean!
  allows_spotter_shooter_teams: Boolean!

  """allow teams to edit and change members themself"""
  allow_team_self_management: Boolean!

  """team members in a team"""
  number_of_team_members: Int!

  """number of best scores used for team result"""
  result_from_team_members: Int!

  """max 2 char, status of even"""
  status: String!

  """status of registration, 2 char"""
  registration: String!

  """visibility of results, 2 char"""
  results: String!

  """verification method, 3 char"""
  verify_using: String!

  """
  defines family of sport (but you need rule+subrule and sometimes firearm to decide explicit sport), e.g. ipsc-famliy is IPSC, USPSA, SRA etc and sub-rule separates these
  """
  rule: String!

  """region, ISO31663A3, 3 char"""
  region: String!

  """currency, ISO4217, 3 char"""
  currency: String!

  """relevant url for event, max 300 char"""
  url: String!

  """display or link textfor url, max 20 char"""
  url_display: String!
  gcal_uid: String!

  """can a user register more then once or not"""
  multiple_reg_allowed: Boolean!

  """visibility of event, 3 char"""
  visibility: String!

  """US Stage choices, 3 char max"""
  state: String!

  """place/location textual description, max 64 char"""
  venue: String!

  """format as 5,5 decimal"""
  lat: Decimal

  """format as 5,5 decimal"""
  lng: Decimal
  image: DjangoImageType
  banner: DjangoImageType
  banner_url: String!
  f1: DjangoFileType
  f2: DjangoFileType
  f3: DjangoFileType
  f4: DjangoFileType
  f5: DjangoFileType
  f6: DjangoFileType
  f1_display: String!
  f2_display: String!
  f3_display: String!
  f4_display: String!
  f5_display: String!
  f6_display: String!
  has_accepted_event_data_ass_agreement: Boolean!

  """
  Event has enabled free Premium, requires that Organization associated with event allows for this (free within limits)
  """
  organization_enabled_event_premium: Boolean!
  comment: String!
  competitor_payment: String!
  total_net: Decimal!
  total_tax: Decimal!
  total_fee: Decimal!
  premium_currency: String!
  payment_methods: String!

  """for 3rd party apps, never used within SSI or accessed, max 500 char"""
  custom_api: String!
  competitors: [CompetitorInterface!]!

  """competitors indexed typically on stage-number shooting on"""
  competitors_indexed(
    """
    all/no/yes as in all comps, no those without squad, yes those with squad
    """
    sqs: String!
    shift_on: Int! = 1
    incl_dnf: Boolean! = false
    incl_dqed: Boolean! = false
  ): [CompetitorInterface!]!

  """
  list of possible deviating scores as a tuple <scorecard, alert-text message>
  """
  deviating_scorecards: [DeviatingScoreCardNode!]!

  """
  list of possible deviating competitors as a tuple <scorecard, alert-text message> (only for non-stage events)
  """
  deviating_competitors: [DeviatingCompetitorNode!]!

  """available standard-stages for sport, to be cloned if to be used"""
  available_standard_stages: [StandardStageInterface!]!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_competitor: CompetitorInterface!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_stage: StageInterface!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_team: TeamInterface!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_squad: SquadInterface!
  is_current_role_admin: Boolean!
  is_current_role_staff: Boolean!
  is_current_role_assistant: Boolean!

  """returns all event order payments (typically by competitors)"""
  order_payments: [PaymentInterface!]!

  """returns all event premium payments (for premium features of even)"""
  premium_payments: [PaymentInterface!]!
  merchandizes: [MerchandizeNode!]!
  merchandizes_on_registration: [MerchandizeNode!]!
  merchandize_orders: [MerchandizeOrderNode!]!
  component_matches: [ComponentMatchInterface!]!
  serie_type: String!
  get_prematch_choices: [ChoiceNode!]!
  get_status_choices: [ChoiceNode!]!
  get_registration_choices: [ChoiceNode!]!
  get_results_choices: [ChoiceNode!]!
  get_verify_using_choices: [ChoiceNode!]!
  get_region_choices: [ChoiceNode!]!
  get_currency_choices: [ChoiceNode!]!
  get_visibility_choices: [ChoiceNode!]!
  get_state_choices: [ChoiceNode!]!

  """returns list with id to organizations as values and name as display"""
  get_organizer_choices: [ChoiceNode!]!
  firearms: String!
  sub_rule: String!

  """stages in event"""
  stages: [StageInterface!]!
  squads: [SquadInterface!]!
  teams: [TeamInterface!]
  get_level_display: String!
  get_rifle_divs_display: String!
  get_rimfire_rifle_divs_display: String!
  get_pistol_divs_display: String!
  get_rimfire_pistol_divs_display: String!
  get_recognized_categories_display: String!
  level: String!
  rifle_divs: String!
  rimfire_rifle_divs: String!
  pistol_divs: String!
  rimfire_pistol_divs: String!
  recognized_categories: String!
  max_categories: Int!
  cat_result_limit: Int!
  do_achievement_awards: Boolean!

  """
  Returns a list of tuples <competitor, points and medal                                             for div and/or cat or Combined. Only if allowed to see  results
  """
  get_results(division: String = null, category: String = null): [CmpMatchResultNode!]!

  """Returns a list with ScoreCards that are disqualified in event"""
  get_disqualified(division: String = null, category: String = null): [CmpCompetitorNode!]!
  get_level_choices: [ChoiceNode!]!
  rifle_divs_choices: [ChoiceNode!]!
  get_rimfire_rifle_divs_choices: [ChoiceNode!]!
  get_pistol_divs_choices: [ChoiceNode!]!
  get_rimfire_pistol_divs_choices: [ChoiceNode!]!
  get_recognized_categories_choices: [ChoiceNode!]!
}

"""<competitor, points, medal>"""
type CmpMatchResultNode {
  competitor: CmpCompetitorNode
  place: Int
  points: Int
  medal: String
}

"""CMP Competitor (used in CMP)"""
type CmpCompetitorNode implements CompetitorInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!

  """
  Returns true if all orders are paid *or* if self._paid = True (if there are no orders)
  """
  is_paid: Boolean!
  is_alread_logged: Boolean!
  is_locked: Boolean!

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime
  details: String!
  scorecards: [ScoreCardInterface!]!
  shooter: ShooterNode!
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode!
  get_club_display: String!
  get_club_short_display: String!
  get_sex_display: String!
  get_region_display: String!
  get_state_display: String!
  get_status_display: String!
  get_code_display: String!

  """max 30 char"""
  first_name: String!

  """max 30 char"""
  last_name: String!

  """value, 1 char"""
  sex: String!

  """max 300 char"""
  email: String!

  """ISO3166A3, 3 char. --- if no region or none"""
  region: String!

  """US state, 3 char"""
  state: String!

  """free text name of club, inferior to club_member if this is set"""
  club: String!

  """is for a club-member, can be used then to access club"""
  club_member: DjangoModelType

  """0 or blank means no number yet set, can take 5 min from registration"""
  number: Int!

  """registraion status, 1 char"""
  status: String!
  code: String!
  comment: String!

  """is competitor in prematch, default is False"""
  prematch: Boolean!

  """license number, 30 char"""
  license: String!
  notify: Boolean!

  """
  used to express if they did not show or stopped/left and this removed from scoring/results
  """
  did_not_finish: Boolean!
  has_accepted_event_data_policy: Boolean!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!

  """
  returns scoring version history iff not stages used in sport (i.e. scores stored directly per competitor)
  """
  scoring_history: [VersionNode!]!

  """
  assumes event uses stages & returns a comma separated string of ints for a five-tuple; <verified, unverified, scored, unscored, total_to_score>
  """
  scoring_progress: ScoringProgressNode!
  payments: [PaymentInterface!]!
  merchandize_orders: [MerchandizeOrderNode!]!

  """
  can current user update instance (e.g. are you allowed to update on yourself, or are you organizer)
  """
  can_current_update: Boolean!

  """
  ICE phone on format +CC-XXXXXXXXXX with leading country code dash phone number
  """
  ice_phone: String!

  """
  phone on format +CC-XXXXXXXXXX with leading country code dash phone number
  """
  phone: String!

  """
  returns result in visible format, if allowed to see for user making request
  """
  get_result_display: String!

  """country calling codes tuples"""
  get_cc_calling_choices: [ChoiceNode!]!
  get_sex_choices: [ChoiceNode!]!
  get_region_choices: [ChoiceNode!]!
  get_state_choices: [ChoiceNode!]!

  """returns list of id's to club-members is any that can compete for"""
  get_club_member_choices: [ChoiceNode!]!

  """returns list if admin/staff"""
  get_status_choices: [ChoiceNode!]!

  """returns list if admin/staff"""
  get_code_choices: [ChoiceNode!]!

  """
  returns list of avilable squads to choose from (if admin or approved competitor)
  """
  get_squad_choices: [ChoiceNode!]!

  """
  returns PIN code for self or if admin or staff of event (allows for off-line valuation if pin set)
  """
  pin: String!
  tot_points: Int!
  place: Int!
  combined_place: Int!
  verified_by: ShooterNode!

  """ISO-8601 formatted"""
  verified: DateTime
  is_verified: Boolean!

  """has signature/image been used to signing (else PIN code used)"""
  is_verified_w_signature: Boolean!
  event: CmpMatchNode!
  squad: CmpSquadNode
  get_rifle_div_display: String!
  get_rimfire_rifle_div_display: String!
  get_pistol_div_display: String!
  get_rimfire_pistol_div_display: String!
  get_category_display: String!
  get_classification_display: String!
  get_achievement_award_display: String!
  get_dq_reason_display: String!
  rifle_div: String!
  rimfire_rifle_div: String!
  pistol_div: String!
  rimfire_pistol_div: String!
  category: String!
  classification: String!
  cmp_id: String!
  weapon_name: String!
  achievement_award: String!
  s1_points: Int!
  s2_points: Int!
  s3_points: Int!
  s4_points: Int!
  s5_points: Int!
  s6_points: Int!
  s7_points: Int!
  s8_points: Int!
  s9_points: Int!
  s10_points: Int!
  s11_points: Int!
  s12_points: Int!
  s13_points: Int!
  s14_points: Int!
  s15_points: Int!
  s16_points: Int!
  s1: String!
  s2: String!
  s3: String!
  s4: String!
  s5: String!
  s6: String!
  s7: String!
  s8: String!
  s9: String!
  s10: String!
  s11: String!
  s12: String!
  s13: String!
  s14: String!
  s15: String!
  s16: String!
  so1_points: Int!
  so2_points: Int!
  so3_points: Int!
  so4_points: Int!
  so5_points: Int!
  so6_points: Int!
  so7_points: Int!
  so8_points: Int!
  so9_points: Int!
  so10_points: Int!
  so1: String!
  so2: String!
  so3: String!
  so4: String!
  so5: String!
  so6: String!
  so7: String!
  so8: String!
  so9: String!
  so10: String!
  warning: Boolean!
  signature: DjangoImageType
  dq_reason: String!
  score_comment: String!
  get_rifle_div_choices: [ChoiceNode!]!
  get_rimfire_rifle_div_choices: [ChoiceNode!]!
  get_pistol_div_choices: [ChoiceNode!]!
  get_rimfire_pistol_div_choices: [ChoiceNode!]!
  get_category_choices: [ChoiceNode!]!
  get_classification_choices: [ChoiceNode!]!
  get_achivement_award_choices: [ChoiceNode!]!
  get_dq_reason_choices: [ChoiceNode!]!
}

"""
SassStage(id, number, name, venue, image, banner, banner_url, procedure, start_pos, firearm_condition, start_on, stop_on, penalties_notes, safety_angles, setup_notes, sort, included, _locked, created_by, created, updated_by, updated, lock_changed_by, lock_changed, event, paper, popper, plate, frangible, minimum_rounds, firearms, _scoring_completed)
"""
type SassStageNode implements StageInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!
  is_locked: Boolean!

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime
  scorecards: [ScoreCardInterface!]!

  """list of scorecards that are DQ'ed on stage"""
  scorecards_dq: [ScoreCardInterface!]!

  """list of scorecards with a warning on stage"""
  scorecards_w_warning: [ScoreCardInterface!]!
  scoring_completed: Decimal!
  get_next_stage: StageInterface!
  get_previous_stage: StageInterface!
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode!
  number: Int!

  """name/title of stage (not number), max 35 char"""
  name: String!

  """place/location textual description, max 64 char"""
  venue: String!
  image: DjangoImageType
  banner: DjangoImageType

  """300 char"""
  banner_url: String!

  """1000 char"""
  procedure: String!

  """1000 char"""
  start_pos: String!

  """500 char"""
  firearm_condition: String!

  """200 char"""
  start_on: String!

  """200 char"""
  stop_on: String!

  """500 char"""
  penalties_notes: String!

  """200 char"""
  safety_angles: String!

  """1000 char"""
  setup_notes: String!

  """Sort of stage, 4 char"""
  sort: String!

  """included in event results or not"""
  included: Boolean!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!

  """
  summary of scoring progress, returns a comma separated string of ints for a five-tuple; <verified, unverified, scored, unscored, total_to_score>. This excludes any DQed competitors
  """
  scoring_progress: ScoringProgressNode!

  """
  summary of scoring progress, returns a list of two-tuples with <squad, scoring-progress> where scoring progress is comma separated string of ints for a five-tuple; <verified, unverified, scored, unscored, total_to_score>. This excludes any DQed competitors
  """
  squad_scoring_progress: [SquadScoringProgressNode!]!
  competitors_indexed(
    """
    all/no/yes as in all comps, no those without squad, yes those with squad
    """
    sqs: String! = "yes"
    shift_on: Int! = 1
    incl_dnf: Boolean! = false
    incl_dqed: Boolean! = false
  ): [CompetitorInterface!]!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_scorecard: ScoreCardInterface!
  get_firearms_display: String!
  paper: Int!
  popper: Int!
  plate: Int!
  frangible: Int!
  minimum_rounds: Int!
  firearms: String!

  """returns results as ordered of results for stage is allowed to view"""
  get_results(category: String = null): [SteelStageResultNode!]!

  """returns all DQs for stage"""
  get_disqualified(division: String = null): [SassScoreCardNode!]!
  get_firearms_choices: [ChoiceNode!]!
}

"""SassScorecard used for Sass"""
type SassScoreCardNode implements ScoreCardInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!

  """returns full scoring history Versions"""
  get_scoring_history: [VersionNode!]!
  is_verified: Boolean!

  """has signature/image been used to signing (else PIN code used)"""
  is_verified_w_signature: Boolean!
  is_locked: Boolean!

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime

  """ISO-8601 formatted"""
  verified: DateTime

  """Supports scoring analytics on stage/scoring-rule"""
  supports_scoring_analytics: Boolean!

  """
  List of human-readable strings with scoring analytics info (help to improve)
  """
  get_scoring_analytics: [String!]!
  verified_by: ShooterNode!
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode!

  """Got DQ'ed"""
  disqualified: Boolean!
  signature: DjangoImageType

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!
  stage: SassStageNode!
  competitor: SassCompetitorNode!
  overall_place: Int!
  overall_rank: Int!
  category_place: Int!
  category_rank: Int!
  get_dq_reason_display: String!
  time: Decimal!
  miss: Int!
  fte: Boolean!
  stg: Boolean!
  procedure: Boolean!
  safety: Int!
  dq_reason: String!
  total_time: Decimal!
  comment: String!
  get_dq_reason_choices: [ChoiceNode!]!
}

"""Sass Competitor (used in SASS)"""
type SassCompetitorNode implements CompetitorInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!

  """
  Returns true if all orders are paid *or* if self._paid = True (if there are no orders)
  """
  is_paid: Boolean!
  is_alread_logged: Boolean!
  is_locked: Boolean!

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime
  details: String!
  scorecards: [ScoreCardInterface!]!
  shooter: ShooterNode!
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode!
  get_club_display: String!
  get_club_short_display: String!
  get_sex_display: String!
  get_region_display: String!
  get_state_display: String!
  get_status_display: String!
  get_code_display: String!

  """max 30 char"""
  first_name: String!

  """max 30 char"""
  last_name: String!

  """value, 1 char"""
  sex: String!

  """max 300 char"""
  email: String!

  """ISO3166A3, 3 char. --- if no region or none"""
  region: String!

  """US state, 3 char"""
  state: String!

  """free text name of club, inferior to club_member if this is set"""
  club: String!

  """is for a club-member, can be used then to access club"""
  club_member: DjangoModelType

  """0 or blank means no number yet set, can take 5 min from registration"""
  number: Int!

  """registraion status, 1 char"""
  status: String!
  code: String!
  comment: String!

  """is competitor in prematch, default is False"""
  prematch: Boolean!

  """license number, 30 char"""
  license: String!
  notify: Boolean!

  """
  used to express if they did not show or stopped/left and this removed from scoring/results
  """
  did_not_finish: Boolean!
  has_accepted_event_data_policy: Boolean!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!

  """
  returns scoring version history iff not stages used in sport (i.e. scores stored directly per competitor)
  """
  scoring_history: [VersionNode!]!

  """
  assumes event uses stages & returns a comma separated string of ints for a five-tuple; <verified, unverified, scored, unscored, total_to_score>
  """
  scoring_progress: ScoringProgressNode!
  payments: [PaymentInterface!]!
  merchandize_orders: [MerchandizeOrderNode!]!

  """
  can current user update instance (e.g. are you allowed to update on yourself, or are you organizer)
  """
  can_current_update: Boolean!

  """
  ICE phone on format +CC-XXXXXXXXXX with leading country code dash phone number
  """
  ice_phone: String!

  """
  phone on format +CC-XXXXXXXXXX with leading country code dash phone number
  """
  phone: String!

  """
  returns result in visible format, if allowed to see for user making request
  """
  get_result_display: String!

  """country calling codes tuples"""
  get_cc_calling_choices: [ChoiceNode!]!
  get_sex_choices: [ChoiceNode!]!
  get_region_choices: [ChoiceNode!]!
  get_state_choices: [ChoiceNode!]!

  """returns list of id's to club-members is any that can compete for"""
  get_club_member_choices: [ChoiceNode!]!

  """returns list if admin/staff"""
  get_status_choices: [ChoiceNode!]!

  """returns list if admin/staff"""
  get_code_choices: [ChoiceNode!]!

  """
  returns list of avilable squads to choose from (if admin or approved competitor)
  """
  get_squad_choices: [ChoiceNode!]!

  """
  returns PIN code for self or if admin or staff of event (allows for off-line valuation if pin set)
  """
  pin: String!
  overall_place: Int!
  overall_rank: Int!
  overall_match_time: Decimal!
  category_place: Int!
  category_rank: Int!
  category_match_time: Decimal!
  tot_miss: Int!
  tot_fte: Int!
  tot_stg: Int!
  tot_procedure: Int!
  tot_safety: Int!
  tot_raw_time: Decimal!
  event: SassMatchNode!
  squad: SassSquadNode
  get_main_cat_display: String!
  get_side_cat_display: String!
  get_long_cat_display: String!
  get_mounted_cat_display: String!
  get_main_cat_choices: [ChoiceNode!]!
  get_side_cat_choices: [ChoiceNode!]!
  get_long_cat_choices: [ChoiceNode!]!
  get_mounted_cat_choices: [ChoiceNode!]!
  main_cat: String!
  side_cat: String!
  long_cat: String!
  mounted_cat: String!
  dq: Boolean!
  sass_alias: String!
  sass_num: String!
}

"""IdpaMatch used for IDPA, SADPA and iCore matches"""
type IdpaMatchNode implements EventInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!
  is_locked: Boolean!
  supports_rating: Boolean!
  is_rated: Boolean!

  """ISO-8601 formatted, when/if has been elo-rated"""
  rated: DateTime

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime

  """competitors that did not show/complete/finnish the event"""
  competitors_did_not_finish: [CompetitorInterface!]!
  competitors_approved_w_wo_results_wo_squad_not_dnf: [CompetitorInterface!]!
  competitors_approved_w_wo_results_not_dnf: [CompetitorInterface!]!

  """
  list of scorecards that are DQ'ed (if event used stages, else use competitors_dq)
  """
  scorecards_dq: [ScoreCardInterface!]!

  """
  list of competitors that are DQ'ed (if stages used, check scorecard for reason of DQ)
  """
  competitors_dq: [CompetitorInterface!]!

  """
  list of scorecards with warning (if event used stages, else use competitors_w_warning)
  """
  scorecards_w_warning: [ScoreCardInterface!]!

  """
  list of competitors a warning (if stages used, check scorecards for reason of warning)
  """
  competitors_w_warning: [CompetitorInterface!]!

  """ISO-8601 formatted"""
  starts: DateTime!

  """ISO-8601 formatted"""
  ends: DateTime

  """ISO-8601 formatted"""
  registration_starts: DateTime!

  """ISO-8601 formatted"""
  registration_closes: DateTime

  """ISO-8601 formatted"""
  squadding_starts: DateTime

  """ISO-8601 formatted"""
  pm_squadding_starts: DateTime

  """ISO-8601 formatted"""
  squadding_closes: DateTime
  short_url: String!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!
  minimum_rounds: Int!
  is_tournament_match: Boolean!
  is_component_match: Boolean!

  """
  Registration is only possible if registration date has started and not closed and the registration is open.
  Use this check to present if registration for a shooter shall be possible or not.
  """
  is_registration_possible: Boolean!
  is_squadding_possible: Boolean!
  is_pm_squadding_possible: Boolean!
  supports_bulk_scoring: Boolean!
  uses_stages: Boolean!
  uses_shoot_off_stages: Boolean!
  uses_strings: Boolean!
  number_of_strings: Boolean!
  number_of_rounds_per_string: Int!
  supports_shoot_off_strings: Boolean!
  do_index_competitor_when_scoring: Boolean!
  supports_standard_stages: Boolean!
  supports_score_string_for_squad: Boolean!
  supports_score_all_in_squad_at_stage: Boolean!
  is_premium_activated: Boolean!

  """returns list of RBAC roles for current user"""
  role_names: [String!]!

  """
  Returns True if the premium for event is fully paid or if 
  event is associated with a premium-org that has enable free-premium and small,
  not to many non-members and and fee not to high
  
  ** OR ** 
  
  the event has previoously been set to completed (under old premium valid things
  so we do not make them pay for old events)
  """
  is_premium_fully_valid: Boolean!
  has_geopos: Boolean!
  has_prematch: Boolean!

  """is prematch score included in overall results"""
  has_prematch_included: Boolean!
  uses_pin_verification: Boolean!
  uses_signature_verification: Boolean!
  scoring_completed: Decimal!

  """
  obfuscated id used when registering, only shown when reg possible or staff/admin of event to avoid bot-registrations
  """
  obfuscated_id: String!
  get_standard_stage_selection: [StandardStageInterface!]!
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode
  get_full_rule_display: String!
  get_full_level_display: String!
  get_prematch_display: String!
  get_status_display: String!
  get_registration_display: String!
  get_results_display: String!
  get_verify_using_display: String!
  get_region_display: String!
  get_currency_display: String!
  get_visibility_display: String!
  get_state_display: String!
  does_current_user_get_result: Boolean!
  number_of_prematch_competitors_registered: Int!
  number_of_prematch_competitors_waiting: Int!
  number_of_prematch_competitors_pending: Int!
  number_of_prematch_competitors_approved: Int!
  number_of_mainmatch_competitors_registered: Int!
  number_of_mainmatch_competitors_waiting: Int!
  number_of_mainmatch_competitors_pending: Int!
  number_of_mainmatch_competitors_approved: Int!
  competitors_unscored_list: [CompetitorInterface!]!
  prematch_competitors_registered: [CompetitorInterface!]!
  prematch_competitors: [CompetitorInterface!]!
  prematch_competitors_pending: [CompetitorInterface!]!
  prematch_competitors_approved: [CompetitorInterface!]!
  prematch_competitors_approved_wo_results: [CompetitorInterface!]!
  prematch_competitors_approved_w_wo_results: [CompetitorInterface!]!
  prematch_competitors_approved_w_wo_results_wo_squad: [CompetitorInterface!]!
  prematch_competitors_waiting: [CompetitorInterface!]!
  prematch_competitors_declined: [CompetitorInterface!]!
  prematch_competitors_deleted: [CompetitorInterface!]!
  mainmatch_competitors_registered: [CompetitorInterface!]!
  mainmatch_competitors: [CompetitorInterface!]!
  mainmatch_competitors_pending: [CompetitorInterface!]!
  mainmatch_competitors_approved: [CompetitorInterface!]!
  mainmatch_competitors_approved_wo_results: [CompetitorInterface!]!
  mainmatch_competitors_approved_w_wo_results: [CompetitorInterface!]!
  mainmatch_competitors_approved_w_wo_results_wo_squad: [CompetitorInterface!]!
  mainmatch_competitors_waiting: [CompetitorInterface!]!
  mainmatch_competitors_declined: [CompetitorInterface!]!
  mainmatch_competitors_deleted: [CompetitorInterface!]!
  group: DjangoModelType!
  organizer: OrganizationNode!
  accreditor: DjangoModelType
  accreditation_status: String!

  """name, max 50"""
  name: String!

  """max 600 char"""
  description: String!

  """max 800 char"""
  information: String!

  """max competitors in match or main match"""
  max_competitors: Int!

  """do we have a prematch, and is scoring included, 2 char"""
  prematch: String!

  """max competitors in pre-match, if used"""
  max_prematch_competitors: Int!

  """does event support teams"""
  allow_teams: Boolean!
  allows_spotter_shooter_teams: Boolean!

  """allow teams to edit and change members themself"""
  allow_team_self_management: Boolean!

  """team members in a team"""
  number_of_team_members: Int!

  """number of best scores used for team result"""
  result_from_team_members: Int!

  """max 2 char, status of even"""
  status: String!

  """status of registration, 2 char"""
  registration: String!

  """visibility of results, 2 char"""
  results: String!

  """verification method, 3 char"""
  verify_using: String!

  """
  defines family of sport (but you need rule+subrule and sometimes firearm to decide explicit sport), e.g. ipsc-famliy is IPSC, USPSA, SRA etc and sub-rule separates these
  """
  rule: String!

  """region, ISO31663A3, 3 char"""
  region: String!

  """currency, ISO4217, 3 char"""
  currency: String!

  """relevant url for event, max 300 char"""
  url: String!

  """display or link textfor url, max 20 char"""
  url_display: String!
  gcal_uid: String!

  """can a user register more then once or not"""
  multiple_reg_allowed: Boolean!

  """visibility of event, 3 char"""
  visibility: String!

  """US Stage choices, 3 char max"""
  state: String!

  """place/location textual description, max 64 char"""
  venue: String!

  """format as 5,5 decimal"""
  lat: Decimal

  """format as 5,5 decimal"""
  lng: Decimal
  image: DjangoImageType
  banner: DjangoImageType
  banner_url: String!
  f1: DjangoFileType
  f2: DjangoFileType
  f3: DjangoFileType
  f4: DjangoFileType
  f5: DjangoFileType
  f6: DjangoFileType
  f1_display: String!
  f2_display: String!
  f3_display: String!
  f4_display: String!
  f5_display: String!
  f6_display: String!
  has_accepted_event_data_ass_agreement: Boolean!

  """
  Event has enabled free Premium, requires that Organization associated with event allows for this (free within limits)
  """
  organization_enabled_event_premium: Boolean!
  comment: String!
  competitor_payment: String!
  total_net: Decimal!
  total_tax: Decimal!
  total_fee: Decimal!
  premium_currency: String!
  payment_methods: String!

  """for 3rd party apps, never used within SSI or accessed, max 500 char"""
  custom_api: String!
  competitors: [CompetitorInterface!]!

  """competitors indexed typically on stage-number shooting on"""
  competitors_indexed(
    """
    all/no/yes as in all comps, no those without squad, yes those with squad
    """
    sqs: String!
    shift_on: Int! = 1
    incl_dnf: Boolean! = false
    incl_dqed: Boolean! = false
  ): [CompetitorInterface!]!

  """
  list of possible deviating scores as a tuple <scorecard, alert-text message>
  """
  deviating_scorecards: [DeviatingScoreCardNode!]!

  """
  list of possible deviating competitors as a tuple <scorecard, alert-text message> (only for non-stage events)
  """
  deviating_competitors: [DeviatingCompetitorNode!]!

  """available standard-stages for sport, to be cloned if to be used"""
  available_standard_stages: [StandardStageInterface!]!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_competitor: CompetitorInterface!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_stage: StageInterface!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_team: TeamInterface!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_squad: SquadInterface!
  is_current_role_admin: Boolean!
  is_current_role_staff: Boolean!
  is_current_role_assistant: Boolean!

  """returns all event order payments (typically by competitors)"""
  order_payments: [PaymentInterface!]!

  """returns all event premium payments (for premium features of even)"""
  premium_payments: [PaymentInterface!]!
  merchandizes: [MerchandizeNode!]!
  merchandizes_on_registration: [MerchandizeNode!]!
  merchandize_orders: [MerchandizeOrderNode!]!
  component_matches: [ComponentMatchInterface!]!
  serie_type: String!
  get_prematch_choices: [ChoiceNode!]!
  get_status_choices: [ChoiceNode!]!
  get_registration_choices: [ChoiceNode!]!
  get_results_choices: [ChoiceNode!]!
  get_verify_using_choices: [ChoiceNode!]!
  get_region_choices: [ChoiceNode!]!
  get_currency_choices: [ChoiceNode!]!
  get_visibility_choices: [ChoiceNode!]!
  get_state_choices: [ChoiceNode!]!

  """returns list with id to organizations as values and name as display"""
  get_organizer_choices: [ChoiceNode!]!
  firearms: String!
  sub_rule: String!

  """stages in event"""
  stages: [StageInterface!]!
  squads: [SquadInterface!]!
  teams: [TeamInterface!]
  get_level_display: String!
  get_handgun_divs_display: String!
  get_rifle_divs_display: String!
  get_shotgun_divs_display: String!
  get_dmg_divs_display: String!
  get_category_display: String!
  get_standard_display: String!
  level: String!
  handgun_divs: String!
  rifle_divs: String!
  shotgun_divs: String!
  dmg_divs: String!
  category: String!
  max_category: Int!
  min_score_category: Int!
  standard: String!

  """
  Returns a list of tuples <competitor, score and total-points down                                             for div and/or cat or Combined. Only if allowed to see  results
  """
  get_results(division: String = null, category: String = null, classification: String = null, combined: String = null): [IdpaMatchResultNode!]!

  """Returns a list with ScoreCards that are disqualified in event"""
  get_disqualified(division: String = null, category: String = null, classification: String = null, combined: String = null): [IdpaScoreCardNode!]!
  get_level_choices: [ChoiceNode!]!
  get_handgun_divs_choices: [ChoiceNode!]!
  get_rifle_divs_choices: [ChoiceNode!]!
  get_shotgun_divs_choices: [ChoiceNode!]!
  get_dmg_divs_choices: [ChoiceNode!]!
  get_category_choices: [ChoiceNode!]!
  get_standard_choices: [ChoiceNode!]!
}

"""<competitor, points, medal>"""
type IdpaMatchResultNode {
  competitor: IdpaCompetitorNode
  place: Int
  score: Float
  points_down: Int
}

"""
SteelMatches used for Steel Challenge, ISSA Steel and NSSF Steel matches
"""
type SteelMatchNode implements EventInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!
  is_locked: Boolean!
  supports_rating: Boolean!
  is_rated: Boolean!

  """ISO-8601 formatted, when/if has been elo-rated"""
  rated: DateTime

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime

  """competitors that did not show/complete/finnish the event"""
  competitors_did_not_finish: [CompetitorInterface!]!
  competitors_approved_w_wo_results_wo_squad_not_dnf: [CompetitorInterface!]!
  competitors_approved_w_wo_results_not_dnf: [CompetitorInterface!]!

  """
  list of scorecards that are DQ'ed (if event used stages, else use competitors_dq)
  """
  scorecards_dq: [ScoreCardInterface!]!

  """
  list of competitors that are DQ'ed (if stages used, check scorecard for reason of DQ)
  """
  competitors_dq: [CompetitorInterface!]!

  """
  list of scorecards with warning (if event used stages, else use competitors_w_warning)
  """
  scorecards_w_warning: [ScoreCardInterface!]!

  """
  list of competitors a warning (if stages used, check scorecards for reason of warning)
  """
  competitors_w_warning: [CompetitorInterface!]!

  """ISO-8601 formatted"""
  starts: DateTime!

  """ISO-8601 formatted"""
  ends: DateTime

  """ISO-8601 formatted"""
  registration_starts: DateTime!

  """ISO-8601 formatted"""
  registration_closes: DateTime

  """ISO-8601 formatted"""
  squadding_starts: DateTime

  """ISO-8601 formatted"""
  pm_squadding_starts: DateTime

  """ISO-8601 formatted"""
  squadding_closes: DateTime
  short_url: String!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!
  minimum_rounds: Int!
  is_tournament_match: Boolean!
  is_component_match: Boolean!

  """
  Registration is only possible if registration date has started and not closed and the registration is open.
  Use this check to present if registration for a shooter shall be possible or not.
  """
  is_registration_possible: Boolean!
  is_squadding_possible: Boolean!
  is_pm_squadding_possible: Boolean!
  supports_bulk_scoring: Boolean!
  uses_stages: Boolean!
  uses_shoot_off_stages: Boolean!
  uses_strings: Boolean!
  number_of_strings: Boolean!
  number_of_rounds_per_string: Int!
  supports_shoot_off_strings: Boolean!
  do_index_competitor_when_scoring: Boolean!
  supports_standard_stages: Boolean!
  supports_score_string_for_squad: Boolean!
  supports_score_all_in_squad_at_stage: Boolean!
  is_premium_activated: Boolean!

  """returns list of RBAC roles for current user"""
  role_names: [String!]!

  """
  Returns True if the premium for event is fully paid or if 
  event is associated with a premium-org that has enable free-premium and small,
  not to many non-members and and fee not to high
  
  ** OR ** 
  
  the event has previoously been set to completed (under old premium valid things
  so we do not make them pay for old events)
  """
  is_premium_fully_valid: Boolean!
  has_geopos: Boolean!
  has_prematch: Boolean!

  """is prematch score included in overall results"""
  has_prematch_included: Boolean!
  uses_pin_verification: Boolean!
  uses_signature_verification: Boolean!
  scoring_completed: Decimal!

  """
  obfuscated id used when registering, only shown when reg possible or staff/admin of event to avoid bot-registrations
  """
  obfuscated_id: String!
  get_standard_stage_selection: [StandardStageInterface!]!
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode
  get_full_rule_display: String!
  get_full_level_display: String!
  get_prematch_display: String!
  get_status_display: String!
  get_registration_display: String!
  get_results_display: String!
  get_verify_using_display: String!
  get_region_display: String!
  get_currency_display: String!
  get_visibility_display: String!
  get_state_display: String!
  does_current_user_get_result: Boolean!
  number_of_prematch_competitors_registered: Int!
  number_of_prematch_competitors_waiting: Int!
  number_of_prematch_competitors_pending: Int!
  number_of_prematch_competitors_approved: Int!
  number_of_mainmatch_competitors_registered: Int!
  number_of_mainmatch_competitors_waiting: Int!
  number_of_mainmatch_competitors_pending: Int!
  number_of_mainmatch_competitors_approved: Int!
  competitors_unscored_list: [CompetitorInterface!]!
  prematch_competitors_registered: [CompetitorInterface!]!
  prematch_competitors: [CompetitorInterface!]!
  prematch_competitors_pending: [CompetitorInterface!]!
  prematch_competitors_approved: [CompetitorInterface!]!
  prematch_competitors_approved_wo_results: [CompetitorInterface!]!
  prematch_competitors_approved_w_wo_results: [CompetitorInterface!]!
  prematch_competitors_approved_w_wo_results_wo_squad: [CompetitorInterface!]!
  prematch_competitors_waiting: [CompetitorInterface!]!
  prematch_competitors_declined: [CompetitorInterface!]!
  prematch_competitors_deleted: [CompetitorInterface!]!
  mainmatch_competitors_registered: [CompetitorInterface!]!
  mainmatch_competitors: [CompetitorInterface!]!
  mainmatch_competitors_pending: [CompetitorInterface!]!
  mainmatch_competitors_approved: [CompetitorInterface!]!
  mainmatch_competitors_approved_wo_results: [CompetitorInterface!]!
  mainmatch_competitors_approved_w_wo_results: [CompetitorInterface!]!
  mainmatch_competitors_approved_w_wo_results_wo_squad: [CompetitorInterface!]!
  mainmatch_competitors_waiting: [CompetitorInterface!]!
  mainmatch_competitors_declined: [CompetitorInterface!]!
  mainmatch_competitors_deleted: [CompetitorInterface!]!
  group: DjangoModelType!
  organizer: OrganizationNode!
  accreditor: DjangoModelType
  accreditation_status: String!

  """name, max 50"""
  name: String!

  """max 600 char"""
  description: String!

  """max 800 char"""
  information: String!

  """max competitors in match or main match"""
  max_competitors: Int!

  """do we have a prematch, and is scoring included, 2 char"""
  prematch: String!

  """max competitors in pre-match, if used"""
  max_prematch_competitors: Int!

  """does event support teams"""
  allow_teams: Boolean!
  allows_spotter_shooter_teams: Boolean!

  """allow teams to edit and change members themself"""
  allow_team_self_management: Boolean!

  """team members in a team"""
  number_of_team_members: Int!

  """number of best scores used for team result"""
  result_from_team_members: Int!

  """max 2 char, status of even"""
  status: String!

  """status of registration, 2 char"""
  registration: String!

  """visibility of results, 2 char"""
  results: String!

  """verification method, 3 char"""
  verify_using: String!

  """
  defines family of sport (but you need rule+subrule and sometimes firearm to decide explicit sport), e.g. ipsc-famliy is IPSC, USPSA, SRA etc and sub-rule separates these
  """
  rule: String!

  """region, ISO31663A3, 3 char"""
  region: String!

  """currency, ISO4217, 3 char"""
  currency: String!

  """relevant url for event, max 300 char"""
  url: String!

  """display or link textfor url, max 20 char"""
  url_display: String!
  gcal_uid: String!

  """can a user register more then once or not"""
  multiple_reg_allowed: Boolean!

  """visibility of event, 3 char"""
  visibility: String!

  """US Stage choices, 3 char max"""
  state: String!

  """place/location textual description, max 64 char"""
  venue: String!

  """format as 5,5 decimal"""
  lat: Decimal

  """format as 5,5 decimal"""
  lng: Decimal
  image: DjangoImageType
  banner: DjangoImageType
  banner_url: String!
  f1: DjangoFileType
  f2: DjangoFileType
  f3: DjangoFileType
  f4: DjangoFileType
  f5: DjangoFileType
  f6: DjangoFileType
  f1_display: String!
  f2_display: String!
  f3_display: String!
  f4_display: String!
  f5_display: String!
  f6_display: String!
  has_accepted_event_data_ass_agreement: Boolean!

  """
  Event has enabled free Premium, requires that Organization associated with event allows for this (free within limits)
  """
  organization_enabled_event_premium: Boolean!
  comment: String!
  competitor_payment: String!
  total_net: Decimal!
  total_tax: Decimal!
  total_fee: Decimal!
  premium_currency: String!
  payment_methods: String!

  """for 3rd party apps, never used within SSI or accessed, max 500 char"""
  custom_api: String!
  competitors: [CompetitorInterface!]!

  """competitors indexed typically on stage-number shooting on"""
  competitors_indexed(
    """
    all/no/yes as in all comps, no those without squad, yes those with squad
    """
    sqs: String!
    shift_on: Int! = 1
    incl_dnf: Boolean! = false
    incl_dqed: Boolean! = false
  ): [CompetitorInterface!]!

  """
  list of possible deviating scores as a tuple <scorecard, alert-text message>
  """
  deviating_scorecards: [DeviatingScoreCardNode!]!

  """
  list of possible deviating competitors as a tuple <scorecard, alert-text message> (only for non-stage events)
  """
  deviating_competitors: [DeviatingCompetitorNode!]!

  """available standard-stages for sport, to be cloned if to be used"""
  available_standard_stages: [StandardStageInterface!]!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_competitor: CompetitorInterface!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_stage: StageInterface!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_team: TeamInterface!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_squad: SquadInterface!
  is_current_role_admin: Boolean!
  is_current_role_staff: Boolean!
  is_current_role_assistant: Boolean!

  """returns all event order payments (typically by competitors)"""
  order_payments: [PaymentInterface!]!

  """returns all event premium payments (for premium features of even)"""
  premium_payments: [PaymentInterface!]!
  merchandizes: [MerchandizeNode!]!
  merchandizes_on_registration: [MerchandizeNode!]!
  merchandize_orders: [MerchandizeOrderNode!]!
  component_matches: [ComponentMatchInterface!]!
  serie_type: String!
  get_prematch_choices: [ChoiceNode!]!
  get_status_choices: [ChoiceNode!]!
  get_registration_choices: [ChoiceNode!]!
  get_results_choices: [ChoiceNode!]!
  get_verify_using_choices: [ChoiceNode!]!
  get_region_choices: [ChoiceNode!]!
  get_currency_choices: [ChoiceNode!]!
  get_visibility_choices: [ChoiceNode!]!
  get_state_choices: [ChoiceNode!]!

  """returns list with id to organizations as values and name as display"""
  get_organizer_choices: [ChoiceNode!]!
  firearms: String!
  sub_rule: String!

  """stages in event"""
  stages: [StageInterface!]!
  squads: [SquadInterface!]!
  teams: [TeamInterface!]
  get_level_display: String!
  get_division_display: String!
  get_standard_display: String!
  divisions: String!
  level: String!
  standard: String!

  """
  Returns a list of tuples <competitor, score>                                             for div and/or cat or Combined. Only if allowed to see  results
  """
  get_results(division: String = null): [SteelMatchResultNode!]!

  """Returns a list with ScoreCards that are disqualified in event"""
  get_disqualified(division: String = null): [SteelScoreCardNode!]!
  get_divisions_choices: [ChoiceNode!]!
  get_level_choices: [ChoiceNode!]!
  get_standard_choices: [ChoiceNode!]!
}

"""competitor & total score (sum of times)"""
type SteelMatchResultNode {
  competitor: SteelCompetitorNode
  place: Int
  score: Float
}

"""
GenericStage(id, number, name, venue, image, banner, banner_url, procedure, start_pos, firearm_condition, start_on, stop_on, penalties_notes, safety_angles, setup_notes, sort, included, _locked, created_by, created, updated_by, updated, lock_changed_by, lock_changed, event)
"""
type GenericStageNode implements StageInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!
  is_locked: Boolean!

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime
  scorecards: [ScoreCardInterface!]!

  """list of scorecards that are DQ'ed on stage"""
  scorecards_dq: [ScoreCardInterface!]!

  """list of scorecards with a warning on stage"""
  scorecards_w_warning: [ScoreCardInterface!]!
  scoring_completed: Decimal!
  get_next_stage: StageInterface!
  get_previous_stage: StageInterface!
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode!
  number: Int!

  """name/title of stage (not number), max 35 char"""
  name: String!

  """place/location textual description, max 64 char"""
  venue: String!
  image: DjangoImageType
  banner: DjangoImageType

  """300 char"""
  banner_url: String!

  """1000 char"""
  procedure: String!

  """1000 char"""
  start_pos: String!

  """500 char"""
  firearm_condition: String!

  """200 char"""
  start_on: String!

  """200 char"""
  stop_on: String!

  """500 char"""
  penalties_notes: String!

  """200 char"""
  safety_angles: String!

  """1000 char"""
  setup_notes: String!

  """Sort of stage, 4 char"""
  sort: String!

  """included in event results or not"""
  included: Boolean!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!

  """
  summary of scoring progress, returns a comma separated string of ints for a five-tuple; <verified, unverified, scored, unscored, total_to_score>. This excludes any DQed competitors
  """
  scoring_progress: ScoringProgressNode!

  """
  summary of scoring progress, returns a list of two-tuples with <squad, scoring-progress> where scoring progress is comma separated string of ints for a five-tuple; <verified, unverified, scored, unscored, total_to_score>. This excludes any DQed competitors
  """
  squad_scoring_progress: [SquadScoringProgressNode!]!
  competitors_indexed(
    """
    all/no/yes as in all comps, no those without squad, yes those with squad
    """
    sqs: String! = "yes"
    shift_on: Int! = 1
    incl_dnf: Boolean! = false
    incl_dqed: Boolean! = false
  ): [CompetitorInterface!]!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_scorecard: ScoreCardInterface!
}

"""
PrecisionStage(id, number, name, venue, image, banner, banner_url, procedure, start_pos, firearm_condition, start_on, stop_on, penalties_notes, safety_angles, setup_notes, sort, included, _locked, created_by, created, updated_by, updated, lock_changed_by, lock_changed, event, strings, scoring, rounds, target, rounds_info, max_points, equipment, par_time, target_info, par_time_factor, scoring1, scoring2, scoring3, scoring4, scoring5, scoring6, scoring7, scoring8, scoring9, scoring10, rounds1, rounds2, rounds3, rounds4, rounds5, rounds6, rounds7, rounds8, rounds9, rounds10, target1, target2, target3, target4, target5, target6, target7, target8, target9, target10, _scoring_completed)
"""
type PrecisionStageNode implements StageInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!
  is_locked: Boolean!

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime
  scorecards: [ScoreCardInterface!]!

  """list of scorecards that are DQ'ed on stage"""
  scorecards_dq: [ScoreCardInterface!]!

  """list of scorecards with a warning on stage"""
  scorecards_w_warning: [ScoreCardInterface!]!
  scoring_completed: Decimal!
  get_next_stage: StageInterface!
  get_previous_stage: StageInterface!
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode!
  number: Int!

  """name/title of stage (not number), max 35 char"""
  name: String!

  """place/location textual description, max 64 char"""
  venue: String!
  image: DjangoImageType
  banner: DjangoImageType

  """300 char"""
  banner_url: String!

  """1000 char"""
  procedure: String!

  """1000 char"""
  start_pos: String!

  """500 char"""
  firearm_condition: String!

  """200 char"""
  start_on: String!

  """200 char"""
  stop_on: String!

  """500 char"""
  penalties_notes: String!

  """200 char"""
  safety_angles: String!

  """1000 char"""
  setup_notes: String!

  """Sort of stage, 4 char"""
  sort: String!

  """included in event results or not"""
  included: Boolean!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!

  """
  summary of scoring progress, returns a comma separated string of ints for a five-tuple; <verified, unverified, scored, unscored, total_to_score>. This excludes any DQed competitors
  """
  scoring_progress: ScoringProgressNode!

  """
  summary of scoring progress, returns a list of two-tuples with <squad, scoring-progress> where scoring progress is comma separated string of ints for a five-tuple; <verified, unverified, scored, unscored, total_to_score>. This excludes any DQed competitors
  """
  squad_scoring_progress: [SquadScoringProgressNode!]!
  competitors_indexed(
    """
    all/no/yes as in all comps, no those without squad, yes those with squad
    """
    sqs: String! = "yes"
    shift_on: Int! = 1
    incl_dnf: Boolean! = false
    incl_dqed: Boolean! = false
  ): [CompetitorInterface!]!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_scorecard: ScoreCardInterface!
  get_scoring_display: String!
  get_scoring1_display: String!
  get_scoring2_display: String!
  get_scoring3_display: String!
  get_scoring4_display: String!
  get_scoring5_display: String!
  get_scoring6_display: String!
  get_scoring7_display: String!
  get_scoring8_display: String!
  get_scoring9_display: String!
  get_scoring10_display: String!
  get_target_display: String!
  get_target1_display: String!
  get_target2_display: String!
  get_target3_display: String!
  get_target4_display: String!
  get_target5_display: String!
  get_target6_display: String!
  get_target7_display: String!
  get_target8_display: String!
  get_target9_display: String!
  get_target10_display: String!
  strings: Int!
  scoring: String!
  rounds: Int!
  target: String!
  rounds_info: String!
  max_points: Int!
  equipment: String!
  par_time: Decimal!
  target_info: String!
  scoring1: String!
  scoring2: String!
  scoring3: String!
  scoring4: String!
  scoring5: String!
  scoring6: String!
  scoring7: String!
  scoring8: String!
  scoring9: String!
  scoring10: String!
  rounds1: Int!
  rounds2: Int!
  rounds3: Int!
  rounds4: Int!
  rounds5: Int!
  rounds6: Int!
  rounds7: Int!
  rounds8: Int!
  rounds9: Int!
  rounds10: Int!
  target1: String!
  target2: String!
  target3: String!
  target4: String!
  target5: String!
  target6: String!
  target7: String!
  target8: String!
  target9: String!
  target10: String!

  """returns results as ordered of results for stage is allowed to view"""
  get_results(division: String = null, classification: String = null): [PrecisionStageResultNode!]!

  """returns all DQs for stage"""
  get_disqualified(division: String = null, classification: String = null): [PrecisionScoreCardNode!]!
  get_scoring_choices: [ChoiceNode!]!
  get_scoring1_choices: [ChoiceNode!]!
  get_scoring2_choices: [ChoiceNode!]!
  get_scoring3_choices: [ChoiceNode!]!
  get_scoring4_choices: [ChoiceNode!]!
  get_scoring5_choices: [ChoiceNode!]!
  get_scoring6_choices: [ChoiceNode!]!
  get_scoring7_choices: [ChoiceNode!]!
  get_scoring8_choices: [ChoiceNode!]!
  get_scoring9_choices: [ChoiceNode!]!
  get_scoring10_choices: [ChoiceNode!]!
  get_target_choices: [ChoiceNode!]!
  get_target1_choices: [ChoiceNode!]!
  get_target2_choices: [ChoiceNode!]!
  get_target3_choices: [ChoiceNode!]!
  get_target4_choices: [ChoiceNode!]!
  get_target5_choices: [ChoiceNode!]!
  get_target6_choices: [ChoiceNode!]!
  get_target7_choices: [ChoiceNode!]!
  get_target8_choices: [ChoiceNode!]!
  get_target9_choices: [ChoiceNode!]!
  get_target10_choices: [ChoiceNode!]!
}

"""Scorecard, place, percentage, points"""
type PrecisionStageResultNode {
  scorecard: PrecisionScoreCardNode
  place: Int
  points: Float
}

"""
PrecisionScoreCard(id, _locked, disqualified, created_by, created, updated_by, updated, lock_changed_by, lock_changed, signature, verified_by, verified, stage, competitor, points, decimal_points, time, tnh30, tnh15, hns, proc, decimal_score, deductions, score, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, zeroed, spotter, warning, dq_reason, comment)
"""
type PrecisionScoreCardNode implements ScoreCardInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!

  """returns full scoring history Versions"""
  get_scoring_history: [VersionNode!]!
  is_verified: Boolean!

  """has signature/image been used to signing (else PIN code used)"""
  is_verified_w_signature: Boolean!
  is_locked: Boolean!

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime

  """ISO-8601 formatted"""
  verified: DateTime

  """Supports scoring analytics on stage/scoring-rule"""
  supports_scoring_analytics: Boolean!

  """
  List of human-readable strings with scoring analytics info (help to improve)
  """
  get_scoring_analytics: [String!]!
  verified_by: ShooterNode!
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode!

  """Got DQ'ed"""
  disqualified: Boolean!
  signature: DjangoImageType

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!
  stage: PrecisionStageNode!
  competitor: PrecisionCompetitorNode!
  get_dq_reason_display: String!
  spotter: Boolean!
  points: Int!

  """Score for a PRS stage (both time and points)"""
  decimal_points: Decimal!
  time: Decimal!
  tnh30: Int!
  tnh15: Int!
  hns: Int!
  proc: Int!
  decimal_score: Decimal!
  deductions: Int!
  score: Int!
  s0: String!

  """
  For field precision only, each serie is X 10 9 8 7 6 5 4 3 2 1 0 M (10+ values) per target registered
  """
  s1: String!

  """
  For field precision only, each serie is X 10 9 8 7 6 5 4 3 2 1 0 M (10+ values) per target registered
  """
  s2: String!

  """
  For field precision only, each serie is X 10 9 8 7 6 5 4 3 2 1 0 M (10+ values) per target registered
  """
  s3: String!

  """
  For field precision only, each serie is X 10 9 8 7 6 5 4 3 2 1 0 M (10+ values) per target registered
  """
  s4: String!

  """
  For field precision only, each serie is X 10 9 8 7 6 5 4 3 2 1 0 M (10+ values) per target registered
  """
  s5: String!

  """
  For field precision only, each serie is X 10 9 8 7 6 5 4 3 2 1 0 M (10+ values) per target registered
  """
  s6: String!

  """
  For field precision only, each serie is X 10 9 8 7 6 5 4 3 2 1 0 M (10+ values) per target registered
  """
  s7: String!

  """
  For field precision only, each serie is X 10 9 8 7 6 5 4 3 2 1 0 M (10+ values) per target registered
  """
  s8: String!

  """
  For field precision only, each serie is X 10 9 8 7 6 5 4 3 2 1 0 M (10+ values) per target registered
  """
  s9: String!

  """
  For field precision only, each serie is X 10 9 8 7 6 5 4 3 2 1 0 M (10+ values) per target registered
  """
  s10: String!

  """
  For field precision only, each serie is X 10 9 8 7 6 5 4 3 2 1 0 M (10+ values) per target registered
  """
  s11: String!

  """
  For field precision only, each serie is X 10 9 8 7 6 5 4 3 2 1 0 M (10+ values) per target registered
  """
  s12: String!
  zeroed: Boolean!
  warning: Boolean!
  dq_reason: String!
  is_disqualified: Boolean!
  comment: String!
  get_dq_reason_choices: [ChoiceNode!]!
}

"""Precision Competitor (used in NRA, PRS, DMR"""
type PrecisionCompetitorNode implements CompetitorInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!

  """
  Returns true if all orders are paid *or* if self._paid = True (if there are no orders)
  """
  is_paid: Boolean!
  is_alread_logged: Boolean!
  is_locked: Boolean!

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime
  details: String!
  scorecards: [ScoreCardInterface!]!
  shooter: ShooterNode!
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode!
  get_club_display: String!
  get_club_short_display: String!
  get_sex_display: String!
  get_region_display: String!
  get_state_display: String!
  get_status_display: String!
  get_code_display: String!

  """max 30 char"""
  first_name: String!

  """max 30 char"""
  last_name: String!

  """value, 1 char"""
  sex: String!

  """max 300 char"""
  email: String!

  """ISO3166A3, 3 char. --- if no region or none"""
  region: String!

  """US state, 3 char"""
  state: String!

  """free text name of club, inferior to club_member if this is set"""
  club: String!

  """is for a club-member, can be used then to access club"""
  club_member: DjangoModelType

  """0 or blank means no number yet set, can take 5 min from registration"""
  number: Int!

  """registraion status, 1 char"""
  status: String!
  code: String!
  comment: String!

  """is competitor in prematch, default is False"""
  prematch: Boolean!

  """license number, 30 char"""
  license: String!
  notify: Boolean!

  """
  used to express if they did not show or stopped/left and this removed from scoring/results
  """
  did_not_finish: Boolean!
  has_accepted_event_data_policy: Boolean!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!

  """
  returns scoring version history iff not stages used in sport (i.e. scores stored directly per competitor)
  """
  scoring_history: [VersionNode!]!

  """
  assumes event uses stages & returns a comma separated string of ints for a five-tuple; <verified, unverified, scored, unscored, total_to_score>
  """
  scoring_progress: ScoringProgressNode!
  payments: [PaymentInterface!]!
  merchandize_orders: [MerchandizeOrderNode!]!

  """
  can current user update instance (e.g. are you allowed to update on yourself, or are you organizer)
  """
  can_current_update: Boolean!

  """
  ICE phone on format +CC-XXXXXXXXXX with leading country code dash phone number
  """
  ice_phone: String!

  """
  phone on format +CC-XXXXXXXXXX with leading country code dash phone number
  """
  phone: String!

  """
  returns result in visible format, if allowed to see for user making request
  """
  get_result_display: String!

  """country calling codes tuples"""
  get_cc_calling_choices: [ChoiceNode!]!
  get_sex_choices: [ChoiceNode!]!
  get_region_choices: [ChoiceNode!]!
  get_state_choices: [ChoiceNode!]!

  """returns list of id's to club-members is any that can compete for"""
  get_club_member_choices: [ChoiceNode!]!

  """returns list if admin/staff"""
  get_status_choices: [ChoiceNode!]!

  """returns list if admin/staff"""
  get_code_choices: [ChoiceNode!]!

  """
  returns list of avilable squads to choose from (if admin or approved competitor)
  """
  get_squad_choices: [ChoiceNode!]!

  """
  returns PIN code for self or if admin or staff of event (allows for off-line valuation if pin set)
  """
  pin: String!
  combined_place: Int!
  division_place: Int!
  category_place: Int!
  classification_place: Int!
  decimal_score: Decimal!
  combined_decimal_score: Decimal!
  decimal_points: Decimal!
  par_time_points: Decimal!
  total_time: Decimal!
  points: Int!
  deductions: Int!
  score: Int!
  prs_tiebreaker_time: Decimal!
  prs_tiebreaker_points: Decimal!
  event: PrecisionMatchNode!
  squad: PrecisionSquadNode
  get_division_display: String!
  get_category_display: String!
  get_classification_display: String!
  get_medal_display: String!
  get_dq_reason_display: String!
  division: String!
  category: String!
  classification: String!
  medal: String!
  prs_num: String!
  nra_num: String!
  issf_num: String!
  generic_num: String!
  accepted_in_team: Boolean!
  is_accepted_in_normal_team: Boolean!
  is_accepted_in_spotter_shooter_team: Boolean!

  """
  for precision only, comma separated for X 10 9 8 7 6 5 4 3 2 1 0 M (10+ values) per target registered
  """
  s0: String!

  """
  used when not using scorecards, comma separated for X 10 9 8 7 6 5 4 3 2 1 0 M (10+ values) per target registered
  """
  s1: String!

  """
  used when not using scorecards, comma separated for X 10 9 8 7 6 5 4 3 2 1 0 M (10+ values) per target registered
  """
  s2: String!

  """
  used when not using scorecards comma separated for X 10 9 8 7 6 5 4 3 2 1 0 M (10+ values) per target registered
  """
  s3: String!

  """
  used when not using scorecards, comma separated for X 10 9 8 7 6 5 4 3 2 1 0 M (10+ values) per target registered
  """
  s4: String!

  """
  used when not using scorecards, comma separated for X 10 9 8 7 6 5 4 3 2 1 0 M (10+ values) per target registered
  """
  s5: String!

  """
  used when not using scorecards, comma separated for X 10 9 8 7 6 5 4 3 2 1 0 M (10+ values) per target registered
  """
  s6: String!

  """
  used when not using scorecards, comma separated for X 10 9 8 7 6 5 4 3 2 1 0 M (10+ values) per target registered
  """
  s7: String!

  """
  used when not using scorecards, comma separated for X 10 9 8 7 6 5 4 3 2 1 0 M (10+ values) per target registered
  """
  s8: String!

  """
  used when not using scorecards, comma separated for X 10 9 8 7 6 5 4 3 2 1 0 M (10+ values) per target registered
  """
  s9: String!

  """
  used when not using scorecards, comma separated for X 10 9 8 7 6 5 4 3 2 1 0 M (10+ values) per target registered
  """
  s10: String!
  zeroed: Boolean!
  warning: Boolean!
  dq_reason: String!
  get_division_choices: [ChoiceNode!]!
  get_category_choices: [ChoiceNode!]!
  get_classification_choices: [ChoiceNode!]!
  get_medal_choices: [ChoiceNode!]!
  get_dq_reason_choices: [ChoiceNode!]!
}

"""
NordicStage(id, number, name, venue, image, banner, banner_url, procedure, start_pos, firearm_condition, start_on, stop_on, penalties_notes, safety_angles, setup_notes, sort, included, _locked, created_by, created, updated_by, updated, lock_changed_by, lock_changed, event, targets, inner_targets, falling_targets, precision_targets, rounds, scoring, time, time2, time3, time4, start_pos2, start_pos3, start_pos4, groups, shoot_off_num_participants, shoot_off_category, _scoring_completed)
"""
type NordicStageNode implements StageInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!
  is_locked: Boolean!

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime
  scorecards: [ScoreCardInterface!]!

  """list of scorecards that are DQ'ed on stage"""
  scorecards_dq: [ScoreCardInterface!]!

  """list of scorecards with a warning on stage"""
  scorecards_w_warning: [ScoreCardInterface!]!
  scoring_completed: Decimal!
  get_next_stage: StageInterface!
  get_previous_stage: StageInterface!
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode!
  number: Int!

  """name/title of stage (not number), max 35 char"""
  name: String!

  """place/location textual description, max 64 char"""
  venue: String!
  image: DjangoImageType
  banner: DjangoImageType

  """300 char"""
  banner_url: String!

  """1000 char"""
  procedure: String!

  """1000 char"""
  start_pos: String!

  """500 char"""
  firearm_condition: String!

  """200 char"""
  start_on: String!

  """200 char"""
  stop_on: String!

  """500 char"""
  penalties_notes: String!

  """200 char"""
  safety_angles: String!

  """1000 char"""
  setup_notes: String!

  """Sort of stage, 4 char"""
  sort: String!

  """included in event results or not"""
  included: Boolean!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!

  """
  summary of scoring progress, returns a comma separated string of ints for a five-tuple; <verified, unverified, scored, unscored, total_to_score>. This excludes any DQed competitors
  """
  scoring_progress: ScoringProgressNode!

  """
  summary of scoring progress, returns a list of two-tuples with <squad, scoring-progress> where scoring progress is comma separated string of ints for a five-tuple; <verified, unverified, scored, unscored, total_to_score>. This excludes any DQed competitors
  """
  squad_scoring_progress: [SquadScoringProgressNode!]!
  competitors_indexed(
    """
    all/no/yes as in all comps, no those without squad, yes those with squad
    """
    sqs: String! = "yes"
    shift_on: Int! = 1
    incl_dnf: Boolean! = false
    incl_dqed: Boolean! = false
  ): [CompetitorInterface!]!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_scorecard: ScoreCardInterface!
  get_scoring_display: String!
  get_shoot_off_category_display: String!
  targets: Int!
  inner_targets: Int!
  falling_targets: Int!
  precision_targets: Int!
  rounds: Int!
  scoring: String!
  time: Decimal!
  time2: Decimal!
  time3: Decimal!
  time4: Decimal!
  start_pos2: String!
  start_pos3: String!
  start_pos4: String!
  groups: Int!
  shoot_off_num_participants: Int!
  shoot_off_category: String!

  """returns results as ordered of results for stage is allowed to view"""
  get_results(weapon_group: String = null, competence_class: String = null, category: String = null): [NordicStageResultNode!]!

  """returns all DQs for stage"""
  get_disqualified(weapon_group: String = null, competence_class: String = null, category: String = null): [NordicScoreCardNode!]!
  get_scoring_choices: [ChoiceNode!]!
  get_shoot_off_category_choices: [ChoiceNode!]!
}

"""Scorecard, place, percentage, points"""
type NordicStageResultNode {
  scorecard: NordicScoreCardNode
  place: Int
  score: Int
}

"""
NordicScoreCard(id, _locked, disqualified, created_by, created, updated_by, updated, lock_changed_by, lock_changed, signature, verified_by, verified, stage, competitor, target_scores, precision_scores, precision_inner_scores, hits, inner_hits, targets_hit, precision_points, clay_25, dq_reason, warning, comment)
"""
type NordicScoreCardNode implements ScoreCardInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!

  """returns full scoring history Versions"""
  get_scoring_history: [VersionNode!]!
  is_verified: Boolean!

  """has signature/image been used to signing (else PIN code used)"""
  is_verified_w_signature: Boolean!
  is_locked: Boolean!

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime

  """ISO-8601 formatted"""
  verified: DateTime

  """Supports scoring analytics on stage/scoring-rule"""
  supports_scoring_analytics: Boolean!

  """
  List of human-readable strings with scoring analytics info (help to improve)
  """
  get_scoring_analytics: [String!]!
  verified_by: ShooterNode!
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode!

  """Got DQ'ed"""
  disqualified: Boolean!
  signature: DjangoImageType

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!
  stage: NordicStageNode!
  competitor: NordicCompetitorNode!
  get_dq_reason_display: String!
  target_scores: String!
  precision_scores: String!
  hits: Int!
  inner_hits: Int!
  targets_hit: Int!
  precision_points: Int!
  clay_25: String!
  dq_reason: String!
  warning: Boolean!
  comment: String!
  get_dq_reason_choices: [ChoiceNode!]!
}

"""Nordic Competitor (used in Compak, Sporting, Skeet, Fältskytte, RESUL)"""
type NordicCompetitorNode implements CompetitorInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!

  """
  Returns true if all orders are paid *or* if self._paid = True (if there are no orders)
  """
  is_paid: Boolean!
  is_alread_logged: Boolean!
  is_locked: Boolean!

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime
  details: String!
  scorecards: [ScoreCardInterface!]!
  shooter: ShooterNode!
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode!
  get_club_display: String!
  get_club_short_display: String!
  get_sex_display: String!
  get_region_display: String!
  get_state_display: String!
  get_status_display: String!
  get_code_display: String!

  """max 30 char"""
  first_name: String!

  """max 30 char"""
  last_name: String!

  """value, 1 char"""
  sex: String!

  """max 300 char"""
  email: String!

  """ISO3166A3, 3 char. --- if no region or none"""
  region: String!

  """US state, 3 char"""
  state: String!

  """free text name of club, inferior to club_member if this is set"""
  club: String!

  """is for a club-member, can be used then to access club"""
  club_member: DjangoModelType

  """0 or blank means no number yet set, can take 5 min from registration"""
  number: Int!

  """registraion status, 1 char"""
  status: String!
  code: String!
  comment: String!

  """is competitor in prematch, default is False"""
  prematch: Boolean!

  """license number, 30 char"""
  license: String!
  notify: Boolean!

  """
  used to express if they did not show or stopped/left and this removed from scoring/results
  """
  did_not_finish: Boolean!
  has_accepted_event_data_policy: Boolean!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!

  """
  returns scoring version history iff not stages used in sport (i.e. scores stored directly per competitor)
  """
  scoring_history: [VersionNode!]!

  """
  assumes event uses stages & returns a comma separated string of ints for a five-tuple; <verified, unverified, scored, unscored, total_to_score>
  """
  scoring_progress: ScoringProgressNode!
  payments: [PaymentInterface!]!
  merchandize_orders: [MerchandizeOrderNode!]!

  """
  can current user update instance (e.g. are you allowed to update on yourself, or are you organizer)
  """
  can_current_update: Boolean!

  """
  ICE phone on format +CC-XXXXXXXXXX with leading country code dash phone number
  """
  ice_phone: String!

  """
  phone on format +CC-XXXXXXXXXX with leading country code dash phone number
  """
  phone: String!

  """
  returns result in visible format, if allowed to see for user making request
  """
  get_result_display: String!

  """country calling codes tuples"""
  get_cc_calling_choices: [ChoiceNode!]!
  get_sex_choices: [ChoiceNode!]!
  get_region_choices: [ChoiceNode!]!
  get_state_choices: [ChoiceNode!]!

  """returns list of id's to club-members is any that can compete for"""
  get_club_member_choices: [ChoiceNode!]!

  """returns list if admin/staff"""
  get_status_choices: [ChoiceNode!]!

  """returns list if admin/staff"""
  get_code_choices: [ChoiceNode!]!

  """
  returns list of avilable squads to choose from (if admin or approved competitor)
  """
  get_squad_choices: [ChoiceNode!]!

  """
  returns PIN code for self or if admin or staff of event (allows for off-line valuation if pin set)
  """
  pin: String!
  place: Int!
  combined_place: Int!
  tot_hits: Int!
  tot_inner_hits: Int!
  tot_targets_hit: Int!
  tot_precision_points: Int!
  standard_medal: String!
  event: NordicMatchNode!
  squad: NordicSquadNode
  verified_by: ShooterNode!

  """ISO-8601 formatted"""
  verified: DateTime
  is_verified: Boolean!

  """has signature/image been used to signing (else PIN code used)"""
  is_verified_w_signature: Boolean!
  get_weapon_group_display: String!
  get_competence_class_display: String!
  get_category_display: String!
  get_classification_display: String!
  get_dq_reason_display: String!
  weapon_group: String!
  competence_class: String!
  category: String!
  classification: String!
  nordic_num: String!
  resul_id: String!
  issf_num: String!
  fitasc_id: String!
  weapon_name: String!
  s1_points: Int!
  s2_points: Int!
  s3_points: Int!
  s4_points: Int!
  s5_points: Int!
  s6_points: Int!
  s7_points: Int!
  s8_points: Int!
  s9_points: Int!
  s10_points: Int!
  s11_points: Int!
  s12_points: Int!
  s13_points: Int!
  s14_points: Int!
  s15_points: Int!
  s16_points: Int!
  so1_points: Int!
  so2_points: Int!
  so3_points: Int!
  so4_points: Int!
  so5_points: Int!
  so6_points: Int!
  so7_points: Int!
  so8_points: Int!
  so9_points: Int!
  so10_points: Int!
  s1: String!
  s2: String!
  s3: String!
  s4: String!
  s5: String!
  s6: String!
  s7: String!
  s8: String!
  s9: String!
  s10: String!
  s11: String!
  s12: String!
  s13: String!
  s14: String!
  s15: String!
  s16: String!
  so1: String!
  so2: String!
  so3: String!
  so4: String!
  so5: String!
  so6: String!
  so7: String!
  so8: String!
  so9: String!
  so10: String!
  warning: Boolean!
  signature: DjangoImageType
  dq_reason: String!
  score_comment: String!
  get_weapon_group_choices: [ChoiceNode!]!
  get_competence_class_choices: [ChoiceNode!]!
  get_category_choices: [ChoiceNode!]!
  get_classification_choices: [ChoiceNode!]!
  get_dq_reason_choices: [ChoiceNode!]!
}

"""SassMatch is used for SASS matches"""
type SassMatchNode implements EventInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!
  is_locked: Boolean!
  supports_rating: Boolean!
  is_rated: Boolean!

  """ISO-8601 formatted, when/if has been elo-rated"""
  rated: DateTime

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime

  """competitors that did not show/complete/finnish the event"""
  competitors_did_not_finish: [CompetitorInterface!]!
  competitors_approved_w_wo_results_wo_squad_not_dnf: [CompetitorInterface!]!
  competitors_approved_w_wo_results_not_dnf: [CompetitorInterface!]!

  """
  list of scorecards that are DQ'ed (if event used stages, else use competitors_dq)
  """
  scorecards_dq: [ScoreCardInterface!]!

  """
  list of competitors that are DQ'ed (if stages used, check scorecard for reason of DQ)
  """
  competitors_dq: [CompetitorInterface!]!

  """
  list of scorecards with warning (if event used stages, else use competitors_w_warning)
  """
  scorecards_w_warning: [ScoreCardInterface!]!

  """
  list of competitors a warning (if stages used, check scorecards for reason of warning)
  """
  competitors_w_warning: [CompetitorInterface!]!

  """ISO-8601 formatted"""
  starts: DateTime!

  """ISO-8601 formatted"""
  ends: DateTime

  """ISO-8601 formatted"""
  registration_starts: DateTime!

  """ISO-8601 formatted"""
  registration_closes: DateTime

  """ISO-8601 formatted"""
  squadding_starts: DateTime

  """ISO-8601 formatted"""
  pm_squadding_starts: DateTime

  """ISO-8601 formatted"""
  squadding_closes: DateTime
  short_url: String!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!
  minimum_rounds: Int!
  is_tournament_match: Boolean!
  is_component_match: Boolean!

  """
  Registration is only possible if registration date has started and not closed and the registration is open.
  Use this check to present if registration for a shooter shall be possible or not.
  """
  is_registration_possible: Boolean!
  is_squadding_possible: Boolean!
  is_pm_squadding_possible: Boolean!
  supports_bulk_scoring: Boolean!
  uses_stages: Boolean!
  uses_shoot_off_stages: Boolean!
  uses_strings: Boolean!
  number_of_strings: Boolean!
  number_of_rounds_per_string: Int!
  supports_shoot_off_strings: Boolean!
  do_index_competitor_when_scoring: Boolean!
  supports_standard_stages: Boolean!
  supports_score_string_for_squad: Boolean!
  supports_score_all_in_squad_at_stage: Boolean!
  is_premium_activated: Boolean!

  """returns list of RBAC roles for current user"""
  role_names: [String!]!

  """
  Returns True if the premium for event is fully paid or if 
  event is associated with a premium-org that has enable free-premium and small,
  not to many non-members and and fee not to high
  
  ** OR ** 
  
  the event has previoously been set to completed (under old premium valid things
  so we do not make them pay for old events)
  """
  is_premium_fully_valid: Boolean!
  has_geopos: Boolean!
  has_prematch: Boolean!

  """is prematch score included in overall results"""
  has_prematch_included: Boolean!
  uses_pin_verification: Boolean!
  uses_signature_verification: Boolean!
  scoring_completed: Decimal!

  """
  obfuscated id used when registering, only shown when reg possible or staff/admin of event to avoid bot-registrations
  """
  obfuscated_id: String!
  get_standard_stage_selection: [StandardStageInterface!]!
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode
  get_full_rule_display: String!
  get_full_level_display: String!
  get_prematch_display: String!
  get_status_display: String!
  get_registration_display: String!
  get_results_display: String!
  get_verify_using_display: String!
  get_region_display: String!
  get_currency_display: String!
  get_visibility_display: String!
  get_state_display: String!
  does_current_user_get_result: Boolean!
  number_of_prematch_competitors_registered: Int!
  number_of_prematch_competitors_waiting: Int!
  number_of_prematch_competitors_pending: Int!
  number_of_prematch_competitors_approved: Int!
  number_of_mainmatch_competitors_registered: Int!
  number_of_mainmatch_competitors_waiting: Int!
  number_of_mainmatch_competitors_pending: Int!
  number_of_mainmatch_competitors_approved: Int!
  competitors_unscored_list: [CompetitorInterface!]!
  prematch_competitors_registered: [CompetitorInterface!]!
  prematch_competitors: [CompetitorInterface!]!
  prematch_competitors_pending: [CompetitorInterface!]!
  prematch_competitors_approved: [CompetitorInterface!]!
  prematch_competitors_approved_wo_results: [CompetitorInterface!]!
  prematch_competitors_approved_w_wo_results: [CompetitorInterface!]!
  prematch_competitors_approved_w_wo_results_wo_squad: [CompetitorInterface!]!
  prematch_competitors_waiting: [CompetitorInterface!]!
  prematch_competitors_declined: [CompetitorInterface!]!
  prematch_competitors_deleted: [CompetitorInterface!]!
  mainmatch_competitors_registered: [CompetitorInterface!]!
  mainmatch_competitors: [CompetitorInterface!]!
  mainmatch_competitors_pending: [CompetitorInterface!]!
  mainmatch_competitors_approved: [CompetitorInterface!]!
  mainmatch_competitors_approved_wo_results: [CompetitorInterface!]!
  mainmatch_competitors_approved_w_wo_results: [CompetitorInterface!]!
  mainmatch_competitors_approved_w_wo_results_wo_squad: [CompetitorInterface!]!
  mainmatch_competitors_waiting: [CompetitorInterface!]!
  mainmatch_competitors_declined: [CompetitorInterface!]!
  mainmatch_competitors_deleted: [CompetitorInterface!]!
  group: DjangoModelType!
  organizer: OrganizationNode!
  accreditor: DjangoModelType
  accreditation_status: String!

  """name, max 50"""
  name: String!

  """max 600 char"""
  description: String!

  """max 800 char"""
  information: String!

  """max competitors in match or main match"""
  max_competitors: Int!

  """do we have a prematch, and is scoring included, 2 char"""
  prematch: String!

  """max competitors in pre-match, if used"""
  max_prematch_competitors: Int!

  """does event support teams"""
  allow_teams: Boolean!
  allows_spotter_shooter_teams: Boolean!

  """allow teams to edit and change members themself"""
  allow_team_self_management: Boolean!

  """team members in a team"""
  number_of_team_members: Int!

  """number of best scores used for team result"""
  result_from_team_members: Int!

  """max 2 char, status of even"""
  status: String!

  """status of registration, 2 char"""
  registration: String!

  """visibility of results, 2 char"""
  results: String!

  """verification method, 3 char"""
  verify_using: String!

  """
  defines family of sport (but you need rule+subrule and sometimes firearm to decide explicit sport), e.g. ipsc-famliy is IPSC, USPSA, SRA etc and sub-rule separates these
  """
  rule: String!

  """region, ISO31663A3, 3 char"""
  region: String!

  """currency, ISO4217, 3 char"""
  currency: String!

  """relevant url for event, max 300 char"""
  url: String!

  """display or link textfor url, max 20 char"""
  url_display: String!
  gcal_uid: String!

  """can a user register more then once or not"""
  multiple_reg_allowed: Boolean!

  """visibility of event, 3 char"""
  visibility: String!

  """US Stage choices, 3 char max"""
  state: String!

  """place/location textual description, max 64 char"""
  venue: String!

  """format as 5,5 decimal"""
  lat: Decimal

  """format as 5,5 decimal"""
  lng: Decimal
  image: DjangoImageType
  banner: DjangoImageType
  banner_url: String!
  f1: DjangoFileType
  f2: DjangoFileType
  f3: DjangoFileType
  f4: DjangoFileType
  f5: DjangoFileType
  f6: DjangoFileType
  f1_display: String!
  f2_display: String!
  f3_display: String!
  f4_display: String!
  f5_display: String!
  f6_display: String!
  has_accepted_event_data_ass_agreement: Boolean!

  """
  Event has enabled free Premium, requires that Organization associated with event allows for this (free within limits)
  """
  organization_enabled_event_premium: Boolean!
  comment: String!
  competitor_payment: String!
  total_net: Decimal!
  total_tax: Decimal!
  total_fee: Decimal!
  premium_currency: String!
  payment_methods: String!

  """for 3rd party apps, never used within SSI or accessed, max 500 char"""
  custom_api: String!
  competitors: [CompetitorInterface!]!

  """competitors indexed typically on stage-number shooting on"""
  competitors_indexed(
    """
    all/no/yes as in all comps, no those without squad, yes those with squad
    """
    sqs: String!
    shift_on: Int! = 1
    incl_dnf: Boolean! = false
    incl_dqed: Boolean! = false
  ): [CompetitorInterface!]!

  """
  list of possible deviating scores as a tuple <scorecard, alert-text message>
  """
  deviating_scorecards: [DeviatingScoreCardNode!]!

  """
  list of possible deviating competitors as a tuple <scorecard, alert-text message> (only for non-stage events)
  """
  deviating_competitors: [DeviatingCompetitorNode!]!

  """available standard-stages for sport, to be cloned if to be used"""
  available_standard_stages: [StandardStageInterface!]!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_competitor: CompetitorInterface!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_stage: StageInterface!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_team: TeamInterface!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_squad: SquadInterface!
  is_current_role_admin: Boolean!
  is_current_role_staff: Boolean!
  is_current_role_assistant: Boolean!

  """returns all event order payments (typically by competitors)"""
  order_payments: [PaymentInterface!]!

  """returns all event premium payments (for premium features of even)"""
  premium_payments: [PaymentInterface!]!
  merchandizes: [MerchandizeNode!]!
  merchandizes_on_registration: [MerchandizeNode!]!
  merchandize_orders: [MerchandizeOrderNode!]!
  component_matches: [ComponentMatchInterface!]!
  serie_type: String!
  get_prematch_choices: [ChoiceNode!]!
  get_status_choices: [ChoiceNode!]!
  get_registration_choices: [ChoiceNode!]!
  get_results_choices: [ChoiceNode!]!
  get_verify_using_choices: [ChoiceNode!]!
  get_region_choices: [ChoiceNode!]!
  get_currency_choices: [ChoiceNode!]!
  get_visibility_choices: [ChoiceNode!]!
  get_state_choices: [ChoiceNode!]!

  """returns list with id to organizations as values and name as display"""
  get_organizer_choices: [ChoiceNode!]!
  firearms: String!
  sub_rule: String!

  """stages in event"""
  stages: [StageInterface!]!
  squads: [SquadInterface!]!
  teams: [TeamInterface!]
  get_level_display: String!
  get_scoring_display: String!
  level: String!
  scoring: String!
  main_cat: String!
  side_cat: String!
  long_cat: String!
  mounted_cat: String!

  """
  Returns a list of tuples <competitor, place, time, points>                                             for cat or Combined. Only if allowed to see  results
  """
  get_results(category: String = null): [SassMatchResultNode!]!

  """Returns a list with ScoreCards that are disqualified in event"""
  get_disqualified(category: String = null): [SassScoreCardNode!]!
  get_level_choices: [ChoiceNode!]!
  get_scoring_choices: [ChoiceNode!]!
}

"""(competitor, match_place, match_time, match_points)."""
type SassMatchResultNode {
  competitor: SassCompetitorNode
  place: Int
  time: Float
  points: Float
}

"""
NordicMatch is used for used in Compak, Sporting, Skeet, Fältskytte, RESUL
"""
type NordicMatchNode implements EventInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!
  is_locked: Boolean!
  supports_rating: Boolean!
  is_rated: Boolean!

  """ISO-8601 formatted, when/if has been elo-rated"""
  rated: DateTime

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime

  """competitors that did not show/complete/finnish the event"""
  competitors_did_not_finish: [CompetitorInterface!]!
  competitors_approved_w_wo_results_wo_squad_not_dnf: [CompetitorInterface!]!
  competitors_approved_w_wo_results_not_dnf: [CompetitorInterface!]!

  """
  list of scorecards that are DQ'ed (if event used stages, else use competitors_dq)
  """
  scorecards_dq: [ScoreCardInterface!]!

  """
  list of competitors that are DQ'ed (if stages used, check scorecard for reason of DQ)
  """
  competitors_dq: [CompetitorInterface!]!

  """
  list of scorecards with warning (if event used stages, else use competitors_w_warning)
  """
  scorecards_w_warning: [ScoreCardInterface!]!

  """
  list of competitors a warning (if stages used, check scorecards for reason of warning)
  """
  competitors_w_warning: [CompetitorInterface!]!

  """ISO-8601 formatted"""
  starts: DateTime!

  """ISO-8601 formatted"""
  ends: DateTime

  """ISO-8601 formatted"""
  registration_starts: DateTime!

  """ISO-8601 formatted"""
  registration_closes: DateTime

  """ISO-8601 formatted"""
  squadding_starts: DateTime

  """ISO-8601 formatted"""
  pm_squadding_starts: DateTime

  """ISO-8601 formatted"""
  squadding_closes: DateTime
  short_url: String!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!
  minimum_rounds: Int!
  is_tournament_match: Boolean!
  is_component_match: Boolean!

  """
  Registration is only possible if registration date has started and not closed and the registration is open.
  Use this check to present if registration for a shooter shall be possible or not.
  """
  is_registration_possible: Boolean!
  is_squadding_possible: Boolean!
  is_pm_squadding_possible: Boolean!
  supports_bulk_scoring: Boolean!
  uses_stages: Boolean!
  uses_shoot_off_stages: Boolean!
  uses_strings: Boolean!
  number_of_strings: Boolean!
  number_of_rounds_per_string: Int!
  supports_shoot_off_strings: Boolean!
  do_index_competitor_when_scoring: Boolean!
  supports_standard_stages: Boolean!
  supports_score_string_for_squad: Boolean!
  supports_score_all_in_squad_at_stage: Boolean!
  is_premium_activated: Boolean!

  """returns list of RBAC roles for current user"""
  role_names: [String!]!

  """
  Returns True if the premium for event is fully paid or if 
  event is associated with a premium-org that has enable free-premium and small,
  not to many non-members and and fee not to high
  
  ** OR ** 
  
  the event has previoously been set to completed (under old premium valid things
  so we do not make them pay for old events)
  """
  is_premium_fully_valid: Boolean!
  has_geopos: Boolean!
  has_prematch: Boolean!

  """is prematch score included in overall results"""
  has_prematch_included: Boolean!
  uses_pin_verification: Boolean!
  uses_signature_verification: Boolean!
  scoring_completed: Decimal!

  """
  obfuscated id used when registering, only shown when reg possible or staff/admin of event to avoid bot-registrations
  """
  obfuscated_id: String!
  get_standard_stage_selection: [StandardStageInterface!]!
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode
  get_full_rule_display: String!
  get_full_level_display: String!
  get_prematch_display: String!
  get_status_display: String!
  get_registration_display: String!
  get_results_display: String!
  get_verify_using_display: String!
  get_region_display: String!
  get_currency_display: String!
  get_visibility_display: String!
  get_state_display: String!
  does_current_user_get_result: Boolean!
  number_of_prematch_competitors_registered: Int!
  number_of_prematch_competitors_waiting: Int!
  number_of_prematch_competitors_pending: Int!
  number_of_prematch_competitors_approved: Int!
  number_of_mainmatch_competitors_registered: Int!
  number_of_mainmatch_competitors_waiting: Int!
  number_of_mainmatch_competitors_pending: Int!
  number_of_mainmatch_competitors_approved: Int!
  competitors_unscored_list: [CompetitorInterface!]!
  prematch_competitors_registered: [CompetitorInterface!]!
  prematch_competitors: [CompetitorInterface!]!
  prematch_competitors_pending: [CompetitorInterface!]!
  prematch_competitors_approved: [CompetitorInterface!]!
  prematch_competitors_approved_wo_results: [CompetitorInterface!]!
  prematch_competitors_approved_w_wo_results: [CompetitorInterface!]!
  prematch_competitors_approved_w_wo_results_wo_squad: [CompetitorInterface!]!
  prematch_competitors_waiting: [CompetitorInterface!]!
  prematch_competitors_declined: [CompetitorInterface!]!
  prematch_competitors_deleted: [CompetitorInterface!]!
  mainmatch_competitors_registered: [CompetitorInterface!]!
  mainmatch_competitors: [CompetitorInterface!]!
  mainmatch_competitors_pending: [CompetitorInterface!]!
  mainmatch_competitors_approved: [CompetitorInterface!]!
  mainmatch_competitors_approved_wo_results: [CompetitorInterface!]!
  mainmatch_competitors_approved_w_wo_results: [CompetitorInterface!]!
  mainmatch_competitors_approved_w_wo_results_wo_squad: [CompetitorInterface!]!
  mainmatch_competitors_waiting: [CompetitorInterface!]!
  mainmatch_competitors_declined: [CompetitorInterface!]!
  mainmatch_competitors_deleted: [CompetitorInterface!]!
  group: DjangoModelType!
  organizer: OrganizationNode!
  accreditor: DjangoModelType
  accreditation_status: String!

  """name, max 50"""
  name: String!

  """max 600 char"""
  description: String!

  """max 800 char"""
  information: String!

  """max competitors in match or main match"""
  max_competitors: Int!

  """do we have a prematch, and is scoring included, 2 char"""
  prematch: String!

  """max competitors in pre-match, if used"""
  max_prematch_competitors: Int!

  """does event support teams"""
  allow_teams: Boolean!
  allows_spotter_shooter_teams: Boolean!

  """allow teams to edit and change members themself"""
  allow_team_self_management: Boolean!

  """team members in a team"""
  number_of_team_members: Int!

  """number of best scores used for team result"""
  result_from_team_members: Int!

  """max 2 char, status of even"""
  status: String!

  """status of registration, 2 char"""
  registration: String!

  """visibility of results, 2 char"""
  results: String!

  """verification method, 3 char"""
  verify_using: String!

  """
  defines family of sport (but you need rule+subrule and sometimes firearm to decide explicit sport), e.g. ipsc-famliy is IPSC, USPSA, SRA etc and sub-rule separates these
  """
  rule: String!

  """region, ISO31663A3, 3 char"""
  region: String!

  """currency, ISO4217, 3 char"""
  currency: String!

  """relevant url for event, max 300 char"""
  url: String!

  """display or link textfor url, max 20 char"""
  url_display: String!
  gcal_uid: String!

  """can a user register more then once or not"""
  multiple_reg_allowed: Boolean!

  """visibility of event, 3 char"""
  visibility: String!

  """US Stage choices, 3 char max"""
  state: String!

  """place/location textual description, max 64 char"""
  venue: String!

  """format as 5,5 decimal"""
  lat: Decimal

  """format as 5,5 decimal"""
  lng: Decimal
  image: DjangoImageType
  banner: DjangoImageType
  banner_url: String!
  f1: DjangoFileType
  f2: DjangoFileType
  f3: DjangoFileType
  f4: DjangoFileType
  f5: DjangoFileType
  f6: DjangoFileType
  f1_display: String!
  f2_display: String!
  f3_display: String!
  f4_display: String!
  f5_display: String!
  f6_display: String!
  has_accepted_event_data_ass_agreement: Boolean!

  """
  Event has enabled free Premium, requires that Organization associated with event allows for this (free within limits)
  """
  organization_enabled_event_premium: Boolean!
  comment: String!
  competitor_payment: String!
  total_net: Decimal!
  total_tax: Decimal!
  total_fee: Decimal!
  premium_currency: String!
  payment_methods: String!

  """for 3rd party apps, never used within SSI or accessed, max 500 char"""
  custom_api: String!
  competitors: [CompetitorInterface!]!

  """competitors indexed typically on stage-number shooting on"""
  competitors_indexed(
    """
    all/no/yes as in all comps, no those without squad, yes those with squad
    """
    sqs: String!
    shift_on: Int! = 1
    incl_dnf: Boolean! = false
    incl_dqed: Boolean! = false
  ): [CompetitorInterface!]!

  """
  list of possible deviating scores as a tuple <scorecard, alert-text message>
  """
  deviating_scorecards: [DeviatingScoreCardNode!]!

  """
  list of possible deviating competitors as a tuple <scorecard, alert-text message> (only for non-stage events)
  """
  deviating_competitors: [DeviatingCompetitorNode!]!

  """available standard-stages for sport, to be cloned if to be used"""
  available_standard_stages: [StandardStageInterface!]!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_competitor: CompetitorInterface!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_stage: StageInterface!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_team: TeamInterface!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_squad: SquadInterface!
  is_current_role_admin: Boolean!
  is_current_role_staff: Boolean!
  is_current_role_assistant: Boolean!

  """returns all event order payments (typically by competitors)"""
  order_payments: [PaymentInterface!]!

  """returns all event premium payments (for premium features of even)"""
  premium_payments: [PaymentInterface!]!
  merchandizes: [MerchandizeNode!]!
  merchandizes_on_registration: [MerchandizeNode!]!
  merchandize_orders: [MerchandizeOrderNode!]!
  component_matches: [ComponentMatchInterface!]!
  serie_type: String!
  get_prematch_choices: [ChoiceNode!]!
  get_status_choices: [ChoiceNode!]!
  get_registration_choices: [ChoiceNode!]!
  get_results_choices: [ChoiceNode!]!
  get_verify_using_choices: [ChoiceNode!]!
  get_region_choices: [ChoiceNode!]!
  get_currency_choices: [ChoiceNode!]!
  get_visibility_choices: [ChoiceNode!]!
  get_state_choices: [ChoiceNode!]!

  """returns list with id to organizations as values and name as display"""
  get_organizer_choices: [ChoiceNode!]!
  firearms: String!
  sub_rule: String!

  """stages in event"""
  stages: [StageInterface!]!
  squads: [SquadInterface!]!
  teams: [TeamInterface!]
  get_level_display: String!
  get_weapon_groups_display: String!
  get_competence_classes_display: String!
  get_categories_display: String!
  get_string_scoring_format_display: String!
  level: String!
  weapon_groups: String!
  competence_classes: String!
  categories: String!
  do_std_medals: Boolean!
  precision_strings: Int!
  precision_shots_per_string: Int!
  string_scoring_format: String!

  """
  Returns a list of tuples <competitor, score and medall                                             Only if allowed to see  results
  """
  get_results(weapon_group: String = null, competence_class: String = null, category: String = null): [NordicMatchResultNode!]!

  """Returns a list with ScoreCards that are disqualified in event"""
  get_disqualified(weapon_group: String = null, competence_class: String = null, category: String = null): [NordicScoreCardNode!]!
  get_level_choices: [ChoiceNode!]!
  get_weapon_groups_choices: [ChoiceNode!]!
  get_competence_classes_choices: [ChoiceNode!]!
  get_categories_choices: [ChoiceNode!]!
  get_string_scoring_format_choices: [ChoiceNode!]!
}

"""<competitor, points, medal>"""
type NordicMatchResultNode {
  competitor: NordicCompetitorNode
  place: Int
  score: Int
  medal: String
}

"""PrecisionMatch used for NRA, PRS, DMR matches"""
type PrecisionMatchNode implements EventInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!
  is_locked: Boolean!
  supports_rating: Boolean!
  is_rated: Boolean!

  """ISO-8601 formatted, when/if has been elo-rated"""
  rated: DateTime

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime

  """competitors that did not show/complete/finnish the event"""
  competitors_did_not_finish: [CompetitorInterface!]!
  competitors_approved_w_wo_results_wo_squad_not_dnf: [CompetitorInterface!]!
  competitors_approved_w_wo_results_not_dnf: [CompetitorInterface!]!

  """
  list of scorecards that are DQ'ed (if event used stages, else use competitors_dq)
  """
  scorecards_dq: [ScoreCardInterface!]!

  """
  list of competitors that are DQ'ed (if stages used, check scorecard for reason of DQ)
  """
  competitors_dq: [CompetitorInterface!]!

  """
  list of scorecards with warning (if event used stages, else use competitors_w_warning)
  """
  scorecards_w_warning: [ScoreCardInterface!]!

  """
  list of competitors a warning (if stages used, check scorecards for reason of warning)
  """
  competitors_w_warning: [CompetitorInterface!]!

  """ISO-8601 formatted"""
  starts: DateTime!

  """ISO-8601 formatted"""
  ends: DateTime

  """ISO-8601 formatted"""
  registration_starts: DateTime!

  """ISO-8601 formatted"""
  registration_closes: DateTime

  """ISO-8601 formatted"""
  squadding_starts: DateTime

  """ISO-8601 formatted"""
  pm_squadding_starts: DateTime

  """ISO-8601 formatted"""
  squadding_closes: DateTime
  short_url: String!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!
  minimum_rounds: Int!
  is_tournament_match: Boolean!
  is_component_match: Boolean!

  """
  Registration is only possible if registration date has started and not closed and the registration is open.
  Use this check to present if registration for a shooter shall be possible or not.
  """
  is_registration_possible: Boolean!
  is_squadding_possible: Boolean!
  is_pm_squadding_possible: Boolean!
  supports_bulk_scoring: Boolean!
  uses_stages: Boolean!
  uses_shoot_off_stages: Boolean!
  uses_strings: Boolean!
  number_of_strings: Boolean!
  number_of_rounds_per_string: Int!
  supports_shoot_off_strings: Boolean!
  do_index_competitor_when_scoring: Boolean!
  supports_standard_stages: Boolean!
  supports_score_string_for_squad: Boolean!
  supports_score_all_in_squad_at_stage: Boolean!
  is_premium_activated: Boolean!

  """returns list of RBAC roles for current user"""
  role_names: [String!]!

  """
  Returns True if the premium for event is fully paid or if 
  event is associated with a premium-org that has enable free-premium and small,
  not to many non-members and and fee not to high
  
  ** OR ** 
  
  the event has previoously been set to completed (under old premium valid things
  so we do not make them pay for old events)
  """
  is_premium_fully_valid: Boolean!
  has_geopos: Boolean!
  has_prematch: Boolean!

  """is prematch score included in overall results"""
  has_prematch_included: Boolean!
  uses_pin_verification: Boolean!
  uses_signature_verification: Boolean!
  scoring_completed: Decimal!

  """
  obfuscated id used when registering, only shown when reg possible or staff/admin of event to avoid bot-registrations
  """
  obfuscated_id: String!
  get_standard_stage_selection: [StandardStageInterface!]!
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode
  get_full_rule_display: String!
  get_full_level_display: String!
  get_prematch_display: String!
  get_status_display: String!
  get_registration_display: String!
  get_results_display: String!
  get_verify_using_display: String!
  get_region_display: String!
  get_currency_display: String!
  get_visibility_display: String!
  get_state_display: String!
  does_current_user_get_result: Boolean!
  number_of_prematch_competitors_registered: Int!
  number_of_prematch_competitors_waiting: Int!
  number_of_prematch_competitors_pending: Int!
  number_of_prematch_competitors_approved: Int!
  number_of_mainmatch_competitors_registered: Int!
  number_of_mainmatch_competitors_waiting: Int!
  number_of_mainmatch_competitors_pending: Int!
  number_of_mainmatch_competitors_approved: Int!
  competitors_unscored_list: [CompetitorInterface!]!
  prematch_competitors_registered: [CompetitorInterface!]!
  prematch_competitors: [CompetitorInterface!]!
  prematch_competitors_pending: [CompetitorInterface!]!
  prematch_competitors_approved: [CompetitorInterface!]!
  prematch_competitors_approved_wo_results: [CompetitorInterface!]!
  prematch_competitors_approved_w_wo_results: [CompetitorInterface!]!
  prematch_competitors_approved_w_wo_results_wo_squad: [CompetitorInterface!]!
  prematch_competitors_waiting: [CompetitorInterface!]!
  prematch_competitors_declined: [CompetitorInterface!]!
  prematch_competitors_deleted: [CompetitorInterface!]!
  mainmatch_competitors_registered: [CompetitorInterface!]!
  mainmatch_competitors: [CompetitorInterface!]!
  mainmatch_competitors_pending: [CompetitorInterface!]!
  mainmatch_competitors_approved: [CompetitorInterface!]!
  mainmatch_competitors_approved_wo_results: [CompetitorInterface!]!
  mainmatch_competitors_approved_w_wo_results: [CompetitorInterface!]!
  mainmatch_competitors_approved_w_wo_results_wo_squad: [CompetitorInterface!]!
  mainmatch_competitors_waiting: [CompetitorInterface!]!
  mainmatch_competitors_declined: [CompetitorInterface!]!
  mainmatch_competitors_deleted: [CompetitorInterface!]!
  group: DjangoModelType!
  organizer: OrganizationNode!
  accreditor: DjangoModelType
  accreditation_status: String!

  """name, max 50"""
  name: String!

  """max 600 char"""
  description: String!

  """max 800 char"""
  information: String!

  """max competitors in match or main match"""
  max_competitors: Int!

  """do we have a prematch, and is scoring included, 2 char"""
  prematch: String!

  """max competitors in pre-match, if used"""
  max_prematch_competitors: Int!

  """does event support teams"""
  allow_teams: Boolean!
  allows_spotter_shooter_teams: Boolean!

  """allow teams to edit and change members themself"""
  allow_team_self_management: Boolean!

  """team members in a team"""
  number_of_team_members: Int!

  """number of best scores used for team result"""
  result_from_team_members: Int!

  """max 2 char, status of even"""
  status: String!

  """status of registration, 2 char"""
  registration: String!

  """visibility of results, 2 char"""
  results: String!

  """verification method, 3 char"""
  verify_using: String!

  """
  defines family of sport (but you need rule+subrule and sometimes firearm to decide explicit sport), e.g. ipsc-famliy is IPSC, USPSA, SRA etc and sub-rule separates these
  """
  rule: String!

  """region, ISO31663A3, 3 char"""
  region: String!

  """currency, ISO4217, 3 char"""
  currency: String!

  """relevant url for event, max 300 char"""
  url: String!

  """display or link textfor url, max 20 char"""
  url_display: String!
  gcal_uid: String!

  """can a user register more then once or not"""
  multiple_reg_allowed: Boolean!

  """visibility of event, 3 char"""
  visibility: String!

  """US Stage choices, 3 char max"""
  state: String!

  """place/location textual description, max 64 char"""
  venue: String!

  """format as 5,5 decimal"""
  lat: Decimal

  """format as 5,5 decimal"""
  lng: Decimal
  image: DjangoImageType
  banner: DjangoImageType
  banner_url: String!
  f1: DjangoFileType
  f2: DjangoFileType
  f3: DjangoFileType
  f4: DjangoFileType
  f5: DjangoFileType
  f6: DjangoFileType
  f1_display: String!
  f2_display: String!
  f3_display: String!
  f4_display: String!
  f5_display: String!
  f6_display: String!
  has_accepted_event_data_ass_agreement: Boolean!

  """
  Event has enabled free Premium, requires that Organization associated with event allows for this (free within limits)
  """
  organization_enabled_event_premium: Boolean!
  comment: String!
  competitor_payment: String!
  total_net: Decimal!
  total_tax: Decimal!
  total_fee: Decimal!
  premium_currency: String!
  payment_methods: String!

  """for 3rd party apps, never used within SSI or accessed, max 500 char"""
  custom_api: String!
  competitors: [CompetitorInterface!]!

  """competitors indexed typically on stage-number shooting on"""
  competitors_indexed(
    """
    all/no/yes as in all comps, no those without squad, yes those with squad
    """
    sqs: String!
    shift_on: Int! = 1
    incl_dnf: Boolean! = false
    incl_dqed: Boolean! = false
  ): [CompetitorInterface!]!

  """
  list of possible deviating scores as a tuple <scorecard, alert-text message>
  """
  deviating_scorecards: [DeviatingScoreCardNode!]!

  """
  list of possible deviating competitors as a tuple <scorecard, alert-text message> (only for non-stage events)
  """
  deviating_competitors: [DeviatingCompetitorNode!]!

  """available standard-stages for sport, to be cloned if to be used"""
  available_standard_stages: [StandardStageInterface!]!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_competitor: CompetitorInterface!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_stage: StageInterface!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_team: TeamInterface!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_squad: SquadInterface!
  is_current_role_admin: Boolean!
  is_current_role_staff: Boolean!
  is_current_role_assistant: Boolean!

  """returns all event order payments (typically by competitors)"""
  order_payments: [PaymentInterface!]!

  """returns all event premium payments (for premium features of even)"""
  premium_payments: [PaymentInterface!]!
  merchandizes: [MerchandizeNode!]!
  merchandizes_on_registration: [MerchandizeNode!]!
  merchandize_orders: [MerchandizeOrderNode!]!
  component_matches: [ComponentMatchInterface!]!
  serie_type: String!
  get_prematch_choices: [ChoiceNode!]!
  get_status_choices: [ChoiceNode!]!
  get_registration_choices: [ChoiceNode!]!
  get_results_choices: [ChoiceNode!]!
  get_verify_using_choices: [ChoiceNode!]!
  get_region_choices: [ChoiceNode!]!
  get_currency_choices: [ChoiceNode!]!
  get_visibility_choices: [ChoiceNode!]!
  get_state_choices: [ChoiceNode!]!

  """returns list with id to organizations as values and name as display"""
  get_organizer_choices: [ChoiceNode!]!
  firearms: String!
  sub_rule: String!

  """stages in event"""
  stages: [StageInterface!]!
  squads: [SquadInterface!]!
  teams: [TeamInterface!]
  get_level_display: String!
  get_divisions_display: String!
  level: String!
  divisions: String!

  """
  Returns a list of tuples <competitor, score and total-points down                                             for div and/or cat or Combined. Only if allowed to see  results
  """
  get_results(division: String = null, classification: String = null): [PrecisionMatchResultNode!]!

  """Returns a list with ScoreCards that are disqualified in event"""
  get_disqualified(division: String = null, classification: String = null): [PrecisionScoreCardNode!]!
  get_level_choices: [ChoiceNode!]!
  get_division_choices: [ChoiceNode!]!
}

"Results is ordered list of tuples <competitor, points, medal>\n        *or* for PRS <competitor, match-points-of-100, points>\n    "
type PrecisionMatchResultNode {
  competitor: PrecisionCompetitorNode
  place: Int
  points: Float
  points_100: Float
  medal: String
}

"""
GenericMatch used for generic sport shooting matches (no rule set really)
"""
type GenericMatchNode implements EventInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!
  is_locked: Boolean!
  supports_rating: Boolean!
  is_rated: Boolean!

  """ISO-8601 formatted, when/if has been elo-rated"""
  rated: DateTime

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime

  """competitors that did not show/complete/finnish the event"""
  competitors_did_not_finish: [CompetitorInterface!]!
  competitors_approved_w_wo_results_wo_squad_not_dnf: [CompetitorInterface!]!
  competitors_approved_w_wo_results_not_dnf: [CompetitorInterface!]!

  """
  list of scorecards that are DQ'ed (if event used stages, else use competitors_dq)
  """
  scorecards_dq: [ScoreCardInterface!]!

  """
  list of competitors that are DQ'ed (if stages used, check scorecard for reason of DQ)
  """
  competitors_dq: [CompetitorInterface!]!

  """
  list of scorecards with warning (if event used stages, else use competitors_w_warning)
  """
  scorecards_w_warning: [ScoreCardInterface!]!

  """
  list of competitors a warning (if stages used, check scorecards for reason of warning)
  """
  competitors_w_warning: [CompetitorInterface!]!

  """ISO-8601 formatted"""
  starts: DateTime!

  """ISO-8601 formatted"""
  ends: DateTime

  """ISO-8601 formatted"""
  registration_starts: DateTime!

  """ISO-8601 formatted"""
  registration_closes: DateTime

  """ISO-8601 formatted"""
  squadding_starts: DateTime

  """ISO-8601 formatted"""
  pm_squadding_starts: DateTime

  """ISO-8601 formatted"""
  squadding_closes: DateTime
  short_url: String!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!
  minimum_rounds: Int!
  is_tournament_match: Boolean!
  is_component_match: Boolean!

  """
  Registration is only possible if registration date has started and not closed and the registration is open.
  Use this check to present if registration for a shooter shall be possible or not.
  """
  is_registration_possible: Boolean!
  is_squadding_possible: Boolean!
  is_pm_squadding_possible: Boolean!
  supports_bulk_scoring: Boolean!
  uses_stages: Boolean!
  uses_shoot_off_stages: Boolean!
  uses_strings: Boolean!
  number_of_strings: Boolean!
  number_of_rounds_per_string: Int!
  supports_shoot_off_strings: Boolean!
  do_index_competitor_when_scoring: Boolean!
  supports_standard_stages: Boolean!
  supports_score_string_for_squad: Boolean!
  supports_score_all_in_squad_at_stage: Boolean!
  is_premium_activated: Boolean!

  """returns list of RBAC roles for current user"""
  role_names: [String!]!

  """
  Returns True if the premium for event is fully paid or if 
  event is associated with a premium-org that has enable free-premium and small,
  not to many non-members and and fee not to high
  
  ** OR ** 
  
  the event has previoously been set to completed (under old premium valid things
  so we do not make them pay for old events)
  """
  is_premium_fully_valid: Boolean!
  has_geopos: Boolean!
  has_prematch: Boolean!

  """is prematch score included in overall results"""
  has_prematch_included: Boolean!
  uses_pin_verification: Boolean!
  uses_signature_verification: Boolean!
  scoring_completed: Decimal!

  """
  obfuscated id used when registering, only shown when reg possible or staff/admin of event to avoid bot-registrations
  """
  obfuscated_id: String!
  get_standard_stage_selection: [StandardStageInterface!]!
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode
  get_full_rule_display: String!
  get_full_level_display: String!
  get_prematch_display: String!
  get_status_display: String!
  get_registration_display: String!
  get_results_display: String!
  get_verify_using_display: String!
  get_region_display: String!
  get_currency_display: String!
  get_visibility_display: String!
  get_state_display: String!
  does_current_user_get_result: Boolean!
  number_of_prematch_competitors_registered: Int!
  number_of_prematch_competitors_waiting: Int!
  number_of_prematch_competitors_pending: Int!
  number_of_prematch_competitors_approved: Int!
  number_of_mainmatch_competitors_registered: Int!
  number_of_mainmatch_competitors_waiting: Int!
  number_of_mainmatch_competitors_pending: Int!
  number_of_mainmatch_competitors_approved: Int!
  competitors_unscored_list: [CompetitorInterface!]!
  prematch_competitors_registered: [CompetitorInterface!]!
  prematch_competitors: [CompetitorInterface!]!
  prematch_competitors_pending: [CompetitorInterface!]!
  prematch_competitors_approved: [CompetitorInterface!]!
  prematch_competitors_approved_wo_results: [CompetitorInterface!]!
  prematch_competitors_approved_w_wo_results: [CompetitorInterface!]!
  prematch_competitors_approved_w_wo_results_wo_squad: [CompetitorInterface!]!
  prematch_competitors_waiting: [CompetitorInterface!]!
  prematch_competitors_declined: [CompetitorInterface!]!
  prematch_competitors_deleted: [CompetitorInterface!]!
  mainmatch_competitors_registered: [CompetitorInterface!]!
  mainmatch_competitors: [CompetitorInterface!]!
  mainmatch_competitors_pending: [CompetitorInterface!]!
  mainmatch_competitors_approved: [CompetitorInterface!]!
  mainmatch_competitors_approved_wo_results: [CompetitorInterface!]!
  mainmatch_competitors_approved_w_wo_results: [CompetitorInterface!]!
  mainmatch_competitors_approved_w_wo_results_wo_squad: [CompetitorInterface!]!
  mainmatch_competitors_waiting: [CompetitorInterface!]!
  mainmatch_competitors_declined: [CompetitorInterface!]!
  mainmatch_competitors_deleted: [CompetitorInterface!]!
  group: DjangoModelType!
  organizer: OrganizationNode!
  accreditor: DjangoModelType
  accreditation_status: String!

  """name, max 50"""
  name: String!

  """max 600 char"""
  description: String!

  """max 800 char"""
  information: String!

  """max competitors in match or main match"""
  max_competitors: Int!

  """do we have a prematch, and is scoring included, 2 char"""
  prematch: String!

  """max competitors in pre-match, if used"""
  max_prematch_competitors: Int!

  """does event support teams"""
  allow_teams: Boolean!
  allows_spotter_shooter_teams: Boolean!

  """allow teams to edit and change members themself"""
  allow_team_self_management: Boolean!

  """team members in a team"""
  number_of_team_members: Int!

  """number of best scores used for team result"""
  result_from_team_members: Int!

  """max 2 char, status of even"""
  status: String!

  """status of registration, 2 char"""
  registration: String!

  """visibility of results, 2 char"""
  results: String!

  """verification method, 3 char"""
  verify_using: String!

  """
  defines family of sport (but you need rule+subrule and sometimes firearm to decide explicit sport), e.g. ipsc-famliy is IPSC, USPSA, SRA etc and sub-rule separates these
  """
  rule: String!

  """region, ISO31663A3, 3 char"""
  region: String!

  """currency, ISO4217, 3 char"""
  currency: String!

  """relevant url for event, max 300 char"""
  url: String!

  """display or link textfor url, max 20 char"""
  url_display: String!
  gcal_uid: String!

  """can a user register more then once or not"""
  multiple_reg_allowed: Boolean!

  """visibility of event, 3 char"""
  visibility: String!

  """US Stage choices, 3 char max"""
  state: String!

  """place/location textual description, max 64 char"""
  venue: String!

  """format as 5,5 decimal"""
  lat: Decimal

  """format as 5,5 decimal"""
  lng: Decimal
  image: DjangoImageType
  banner: DjangoImageType
  banner_url: String!
  f1: DjangoFileType
  f2: DjangoFileType
  f3: DjangoFileType
  f4: DjangoFileType
  f5: DjangoFileType
  f6: DjangoFileType
  f1_display: String!
  f2_display: String!
  f3_display: String!
  f4_display: String!
  f5_display: String!
  f6_display: String!
  has_accepted_event_data_ass_agreement: Boolean!

  """
  Event has enabled free Premium, requires that Organization associated with event allows for this (free within limits)
  """
  organization_enabled_event_premium: Boolean!
  comment: String!
  competitor_payment: String!
  total_net: Decimal!
  total_tax: Decimal!
  total_fee: Decimal!
  premium_currency: String!
  payment_methods: String!

  """for 3rd party apps, never used within SSI or accessed, max 500 char"""
  custom_api: String!
  competitors: [CompetitorInterface!]!

  """competitors indexed typically on stage-number shooting on"""
  competitors_indexed(
    """
    all/no/yes as in all comps, no those without squad, yes those with squad
    """
    sqs: String!
    shift_on: Int! = 1
    incl_dnf: Boolean! = false
    incl_dqed: Boolean! = false
  ): [CompetitorInterface!]!

  """
  list of possible deviating scores as a tuple <scorecard, alert-text message>
  """
  deviating_scorecards: [DeviatingScoreCardNode!]!

  """
  list of possible deviating competitors as a tuple <scorecard, alert-text message> (only for non-stage events)
  """
  deviating_competitors: [DeviatingCompetitorNode!]!

  """available standard-stages for sport, to be cloned if to be used"""
  available_standard_stages: [StandardStageInterface!]!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_competitor: CompetitorInterface!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_stage: StageInterface!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_team: TeamInterface!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_squad: SquadInterface!
  is_current_role_admin: Boolean!
  is_current_role_staff: Boolean!
  is_current_role_assistant: Boolean!

  """returns all event order payments (typically by competitors)"""
  order_payments: [PaymentInterface!]!

  """returns all event premium payments (for premium features of even)"""
  premium_payments: [PaymentInterface!]!
  merchandizes: [MerchandizeNode!]!
  merchandizes_on_registration: [MerchandizeNode!]!
  merchandize_orders: [MerchandizeOrderNode!]!
  component_matches: [ComponentMatchInterface!]!
  serie_type: String!
  get_prematch_choices: [ChoiceNode!]!
  get_status_choices: [ChoiceNode!]!
  get_registration_choices: [ChoiceNode!]!
  get_results_choices: [ChoiceNode!]!
  get_verify_using_choices: [ChoiceNode!]!
  get_region_choices: [ChoiceNode!]!
  get_currency_choices: [ChoiceNode!]!
  get_visibility_choices: [ChoiceNode!]!
  get_state_choices: [ChoiceNode!]!

  """returns list with id to organizations as values and name as display"""
  get_organizer_choices: [ChoiceNode!]!
  firearms: String!
  sub_rule: String!

  """stages in event"""
  stages: [StageInterface!]!
  squads: [SquadInterface!]!
  teams: [TeamInterface!]
  get_level_display: String!
  get_firearm_display: String!
  get_divisions_display: String!
  level: String!
  divisions: String!
  min_rounds: Int!
  get_level_choices: [ChoiceNode!]!
  get_firearms_choices: [ChoiceNode!]!
  get_divisions_choices: [ChoiceNode!]!
}

"""
IpscSerie(id, group, timezone, organizer, accreditor, accreditation_status, name, description, information, max_competitors, prematch, max_prematch_competitors, allow_teams, allow_team_self_management, number_of_team_members, result_from_team_members, starts, ends, registration_starts, registration_closes, squadding_starts, pm_squadding_starts, squadding_closes, pm_squadding_closes, status, registration, results, verify_using, rule, region, currency, url, url_display, gcal_uid, multiple_reg_allowed, _short_url, visibility, _locked, state, venue, lat, lng, image, banner, banner_url, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f1_display, f2_display, f3_display, f4_display, f5_display, f6_display, f7_display, f8_display, f9_display, f10_display, has_accepted_event_data_ass_agreement, admin_comment, comment, organization_enabled_event_premium, competitor_payment, total_net, total_tax, total_fee, premium_currency, payment_methods, pp_receiver, pp_receiver_encrypted, pp_identity_token_enc, pp_utf8, pp_ok_curr, pp_accept_curr, pp_ipn_set, pp_verified, swish_handel_payee, swish_foretag_payee, swish_cert, swish_key, swish_key_pwd, bic, iban, ssi_pay_processor_terms, ssi_pay_processor_refund_limit, bank_account_holder, bank_adress_1, bank_adress_2, bank_state, bank_city, bank_zipcode, bank_country, custom_api, rated, created_by, created, updated_by, updated, lock_changed_by, lock_changed, serie_type, level, firearms, serie_divisions, handgun_divs, rifle_divs, mini_rifle_divs, prec_rifle_divs, shotgun_divs, air_divs, pcc_divs, count, categories, cat_result_limit, merge_ss_with_s, match_registration_mode)
"""
type IpscSerieNode implements EventInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!
  is_locked: Boolean!
  supports_rating: Boolean!
  is_rated: Boolean!

  """ISO-8601 formatted, when/if has been elo-rated"""
  rated: DateTime

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime

  """competitors that did not show/complete/finnish the event"""
  competitors_did_not_finish: [CompetitorInterface!]!
  competitors_approved_w_wo_results_wo_squad_not_dnf: [CompetitorInterface!]!
  competitors_approved_w_wo_results_not_dnf: [CompetitorInterface!]!

  """
  list of scorecards that are DQ'ed (if event used stages, else use competitors_dq)
  """
  scorecards_dq: [ScoreCardInterface!]!

  """
  list of competitors that are DQ'ed (if stages used, check scorecard for reason of DQ)
  """
  competitors_dq: [CompetitorInterface!]!

  """
  list of scorecards with warning (if event used stages, else use competitors_w_warning)
  """
  scorecards_w_warning: [ScoreCardInterface!]!

  """
  list of competitors a warning (if stages used, check scorecards for reason of warning)
  """
  competitors_w_warning: [CompetitorInterface!]!

  """ISO-8601 formatted"""
  starts: DateTime!

  """ISO-8601 formatted"""
  ends: DateTime

  """ISO-8601 formatted"""
  registration_starts: DateTime!

  """ISO-8601 formatted"""
  registration_closes: DateTime

  """ISO-8601 formatted"""
  squadding_starts: DateTime

  """ISO-8601 formatted"""
  pm_squadding_starts: DateTime

  """ISO-8601 formatted"""
  squadding_closes: DateTime
  short_url: String!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!
  minimum_rounds: Int!
  is_tournament_match: Boolean!
  is_component_match: Boolean!

  """
  Registration is only possible if registration date has started and not closed and the registration is open.
  Use this check to present if registration for a shooter shall be possible or not.
  """
  is_registration_possible: Boolean!
  is_squadding_possible: Boolean!
  is_pm_squadding_possible: Boolean!
  supports_bulk_scoring: Boolean!
  uses_stages: Boolean!
  uses_shoot_off_stages: Boolean!
  uses_strings: Boolean!
  number_of_strings: Boolean!
  number_of_rounds_per_string: Int!
  supports_shoot_off_strings: Boolean!
  do_index_competitor_when_scoring: Boolean!
  supports_standard_stages: Boolean!
  supports_score_string_for_squad: Boolean!
  supports_score_all_in_squad_at_stage: Boolean!
  is_premium_activated: Boolean!

  """returns list of RBAC roles for current user"""
  role_names: [String!]!

  """
  Returns True if the premium for event is fully paid or if 
  event is associated with a premium-org that has enable free-premium and small,
  not to many non-members and and fee not to high
  
  ** OR ** 
  
  the event has previoously been set to completed (under old premium valid things
  so we do not make them pay for old events)
  """
  is_premium_fully_valid: Boolean!
  has_geopos: Boolean!
  has_prematch: Boolean!

  """is prematch score included in overall results"""
  has_prematch_included: Boolean!
  uses_pin_verification: Boolean!
  uses_signature_verification: Boolean!
  scoring_completed: Decimal!

  """
  obfuscated id used when registering, only shown when reg possible or staff/admin of event to avoid bot-registrations
  """
  obfuscated_id: String!
  get_standard_stage_selection: [StandardStageInterface!]!
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode
  get_full_rule_display: String!
  get_full_level_display: String!
  get_prematch_display: String!
  get_status_display: String!
  get_registration_display: String!
  get_results_display: String!
  get_verify_using_display: String!
  get_region_display: String!
  get_currency_display: String!
  get_visibility_display: String!
  get_state_display: String!
  does_current_user_get_result: Boolean!
  number_of_prematch_competitors_registered: Int!
  number_of_prematch_competitors_waiting: Int!
  number_of_prematch_competitors_pending: Int!
  number_of_prematch_competitors_approved: Int!
  number_of_mainmatch_competitors_registered: Int!
  number_of_mainmatch_competitors_waiting: Int!
  number_of_mainmatch_competitors_pending: Int!
  number_of_mainmatch_competitors_approved: Int!
  competitors_unscored_list: [CompetitorInterface!]!
  prematch_competitors_registered: [CompetitorInterface!]!
  prematch_competitors: [CompetitorInterface!]!
  prematch_competitors_pending: [CompetitorInterface!]!
  prematch_competitors_approved: [CompetitorInterface!]!
  prematch_competitors_approved_wo_results: [CompetitorInterface!]!
  prematch_competitors_approved_w_wo_results: [CompetitorInterface!]!
  prematch_competitors_approved_w_wo_results_wo_squad: [CompetitorInterface!]!
  prematch_competitors_waiting: [CompetitorInterface!]!
  prematch_competitors_declined: [CompetitorInterface!]!
  prematch_competitors_deleted: [CompetitorInterface!]!
  mainmatch_competitors_registered: [CompetitorInterface!]!
  mainmatch_competitors: [CompetitorInterface!]!
  mainmatch_competitors_pending: [CompetitorInterface!]!
  mainmatch_competitors_approved: [CompetitorInterface!]!
  mainmatch_competitors_approved_wo_results: [CompetitorInterface!]!
  mainmatch_competitors_approved_w_wo_results: [CompetitorInterface!]!
  mainmatch_competitors_approved_w_wo_results_wo_squad: [CompetitorInterface!]!
  mainmatch_competitors_waiting: [CompetitorInterface!]!
  mainmatch_competitors_declined: [CompetitorInterface!]!
  mainmatch_competitors_deleted: [CompetitorInterface!]!
  group: DjangoModelType!
  organizer: OrganizationNode!
  accreditor: DjangoModelType
  accreditation_status: String!

  """name, max 50"""
  name: String!

  """max 600 char"""
  description: String!

  """max 800 char"""
  information: String!

  """max competitors in match or main match"""
  max_competitors: Int!

  """do we have a prematch, and is scoring included, 2 char"""
  prematch: String!

  """max competitors in pre-match, if used"""
  max_prematch_competitors: Int!

  """does event support teams"""
  allow_teams: Boolean!
  allows_spotter_shooter_teams: Boolean!

  """allow teams to edit and change members themself"""
  allow_team_self_management: Boolean!

  """team members in a team"""
  number_of_team_members: Int!

  """number of best scores used for team result"""
  result_from_team_members: Int!

  """max 2 char, status of even"""
  status: String!

  """status of registration, 2 char"""
  registration: String!

  """visibility of results, 2 char"""
  results: String!

  """verification method, 3 char"""
  verify_using: String!

  """
  defines family of sport (but you need rule+subrule and sometimes firearm to decide explicit sport), e.g. ipsc-famliy is IPSC, USPSA, SRA etc and sub-rule separates these
  """
  rule: String!

  """region, ISO31663A3, 3 char"""
  region: String!

  """currency, ISO4217, 3 char"""
  currency: String!

  """relevant url for event, max 300 char"""
  url: String!

  """display or link textfor url, max 20 char"""
  url_display: String!
  gcal_uid: String!

  """can a user register more then once or not"""
  multiple_reg_allowed: Boolean!

  """visibility of event, 3 char"""
  visibility: String!

  """US Stage choices, 3 char max"""
  state: String!

  """place/location textual description, max 64 char"""
  venue: String!

  """format as 5,5 decimal"""
  lat: Decimal

  """format as 5,5 decimal"""
  lng: Decimal
  image: DjangoImageType
  banner: DjangoImageType
  banner_url: String!
  f1: DjangoFileType
  f2: DjangoFileType
  f3: DjangoFileType
  f4: DjangoFileType
  f5: DjangoFileType
  f6: DjangoFileType
  f1_display: String!
  f2_display: String!
  f3_display: String!
  f4_display: String!
  f5_display: String!
  f6_display: String!
  has_accepted_event_data_ass_agreement: Boolean!

  """
  Event has enabled free Premium, requires that Organization associated with event allows for this (free within limits)
  """
  organization_enabled_event_premium: Boolean!
  comment: String!
  competitor_payment: String!
  total_net: Decimal!
  total_tax: Decimal!
  total_fee: Decimal!
  premium_currency: String!
  payment_methods: String!

  """for 3rd party apps, never used within SSI or accessed, max 500 char"""
  custom_api: String!
  competitors: [CompetitorInterface!]!

  """competitors indexed typically on stage-number shooting on"""
  competitors_indexed(
    """
    all/no/yes as in all comps, no those without squad, yes those with squad
    """
    sqs: String!
    shift_on: Int! = 1
    incl_dnf: Boolean! = false
    incl_dqed: Boolean! = false
  ): [CompetitorInterface!]!

  """
  list of possible deviating scores as a tuple <scorecard, alert-text message>
  """
  deviating_scorecards: [DeviatingScoreCardNode!]!

  """
  list of possible deviating competitors as a tuple <scorecard, alert-text message> (only for non-stage events)
  """
  deviating_competitors: [DeviatingCompetitorNode!]!

  """available standard-stages for sport, to be cloned if to be used"""
  available_standard_stages: [StandardStageInterface!]!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_competitor: CompetitorInterface!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_stage: StageInterface!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_team: TeamInterface!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_squad: SquadInterface!
  is_current_role_admin: Boolean!
  is_current_role_staff: Boolean!
  is_current_role_assistant: Boolean!

  """returns all event order payments (typically by competitors)"""
  order_payments: [PaymentInterface!]!

  """returns all event premium payments (for premium features of even)"""
  premium_payments: [PaymentInterface!]!
  merchandizes: [MerchandizeNode!]!
  merchandizes_on_registration: [MerchandizeNode!]!
  merchandize_orders: [MerchandizeOrderNode!]!
  component_matches: [IpscComponentMatchNode!]!
  serie_type: String!
  get_prematch_choices: [ChoiceNode!]!
  get_status_choices: [ChoiceNode!]!
  get_registration_choices: [ChoiceNode!]!
  get_results_choices: [ChoiceNode!]!
  get_verify_using_choices: [ChoiceNode!]!
  get_region_choices: [ChoiceNode!]!
  get_currency_choices: [ChoiceNode!]!
  get_visibility_choices: [ChoiceNode!]!
  get_state_choices: [ChoiceNode!]!

  """returns list with id to organizations as values and name as display"""
  get_organizer_choices: [ChoiceNode!]!
  firearms: String!
  sub_rule: String!

  """stages in event"""
  stages: [StageInterface!]!
  squads: [SquadInterface!]!
  teams: [TeamInterface!]
  get_level_display: String!
  get_firearms_display: String!
  get_serie_divisions_display: String!
  get_handgun_divs_display: String!
  get_rifle_divs_display: String!
  get_mini_rifle_divs_display: String!
  get_prec_rifle_divs_display: String!
  get_shotgun_divs_display: String!
  get_air_divs_display: String!
  get_pcc_divs_display: String!
  get_categories_display: String!
  get_match_registration_mode_display: String!
  level: String!
  serie_divisions: String!
  handgun_divs: String!
  rifle_divs: String!
  mini_rifle_divs: String!
  prec_rifle_divs: String!
  shotgun_divs: String!
  air_divs: String!
  pcc_divs: String!
  count: Int!
  categories: String!
  cat_result_limit: Int!
  merge_ss_with_s: Boolean!
  match_registration_mode: String!
  get_level_choices: [ChoiceNode!]!
  get_firearms_choices: [ChoiceNode!]!
  get_serie_divisions_choices: [ChoiceNode!]!
  get_handgun_divs_choices: [ChoiceNode!]!
  get_rifle_divs_choices: [ChoiceNode!]!
  get_mini_rifle_divs_choices: [ChoiceNode!]!
  get_prec_rifle_divs_choices: [ChoiceNode!]!
  get_shotgun_divs_choices: [ChoiceNode!]!
  get_air_divs_choices: [ChoiceNode!]!
  get_pcc_divs_choices: [ChoiceNode!]!
  get_categories_choices: [ChoiceNode!]!
  get_match_registration_mode_choices: [ChoiceNode!]!
}

"""relation between serie and match that is part of serie"""
type IpscComponentMatchNode implements ComponentMatchInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!
  is_locked: Boolean!

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime
  match: IpscMatchNode!
  serie: IpscSerieNode!
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode!
  number: Int!
  included: Boolean!
}

"""
NordicSerie(id, group, timezone, organizer, accreditor, accreditation_status, name, description, information, max_competitors, prematch, max_prematch_competitors, allow_teams, allow_team_self_management, number_of_team_members, result_from_team_members, starts, ends, registration_starts, registration_closes, squadding_starts, pm_squadding_starts, squadding_closes, pm_squadding_closes, status, registration, results, verify_using, rule, region, currency, url, url_display, gcal_uid, multiple_reg_allowed, _short_url, visibility, _locked, state, venue, lat, lng, image, banner, banner_url, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f1_display, f2_display, f3_display, f4_display, f5_display, f6_display, f7_display, f8_display, f9_display, f10_display, has_accepted_event_data_ass_agreement, admin_comment, comment, organization_enabled_event_premium, competitor_payment, total_net, total_tax, total_fee, premium_currency, payment_methods, pp_receiver, pp_receiver_encrypted, pp_identity_token_enc, pp_utf8, pp_ok_curr, pp_accept_curr, pp_ipn_set, pp_verified, swish_handel_payee, swish_foretag_payee, swish_cert, swish_key, swish_key_pwd, bic, iban, ssi_pay_processor_terms, ssi_pay_processor_refund_limit, bank_account_holder, bank_adress_1, bank_adress_2, bank_state, bank_city, bank_zipcode, bank_country, custom_api, rated, created_by, created, updated_by, updated, lock_changed_by, lock_changed, serie_type, sub_rule, level, scoring_mode, weapon_groups, categories, competence_classes, count, match_registration_mode)
"""
type NordicSerieNode implements EventInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!
  is_locked: Boolean!
  supports_rating: Boolean!
  is_rated: Boolean!

  """ISO-8601 formatted, when/if has been elo-rated"""
  rated: DateTime

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime

  """competitors that did not show/complete/finnish the event"""
  competitors_did_not_finish: [CompetitorInterface!]!
  competitors_approved_w_wo_results_wo_squad_not_dnf: [CompetitorInterface!]!
  competitors_approved_w_wo_results_not_dnf: [CompetitorInterface!]!

  """
  list of scorecards that are DQ'ed (if event used stages, else use competitors_dq)
  """
  scorecards_dq: [ScoreCardInterface!]!

  """
  list of competitors that are DQ'ed (if stages used, check scorecard for reason of DQ)
  """
  competitors_dq: [CompetitorInterface!]!

  """
  list of scorecards with warning (if event used stages, else use competitors_w_warning)
  """
  scorecards_w_warning: [ScoreCardInterface!]!

  """
  list of competitors a warning (if stages used, check scorecards for reason of warning)
  """
  competitors_w_warning: [CompetitorInterface!]!

  """ISO-8601 formatted"""
  starts: DateTime!

  """ISO-8601 formatted"""
  ends: DateTime

  """ISO-8601 formatted"""
  registration_starts: DateTime!

  """ISO-8601 formatted"""
  registration_closes: DateTime

  """ISO-8601 formatted"""
  squadding_starts: DateTime

  """ISO-8601 formatted"""
  pm_squadding_starts: DateTime

  """ISO-8601 formatted"""
  squadding_closes: DateTime
  short_url: String!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!
  minimum_rounds: Int!
  is_tournament_match: Boolean!
  is_component_match: Boolean!

  """
  Registration is only possible if registration date has started and not closed and the registration is open.
  Use this check to present if registration for a shooter shall be possible or not.
  """
  is_registration_possible: Boolean!
  is_squadding_possible: Boolean!
  is_pm_squadding_possible: Boolean!
  supports_bulk_scoring: Boolean!
  uses_stages: Boolean!
  uses_shoot_off_stages: Boolean!
  uses_strings: Boolean!
  number_of_strings: Boolean!
  number_of_rounds_per_string: Int!
  supports_shoot_off_strings: Boolean!
  do_index_competitor_when_scoring: Boolean!
  supports_standard_stages: Boolean!
  supports_score_string_for_squad: Boolean!
  supports_score_all_in_squad_at_stage: Boolean!
  is_premium_activated: Boolean!

  """returns list of RBAC roles for current user"""
  role_names: [String!]!

  """
  Returns True if the premium for event is fully paid or if 
  event is associated with a premium-org that has enable free-premium and small,
  not to many non-members and and fee not to high
  
  ** OR ** 
  
  the event has previoously been set to completed (under old premium valid things
  so we do not make them pay for old events)
  """
  is_premium_fully_valid: Boolean!
  has_geopos: Boolean!
  has_prematch: Boolean!

  """is prematch score included in overall results"""
  has_prematch_included: Boolean!
  uses_pin_verification: Boolean!
  uses_signature_verification: Boolean!
  scoring_completed: Decimal!

  """
  obfuscated id used when registering, only shown when reg possible or staff/admin of event to avoid bot-registrations
  """
  obfuscated_id: String!
  get_standard_stage_selection: [StandardStageInterface!]!
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode
  get_full_rule_display: String!
  get_full_level_display: String!
  get_prematch_display: String!
  get_status_display: String!
  get_registration_display: String!
  get_results_display: String!
  get_verify_using_display: String!
  get_region_display: String!
  get_currency_display: String!
  get_visibility_display: String!
  get_state_display: String!
  does_current_user_get_result: Boolean!
  number_of_prematch_competitors_registered: Int!
  number_of_prematch_competitors_waiting: Int!
  number_of_prematch_competitors_pending: Int!
  number_of_prematch_competitors_approved: Int!
  number_of_mainmatch_competitors_registered: Int!
  number_of_mainmatch_competitors_waiting: Int!
  number_of_mainmatch_competitors_pending: Int!
  number_of_mainmatch_competitors_approved: Int!
  competitors_unscored_list: [CompetitorInterface!]!
  prematch_competitors_registered: [CompetitorInterface!]!
  prematch_competitors: [CompetitorInterface!]!
  prematch_competitors_pending: [CompetitorInterface!]!
  prematch_competitors_approved: [CompetitorInterface!]!
  prematch_competitors_approved_wo_results: [CompetitorInterface!]!
  prematch_competitors_approved_w_wo_results: [CompetitorInterface!]!
  prematch_competitors_approved_w_wo_results_wo_squad: [CompetitorInterface!]!
  prematch_competitors_waiting: [CompetitorInterface!]!
  prematch_competitors_declined: [CompetitorInterface!]!
  prematch_competitors_deleted: [CompetitorInterface!]!
  mainmatch_competitors_registered: [CompetitorInterface!]!
  mainmatch_competitors: [CompetitorInterface!]!
  mainmatch_competitors_pending: [CompetitorInterface!]!
  mainmatch_competitors_approved: [CompetitorInterface!]!
  mainmatch_competitors_approved_wo_results: [CompetitorInterface!]!
  mainmatch_competitors_approved_w_wo_results: [CompetitorInterface!]!
  mainmatch_competitors_approved_w_wo_results_wo_squad: [CompetitorInterface!]!
  mainmatch_competitors_waiting: [CompetitorInterface!]!
  mainmatch_competitors_declined: [CompetitorInterface!]!
  mainmatch_competitors_deleted: [CompetitorInterface!]!
  group: DjangoModelType!
  organizer: OrganizationNode!
  accreditor: DjangoModelType
  accreditation_status: String!

  """name, max 50"""
  name: String!

  """max 600 char"""
  description: String!

  """max 800 char"""
  information: String!

  """max competitors in match or main match"""
  max_competitors: Int!

  """do we have a prematch, and is scoring included, 2 char"""
  prematch: String!

  """max competitors in pre-match, if used"""
  max_prematch_competitors: Int!

  """does event support teams"""
  allow_teams: Boolean!
  allows_spotter_shooter_teams: Boolean!

  """allow teams to edit and change members themself"""
  allow_team_self_management: Boolean!

  """team members in a team"""
  number_of_team_members: Int!

  """number of best scores used for team result"""
  result_from_team_members: Int!

  """max 2 char, status of even"""
  status: String!

  """status of registration, 2 char"""
  registration: String!

  """visibility of results, 2 char"""
  results: String!

  """verification method, 3 char"""
  verify_using: String!

  """
  defines family of sport (but you need rule+subrule and sometimes firearm to decide explicit sport), e.g. ipsc-famliy is IPSC, USPSA, SRA etc and sub-rule separates these
  """
  rule: String!

  """region, ISO31663A3, 3 char"""
  region: String!

  """currency, ISO4217, 3 char"""
  currency: String!

  """relevant url for event, max 300 char"""
  url: String!

  """display or link textfor url, max 20 char"""
  url_display: String!
  gcal_uid: String!

  """can a user register more then once or not"""
  multiple_reg_allowed: Boolean!

  """visibility of event, 3 char"""
  visibility: String!

  """US Stage choices, 3 char max"""
  state: String!

  """place/location textual description, max 64 char"""
  venue: String!

  """format as 5,5 decimal"""
  lat: Decimal

  """format as 5,5 decimal"""
  lng: Decimal
  image: DjangoImageType
  banner: DjangoImageType
  banner_url: String!
  f1: DjangoFileType
  f2: DjangoFileType
  f3: DjangoFileType
  f4: DjangoFileType
  f5: DjangoFileType
  f6: DjangoFileType
  f1_display: String!
  f2_display: String!
  f3_display: String!
  f4_display: String!
  f5_display: String!
  f6_display: String!
  has_accepted_event_data_ass_agreement: Boolean!

  """
  Event has enabled free Premium, requires that Organization associated with event allows for this (free within limits)
  """
  organization_enabled_event_premium: Boolean!
  comment: String!
  competitor_payment: String!
  total_net: Decimal!
  total_tax: Decimal!
  total_fee: Decimal!
  premium_currency: String!
  payment_methods: String!

  """for 3rd party apps, never used within SSI or accessed, max 500 char"""
  custom_api: String!
  competitors: [CompetitorInterface!]!

  """competitors indexed typically on stage-number shooting on"""
  competitors_indexed(
    """
    all/no/yes as in all comps, no those without squad, yes those with squad
    """
    sqs: String!
    shift_on: Int! = 1
    incl_dnf: Boolean! = false
    incl_dqed: Boolean! = false
  ): [CompetitorInterface!]!

  """
  list of possible deviating scores as a tuple <scorecard, alert-text message>
  """
  deviating_scorecards: [DeviatingScoreCardNode!]!

  """
  list of possible deviating competitors as a tuple <scorecard, alert-text message> (only for non-stage events)
  """
  deviating_competitors: [DeviatingCompetitorNode!]!

  """available standard-stages for sport, to be cloned if to be used"""
  available_standard_stages: [StandardStageInterface!]!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_competitor: CompetitorInterface!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_stage: StageInterface!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_team: TeamInterface!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_squad: SquadInterface!
  is_current_role_admin: Boolean!
  is_current_role_staff: Boolean!
  is_current_role_assistant: Boolean!

  """returns all event order payments (typically by competitors)"""
  order_payments: [PaymentInterface!]!

  """returns all event premium payments (for premium features of even)"""
  premium_payments: [PaymentInterface!]!
  merchandizes: [MerchandizeNode!]!
  merchandizes_on_registration: [MerchandizeNode!]!
  merchandize_orders: [MerchandizeOrderNode!]!
  component_matches: [NordicComponentMatchNode!]!
  serie_type: String!
  get_prematch_choices: [ChoiceNode!]!
  get_status_choices: [ChoiceNode!]!
  get_registration_choices: [ChoiceNode!]!
  get_results_choices: [ChoiceNode!]!
  get_verify_using_choices: [ChoiceNode!]!
  get_region_choices: [ChoiceNode!]!
  get_currency_choices: [ChoiceNode!]!
  get_visibility_choices: [ChoiceNode!]!
  get_state_choices: [ChoiceNode!]!

  """returns list with id to organizations as values and name as display"""
  get_organizer_choices: [ChoiceNode!]!
  firearms: String!
  sub_rule: String!

  """stages in event"""
  stages: [StageInterface!]!
  squads: [SquadInterface!]!
  teams: [TeamInterface!]
  get_level_display: String!
  get_scoring_mode_display: String!
  get_weapon_groups_display: String!
  get_categories_display: String!
  get_competence_classes_display: String!
  get_match_registration_mode_display: String!
  level: String!
  scoring_mode: String!
  weapon_groups: String!
  categories: String!
  competence_classes: String!
  count: Int!
  match_registration_mode: String!
  get_level_choices: [ChoiceNode!]!
  get_scoring_mode_choices: [ChoiceNode!]!
  get_weapon_groups_choices: [ChoiceNode!]!
  get_categories_choices: [ChoiceNode!]!
  get_competence_classes_choices: [ChoiceNode!]!
  get_match_registration_mode_choices: [ChoiceNode!]!
}

"""relation between serie and match that is part of serie"""
type NordicComponentMatchNode implements ComponentMatchInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!
  is_locked: Boolean!

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime
  match: NordicMatchNode!
  serie: NordicSerieNode!
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode!
  number: Int!
  included: Boolean!
}

"""
PpcSerie(id, group, timezone, organizer, accreditor, accreditation_status, name, description, information, max_competitors, prematch, max_prematch_competitors, allow_teams, allow_team_self_management, number_of_team_members, result_from_team_members, starts, ends, registration_starts, registration_closes, squadding_starts, pm_squadding_starts, squadding_closes, pm_squadding_closes, status, registration, results, verify_using, rule, region, currency, url, url_display, gcal_uid, multiple_reg_allowed, _short_url, visibility, _locked, state, venue, lat, lng, image, banner, banner_url, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f1_display, f2_display, f3_display, f4_display, f5_display, f6_display, f7_display, f8_display, f9_display, f10_display, has_accepted_event_data_ass_agreement, admin_comment, comment, organization_enabled_event_premium, competitor_payment, total_net, total_tax, total_fee, premium_currency, payment_methods, pp_receiver, pp_receiver_encrypted, pp_identity_token_enc, pp_utf8, pp_ok_curr, pp_accept_curr, pp_ipn_set, pp_verified, swish_handel_payee, swish_foretag_payee, swish_cert, swish_key, swish_key_pwd, bic, iban, ssi_pay_processor_terms, ssi_pay_processor_refund_limit, bank_account_holder, bank_adress_1, bank_adress_2, bank_state, bank_city, bank_zipcode, bank_country, custom_api, rated, created_by, created, updated_by, updated, lock_changed_by, lock_changed, serie_type, weapon_classes, count, match_registration_mode)
"""
type PpcSerieNode implements EventInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!
  is_locked: Boolean!
  supports_rating: Boolean!
  is_rated: Boolean!

  """ISO-8601 formatted, when/if has been elo-rated"""
  rated: DateTime

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime

  """competitors that did not show/complete/finnish the event"""
  competitors_did_not_finish: [CompetitorInterface!]!
  competitors_approved_w_wo_results_wo_squad_not_dnf: [CompetitorInterface!]!
  competitors_approved_w_wo_results_not_dnf: [CompetitorInterface!]!

  """
  list of scorecards that are DQ'ed (if event used stages, else use competitors_dq)
  """
  scorecards_dq: [ScoreCardInterface!]!

  """
  list of competitors that are DQ'ed (if stages used, check scorecard for reason of DQ)
  """
  competitors_dq: [CompetitorInterface!]!

  """
  list of scorecards with warning (if event used stages, else use competitors_w_warning)
  """
  scorecards_w_warning: [ScoreCardInterface!]!

  """
  list of competitors a warning (if stages used, check scorecards for reason of warning)
  """
  competitors_w_warning: [CompetitorInterface!]!

  """ISO-8601 formatted"""
  starts: DateTime!

  """ISO-8601 formatted"""
  ends: DateTime

  """ISO-8601 formatted"""
  registration_starts: DateTime!

  """ISO-8601 formatted"""
  registration_closes: DateTime

  """ISO-8601 formatted"""
  squadding_starts: DateTime

  """ISO-8601 formatted"""
  pm_squadding_starts: DateTime

  """ISO-8601 formatted"""
  squadding_closes: DateTime
  short_url: String!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!
  minimum_rounds: Int!
  is_tournament_match: Boolean!
  is_component_match: Boolean!

  """
  Registration is only possible if registration date has started and not closed and the registration is open.
  Use this check to present if registration for a shooter shall be possible or not.
  """
  is_registration_possible: Boolean!
  is_squadding_possible: Boolean!
  is_pm_squadding_possible: Boolean!
  supports_bulk_scoring: Boolean!
  uses_stages: Boolean!
  uses_shoot_off_stages: Boolean!
  uses_strings: Boolean!
  number_of_strings: Boolean!
  number_of_rounds_per_string: Int!
  supports_shoot_off_strings: Boolean!
  do_index_competitor_when_scoring: Boolean!
  supports_standard_stages: Boolean!
  supports_score_string_for_squad: Boolean!
  supports_score_all_in_squad_at_stage: Boolean!
  is_premium_activated: Boolean!

  """returns list of RBAC roles for current user"""
  role_names: [String!]!

  """
  Returns True if the premium for event is fully paid or if 
  event is associated with a premium-org that has enable free-premium and small,
  not to many non-members and and fee not to high
  
  ** OR ** 
  
  the event has previoously been set to completed (under old premium valid things
  so we do not make them pay for old events)
  """
  is_premium_fully_valid: Boolean!
  has_geopos: Boolean!
  has_prematch: Boolean!

  """is prematch score included in overall results"""
  has_prematch_included: Boolean!
  uses_pin_verification: Boolean!
  uses_signature_verification: Boolean!
  scoring_completed: Decimal!

  """
  obfuscated id used when registering, only shown when reg possible or staff/admin of event to avoid bot-registrations
  """
  obfuscated_id: String!
  get_standard_stage_selection: [StandardStageInterface!]!
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode
  get_full_rule_display: String!
  get_full_level_display: String!
  get_prematch_display: String!
  get_status_display: String!
  get_registration_display: String!
  get_results_display: String!
  get_verify_using_display: String!
  get_region_display: String!
  get_currency_display: String!
  get_visibility_display: String!
  get_state_display: String!
  does_current_user_get_result: Boolean!
  number_of_prematch_competitors_registered: Int!
  number_of_prematch_competitors_waiting: Int!
  number_of_prematch_competitors_pending: Int!
  number_of_prematch_competitors_approved: Int!
  number_of_mainmatch_competitors_registered: Int!
  number_of_mainmatch_competitors_waiting: Int!
  number_of_mainmatch_competitors_pending: Int!
  number_of_mainmatch_competitors_approved: Int!
  competitors_unscored_list: [CompetitorInterface!]!
  prematch_competitors_registered: [CompetitorInterface!]!
  prematch_competitors: [CompetitorInterface!]!
  prematch_competitors_pending: [CompetitorInterface!]!
  prematch_competitors_approved: [CompetitorInterface!]!
  prematch_competitors_approved_wo_results: [CompetitorInterface!]!
  prematch_competitors_approved_w_wo_results: [CompetitorInterface!]!
  prematch_competitors_approved_w_wo_results_wo_squad: [CompetitorInterface!]!
  prematch_competitors_waiting: [CompetitorInterface!]!
  prematch_competitors_declined: [CompetitorInterface!]!
  prematch_competitors_deleted: [CompetitorInterface!]!
  mainmatch_competitors_registered: [CompetitorInterface!]!
  mainmatch_competitors: [CompetitorInterface!]!
  mainmatch_competitors_pending: [CompetitorInterface!]!
  mainmatch_competitors_approved: [CompetitorInterface!]!
  mainmatch_competitors_approved_wo_results: [CompetitorInterface!]!
  mainmatch_competitors_approved_w_wo_results: [CompetitorInterface!]!
  mainmatch_competitors_approved_w_wo_results_wo_squad: [CompetitorInterface!]!
  mainmatch_competitors_waiting: [CompetitorInterface!]!
  mainmatch_competitors_declined: [CompetitorInterface!]!
  mainmatch_competitors_deleted: [CompetitorInterface!]!
  group: DjangoModelType!
  organizer: OrganizationNode!
  accreditor: DjangoModelType
  accreditation_status: String!

  """name, max 50"""
  name: String!

  """max 600 char"""
  description: String!

  """max 800 char"""
  information: String!

  """max competitors in match or main match"""
  max_competitors: Int!

  """do we have a prematch, and is scoring included, 2 char"""
  prematch: String!

  """max competitors in pre-match, if used"""
  max_prematch_competitors: Int!

  """does event support teams"""
  allow_teams: Boolean!
  allows_spotter_shooter_teams: Boolean!

  """allow teams to edit and change members themself"""
  allow_team_self_management: Boolean!

  """team members in a team"""
  number_of_team_members: Int!

  """number of best scores used for team result"""
  result_from_team_members: Int!

  """max 2 char, status of even"""
  status: String!

  """status of registration, 2 char"""
  registration: String!

  """visibility of results, 2 char"""
  results: String!

  """verification method, 3 char"""
  verify_using: String!

  """
  defines family of sport (but you need rule+subrule and sometimes firearm to decide explicit sport), e.g. ipsc-famliy is IPSC, USPSA, SRA etc and sub-rule separates these
  """
  rule: String!

  """region, ISO31663A3, 3 char"""
  region: String!

  """currency, ISO4217, 3 char"""
  currency: String!

  """relevant url for event, max 300 char"""
  url: String!

  """display or link textfor url, max 20 char"""
  url_display: String!
  gcal_uid: String!

  """can a user register more then once or not"""
  multiple_reg_allowed: Boolean!

  """visibility of event, 3 char"""
  visibility: String!

  """US Stage choices, 3 char max"""
  state: String!

  """place/location textual description, max 64 char"""
  venue: String!

  """format as 5,5 decimal"""
  lat: Decimal

  """format as 5,5 decimal"""
  lng: Decimal
  image: DjangoImageType
  banner: DjangoImageType
  banner_url: String!
  f1: DjangoFileType
  f2: DjangoFileType
  f3: DjangoFileType
  f4: DjangoFileType
  f5: DjangoFileType
  f6: DjangoFileType
  f1_display: String!
  f2_display: String!
  f3_display: String!
  f4_display: String!
  f5_display: String!
  f6_display: String!
  has_accepted_event_data_ass_agreement: Boolean!

  """
  Event has enabled free Premium, requires that Organization associated with event allows for this (free within limits)
  """
  organization_enabled_event_premium: Boolean!
  comment: String!
  competitor_payment: String!
  total_net: Decimal!
  total_tax: Decimal!
  total_fee: Decimal!
  premium_currency: String!
  payment_methods: String!

  """for 3rd party apps, never used within SSI or accessed, max 500 char"""
  custom_api: String!
  competitors: [CompetitorInterface!]!

  """competitors indexed typically on stage-number shooting on"""
  competitors_indexed(
    """
    all/no/yes as in all comps, no those without squad, yes those with squad
    """
    sqs: String!
    shift_on: Int! = 1
    incl_dnf: Boolean! = false
    incl_dqed: Boolean! = false
  ): [CompetitorInterface!]!

  """
  list of possible deviating scores as a tuple <scorecard, alert-text message>
  """
  deviating_scorecards: [DeviatingScoreCardNode!]!

  """
  list of possible deviating competitors as a tuple <scorecard, alert-text message> (only for non-stage events)
  """
  deviating_competitors: [DeviatingCompetitorNode!]!

  """available standard-stages for sport, to be cloned if to be used"""
  available_standard_stages: [StandardStageInterface!]!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_competitor: CompetitorInterface!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_stage: StageInterface!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_team: TeamInterface!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_squad: SquadInterface!
  is_current_role_admin: Boolean!
  is_current_role_staff: Boolean!
  is_current_role_assistant: Boolean!

  """returns all event order payments (typically by competitors)"""
  order_payments: [PaymentInterface!]!

  """returns all event premium payments (for premium features of even)"""
  premium_payments: [PaymentInterface!]!
  merchandizes: [MerchandizeNode!]!
  merchandizes_on_registration: [MerchandizeNode!]!
  merchandize_orders: [MerchandizeOrderNode!]!
  component_matches: [PpcComponentMatchNode!]!
  serie_type: String!
  get_prematch_choices: [ChoiceNode!]!
  get_status_choices: [ChoiceNode!]!
  get_registration_choices: [ChoiceNode!]!
  get_results_choices: [ChoiceNode!]!
  get_verify_using_choices: [ChoiceNode!]!
  get_region_choices: [ChoiceNode!]!
  get_currency_choices: [ChoiceNode!]!
  get_visibility_choices: [ChoiceNode!]!
  get_state_choices: [ChoiceNode!]!

  """returns list with id to organizations as values and name as display"""
  get_organizer_choices: [ChoiceNode!]!
  firearms: String!
  sub_rule: String!

  """stages in event"""
  stages: [StageInterface!]!
  squads: [SquadInterface!]!
  teams: [TeamInterface!]
  get_weapon_classes_display: String!
  get_match_registration_mode_display: String!
  weapon_classes: String!
  count: Int!
  match_registration_mode: String!
  get_competence_classes_choices: [ChoiceNode!]!
  get_match_registration_mode_choices: [ChoiceNode!]!
}

"""relation between serie and match that is part of serie"""
type PpcComponentMatchNode implements ComponentMatchInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!
  is_locked: Boolean!

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime
  match: PpcMatchNode!
  serie: PpcSerieNode!
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode!
  number: Int!
  included: Boolean!
}

"""
Specific fields for Ipsc Squad (used in IPSC, USPSA, SRA, TTS, Sivil, 3-Gun
"""
type IpscSquadNode implements SquadInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!
  is_locked: Boolean!

  """ISO-8601 formatted"""
  created: DateTime

  """ISO-8601 formatted"""
  updated: DateTime

  """ISO-8601 formatted"""
  lock_changed: DateTime

  """returns next squad in circular mode"""
  get_next_squad: SquadInterface!

  """returns previous squad in circular mode"""
  get_previous_squad: SquadInterface!
  created_by: ShooterNode
  updated_by: ShooterNode
  lock_changed_by: ShooterNode!
  number: Int!

  """max members in squad, default 10"""
  max_competitors: Int!

  """100 char"""
  comment: String!

  """2 char"""
  registration: String!

  """squad shoots prematch"""
  prematch: Boolean!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!

  """competitors indexed typically on stage-number shooting on"""
  competitors_indexed(shift_on: Int! = 1, incl_dnf: Boolean! = false, incl_dqed: Boolean! = false): [CompetitorInterface!]!

  """
  assumes event uses stages & returns a comma separated string of ints for a five-tuple; <verified, unverified, scored, unscored, total_to_score>
  """
  scoring_progress: ScoringProgressNode!
  scoring_progress_at_stage(
    """Stage ID"""
    stage_id: String = null
  ): ScoringProgressNode!

  """returns Squad X. or Posse X. or Patrol X where X is number"""
  get_squad_display: String!
  get_squad_registration_choices: [ChoiceNode!]!
  event: IpscMatchNode!

  """competitors ordered on number"""
  competitors: [IpscCompetitorNode!]!
}

"""
PpcSquad(id, number, max_competitors, comment, registration, prematch, _locked, created_by, created, updated_by, updated, lock_changed_by, lock_changed, event, weapon_class)
"""
type PpcSquadNode implements SquadInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!
  is_locked: Boolean!

  """ISO-8601 formatted"""
  created: DateTime

  """ISO-8601 formatted"""
  updated: DateTime

  """ISO-8601 formatted"""
  lock_changed: DateTime

  """returns next squad in circular mode"""
  get_next_squad: SquadInterface!

  """returns previous squad in circular mode"""
  get_previous_squad: SquadInterface!
  created_by: ShooterNode
  updated_by: ShooterNode
  lock_changed_by: ShooterNode!
  number: Int!

  """max members in squad, default 10"""
  max_competitors: Int!

  """100 char"""
  comment: String!

  """2 char"""
  registration: String!

  """squad shoots prematch"""
  prematch: Boolean!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!

  """competitors indexed typically on stage-number shooting on"""
  competitors_indexed(shift_on: Int! = 1, incl_dnf: Boolean! = false, incl_dqed: Boolean! = false): [CompetitorInterface!]!

  """
  assumes event uses stages & returns a comma separated string of ints for a five-tuple; <verified, unverified, scored, unscored, total_to_score>
  """
  scoring_progress: ScoringProgressNode!
  scoring_progress_at_stage(
    """Stage ID"""
    stage_id: String = null
  ): ScoringProgressNode!

  """returns Squad X. or Posse X. or Patrol X where X is number"""
  get_squad_display: String!
  get_squad_registration_choices: [ChoiceNode!]!
  event: PpcMatchNode!

  """competitors ordered on number"""
  competitors: [PpcCompetitorNode!]!
  get_weapon_class_display: String!
  weapon_class: String!
  get_weapon_classes_choices: [ChoiceNode!]!
}

"""
CmpSquad(id, number, max_competitors, comment, registration, prematch, _locked, created_by, created, updated_by, updated, lock_changed_by, lock_changed, event, rifle_divs, rimfire_rifle_divs, pistol_divs, rimfire_pistol_divs, starts, stops)
"""
type CmpSquadNode implements SquadInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!
  is_locked: Boolean!

  """ISO-8601 formatted"""
  created: DateTime

  """ISO-8601 formatted"""
  updated: DateTime

  """ISO-8601 formatted"""
  lock_changed: DateTime

  """returns next squad in circular mode"""
  get_next_squad: SquadInterface!

  """returns previous squad in circular mode"""
  get_previous_squad: SquadInterface!
  created_by: ShooterNode
  updated_by: ShooterNode
  lock_changed_by: ShooterNode!
  number: Int!

  """max members in squad, default 10"""
  max_competitors: Int!

  """100 char"""
  comment: String!

  """2 char"""
  registration: String!

  """squad shoots prematch"""
  prematch: Boolean!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!

  """competitors indexed typically on stage-number shooting on"""
  competitors_indexed(shift_on: Int! = 1, incl_dnf: Boolean! = false, incl_dqed: Boolean! = false): [CompetitorInterface!]!

  """
  assumes event uses stages & returns a comma separated string of ints for a five-tuple; <verified, unverified, scored, unscored, total_to_score>
  """
  scoring_progress: ScoringProgressNode!
  scoring_progress_at_stage(
    """Stage ID"""
    stage_id: String = null
  ): ScoringProgressNode!

  """returns Squad X. or Posse X. or Patrol X where X is number"""
  get_squad_display: String!
  get_squad_registration_choices: [ChoiceNode!]!
  event: CmpMatchNode!

  """competitors ordered on number"""
  competitors: [CmpCompetitorNode!]!
  get_rifle_div_display: String!
  get_rimfire_rifle_div_display: String!
  get_pistol_div_display: String!
  get_rimfire_pistol_div_display: String!

  """ISO-8601 formatted"""
  starts: DateTime!

  """ISO-8601 formatted"""
  stops: DateTime
  rifle_divs: String!
  rimfire_rifle_divs: String!
  pistol_divs: String!
  rimfire_pistol_divs: String!
  rifle_div_choices: [ChoiceNode!]!
  get_rimfire_rifle_div_choices: [ChoiceNode!]!
  get_pistol_div_choices: [ChoiceNode!]!
  get_rimfire_pistol_div_choices: [ChoiceNode!]!
}

"""
CmpSquad(id, number, max_competitors, comment, registration, prematch, _locked, created_by, created, updated_by, updated, lock_changed_by, lock_changed, event, rifle_divs, rimfire_rifle_divs, pistol_divs, rimfire_pistol_divs, starts, stops)
"""
type IdpaSquadNode implements SquadInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!
  is_locked: Boolean!

  """ISO-8601 formatted"""
  created: DateTime

  """ISO-8601 formatted"""
  updated: DateTime

  """ISO-8601 formatted"""
  lock_changed: DateTime

  """returns next squad in circular mode"""
  get_next_squad: SquadInterface!

  """returns previous squad in circular mode"""
  get_previous_squad: SquadInterface!
  created_by: ShooterNode
  updated_by: ShooterNode
  lock_changed_by: ShooterNode!
  number: Int!

  """max members in squad, default 10"""
  max_competitors: Int!

  """100 char"""
  comment: String!

  """2 char"""
  registration: String!

  """squad shoots prematch"""
  prematch: Boolean!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!

  """competitors indexed typically on stage-number shooting on"""
  competitors_indexed(shift_on: Int! = 1, incl_dnf: Boolean! = false, incl_dqed: Boolean! = false): [CompetitorInterface!]!

  """
  assumes event uses stages & returns a comma separated string of ints for a five-tuple; <verified, unverified, scored, unscored, total_to_score>
  """
  scoring_progress: ScoringProgressNode!
  scoring_progress_at_stage(
    """Stage ID"""
    stage_id: String = null
  ): ScoringProgressNode!

  """returns Squad X. or Posse X. or Patrol X where X is number"""
  get_squad_display: String!
  get_squad_registration_choices: [ChoiceNode!]!
  event: IdpaMatchNode!

  """competitors ordered on number"""
  competitors: [IdpaCompetitorNode!]!
}

"""
CmpSquad(id, number, max_competitors, comment, registration, prematch, _locked, created_by, created, updated_by, updated, lock_changed_by, lock_changed, event, rifle_divs, rimfire_rifle_divs, pistol_divs, rimfire_pistol_divs, starts, stops)
"""
type SteelSquadNode implements SquadInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!
  is_locked: Boolean!

  """ISO-8601 formatted"""
  created: DateTime

  """ISO-8601 formatted"""
  updated: DateTime

  """ISO-8601 formatted"""
  lock_changed: DateTime

  """returns next squad in circular mode"""
  get_next_squad: SquadInterface!

  """returns previous squad in circular mode"""
  get_previous_squad: SquadInterface!
  created_by: ShooterNode
  updated_by: ShooterNode
  lock_changed_by: ShooterNode!
  number: Int!

  """max members in squad, default 10"""
  max_competitors: Int!

  """100 char"""
  comment: String!

  """2 char"""
  registration: String!

  """squad shoots prematch"""
  prematch: Boolean!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!

  """competitors indexed typically on stage-number shooting on"""
  competitors_indexed(shift_on: Int! = 1, incl_dnf: Boolean! = false, incl_dqed: Boolean! = false): [CompetitorInterface!]!

  """
  assumes event uses stages & returns a comma separated string of ints for a five-tuple; <verified, unverified, scored, unscored, total_to_score>
  """
  scoring_progress: ScoringProgressNode!
  scoring_progress_at_stage(
    """Stage ID"""
    stage_id: String = null
  ): ScoringProgressNode!

  """returns Squad X. or Posse X. or Patrol X where X is number"""
  get_squad_display: String!
  get_squad_registration_choices: [ChoiceNode!]!
  event: SteelMatchNode!

  """competitors ordered on number"""
  competitors: [SteelCompetitorNode!]!
}

"""
SassSquad(id, number, max_competitors, comment, registration, prematch, _locked, created_by, created, updated_by, updated, lock_changed_by, lock_changed, event)
"""
type SassSquadNode implements SquadInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!
  is_locked: Boolean!

  """ISO-8601 formatted"""
  created: DateTime

  """ISO-8601 formatted"""
  updated: DateTime

  """ISO-8601 formatted"""
  lock_changed: DateTime

  """returns next squad in circular mode"""
  get_next_squad: SquadInterface!

  """returns previous squad in circular mode"""
  get_previous_squad: SquadInterface!
  created_by: ShooterNode
  updated_by: ShooterNode
  lock_changed_by: ShooterNode!
  number: Int!

  """max members in squad, default 10"""
  max_competitors: Int!

  """100 char"""
  comment: String!

  """2 char"""
  registration: String!

  """squad shoots prematch"""
  prematch: Boolean!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!

  """competitors indexed typically on stage-number shooting on"""
  competitors_indexed(shift_on: Int! = 1, incl_dnf: Boolean! = false, incl_dqed: Boolean! = false): [CompetitorInterface!]!

  """
  assumes event uses stages & returns a comma separated string of ints for a five-tuple; <verified, unverified, scored, unscored, total_to_score>
  """
  scoring_progress: ScoringProgressNode!
  scoring_progress_at_stage(
    """Stage ID"""
    stage_id: String = null
  ): ScoringProgressNode!

  """returns Squad X. or Posse X. or Patrol X where X is number"""
  get_squad_display: String!
  get_squad_registration_choices: [ChoiceNode!]!
  event: SassMatchNode!

  """competitors ordered on number"""
  competitors: [SassCompetitorNode!]!
}

"""
NordicSquad(id, number, max_competitors, comment, registration, prematch, _locked, created_by, created, updated_by, updated, lock_changed_by, lock_changed, event, weapon_groups, competence_classes, categories, starts, stops)
"""
type NordicSquadNode implements SquadInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!
  is_locked: Boolean!

  """ISO-8601 formatted"""
  created: DateTime

  """ISO-8601 formatted"""
  updated: DateTime

  """ISO-8601 formatted"""
  lock_changed: DateTime

  """returns next squad in circular mode"""
  get_next_squad: SquadInterface!

  """returns previous squad in circular mode"""
  get_previous_squad: SquadInterface!
  created_by: ShooterNode
  updated_by: ShooterNode
  lock_changed_by: ShooterNode!
  number: Int!

  """max members in squad, default 10"""
  max_competitors: Int!

  """100 char"""
  comment: String!

  """2 char"""
  registration: String!

  """squad shoots prematch"""
  prematch: Boolean!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!

  """competitors indexed typically on stage-number shooting on"""
  competitors_indexed(shift_on: Int! = 1, incl_dnf: Boolean! = false, incl_dqed: Boolean! = false): [CompetitorInterface!]!

  """
  assumes event uses stages & returns a comma separated string of ints for a five-tuple; <verified, unverified, scored, unscored, total_to_score>
  """
  scoring_progress: ScoringProgressNode!
  scoring_progress_at_stage(
    """Stage ID"""
    stage_id: String = null
  ): ScoringProgressNode!

  """returns Squad X. or Posse X. or Patrol X where X is number"""
  get_squad_display: String!
  get_squad_registration_choices: [ChoiceNode!]!
  event: NordicMatchNode!

  """competitors ordered on number"""
  competitors: [NordicCompetitorNode!]!

  """ISO-8601 formatted"""
  starts: DateTime!

  """ISO-8601 formatted"""
  stops: DateTime
  get_weapon_groups_display: String!
  get_competence_classes_display: String!
  get_categories_display: String!
  weapon_groups: String!
  competence_classes: String!
  categories: String!
}

"""
PrecisionSquad(id, number, max_competitors, comment, registration, prematch, _locked, created_by, created, updated_by, updated, lock_changed_by, lock_changed, event, starts, stops)
"""
type PrecisionSquadNode implements SquadInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!
  is_locked: Boolean!

  """ISO-8601 formatted"""
  created: DateTime

  """ISO-8601 formatted"""
  updated: DateTime

  """ISO-8601 formatted"""
  lock_changed: DateTime

  """returns next squad in circular mode"""
  get_next_squad: SquadInterface!

  """returns previous squad in circular mode"""
  get_previous_squad: SquadInterface!
  created_by: ShooterNode
  updated_by: ShooterNode
  lock_changed_by: ShooterNode!
  number: Int!

  """max members in squad, default 10"""
  max_competitors: Int!

  """100 char"""
  comment: String!

  """2 char"""
  registration: String!

  """squad shoots prematch"""
  prematch: Boolean!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!

  """competitors indexed typically on stage-number shooting on"""
  competitors_indexed(shift_on: Int! = 1, incl_dnf: Boolean! = false, incl_dqed: Boolean! = false): [CompetitorInterface!]!

  """
  assumes event uses stages & returns a comma separated string of ints for a five-tuple; <verified, unverified, scored, unscored, total_to_score>
  """
  scoring_progress: ScoringProgressNode!
  scoring_progress_at_stage(
    """Stage ID"""
    stage_id: String = null
  ): ScoringProgressNode!

  """returns Squad X. or Posse X. or Patrol X where X is number"""
  get_squad_display: String!
  get_squad_registration_choices: [ChoiceNode!]!
  event: PrecisionMatchNode!

  """competitors ordered on number"""
  competitors: [PrecisionCompetitorNode!]!

  """ISO-8601 formatted"""
  starts: DateTime!

  """ISO-8601 formatted"""
  stops: DateTime
}

"""
GenericSquad(id, number, max_competitors, comment, registration, prematch, _locked, created_by, created, updated_by, updated, lock_changed_by, lock_changed, event, starts, stops)
"""
type GenericSquadNode implements SquadInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!
  is_locked: Boolean!

  """ISO-8601 formatted"""
  created: DateTime

  """ISO-8601 formatted"""
  updated: DateTime

  """ISO-8601 formatted"""
  lock_changed: DateTime

  """returns next squad in circular mode"""
  get_next_squad: SquadInterface!

  """returns previous squad in circular mode"""
  get_previous_squad: SquadInterface!
  created_by: ShooterNode
  updated_by: ShooterNode
  lock_changed_by: ShooterNode!
  number: Int!

  """max members in squad, default 10"""
  max_competitors: Int!

  """100 char"""
  comment: String!

  """2 char"""
  registration: String!

  """squad shoots prematch"""
  prematch: Boolean!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!

  """competitors indexed typically on stage-number shooting on"""
  competitors_indexed(shift_on: Int! = 1, incl_dnf: Boolean! = false, incl_dqed: Boolean! = false): [CompetitorInterface!]!

  """
  assumes event uses stages & returns a comma separated string of ints for a five-tuple; <verified, unverified, scored, unscored, total_to_score>
  """
  scoring_progress: ScoringProgressNode!
  scoring_progress_at_stage(
    """Stage ID"""
    stage_id: String = null
  ): ScoringProgressNode!

  """returns Squad X. or Posse X. or Patrol X where X is number"""
  get_squad_display: String!
  get_squad_registration_choices: [ChoiceNode!]!
  event: GenericMatchNode!

  """competitors ordered on number"""
  competitors: [GenericCompetitorNode!]!

  """ISO-8601 formatted"""
  starts: DateTime!

  """ISO-8601 formatted"""
  stops: DateTime
}

"""Generic Competitor (used in generic sport = no rule defined really"""
type GenericCompetitorNode implements CompetitorInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!

  """
  Returns true if all orders are paid *or* if self._paid = True (if there are no orders)
  """
  is_paid: Boolean!
  is_alread_logged: Boolean!
  is_locked: Boolean!

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime
  details: String!
  scorecards: [ScoreCardInterface!]!
  shooter: ShooterNode!
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode!
  get_club_display: String!
  get_club_short_display: String!
  get_sex_display: String!
  get_region_display: String!
  get_state_display: String!
  get_status_display: String!
  get_code_display: String!

  """max 30 char"""
  first_name: String!

  """max 30 char"""
  last_name: String!

  """value, 1 char"""
  sex: String!

  """max 300 char"""
  email: String!

  """ISO3166A3, 3 char. --- if no region or none"""
  region: String!

  """US state, 3 char"""
  state: String!

  """free text name of club, inferior to club_member if this is set"""
  club: String!

  """is for a club-member, can be used then to access club"""
  club_member: DjangoModelType

  """0 or blank means no number yet set, can take 5 min from registration"""
  number: Int!

  """registraion status, 1 char"""
  status: String!
  code: String!
  comment: String!

  """is competitor in prematch, default is False"""
  prematch: Boolean!

  """license number, 30 char"""
  license: String!
  notify: Boolean!

  """
  used to express if they did not show or stopped/left and this removed from scoring/results
  """
  did_not_finish: Boolean!
  has_accepted_event_data_policy: Boolean!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!

  """
  returns scoring version history iff not stages used in sport (i.e. scores stored directly per competitor)
  """
  scoring_history: [VersionNode!]!

  """
  assumes event uses stages & returns a comma separated string of ints for a five-tuple; <verified, unverified, scored, unscored, total_to_score>
  """
  scoring_progress: ScoringProgressNode!
  payments: [PaymentInterface!]!
  merchandize_orders: [MerchandizeOrderNode!]!

  """
  can current user update instance (e.g. are you allowed to update on yourself, or are you organizer)
  """
  can_current_update: Boolean!

  """
  ICE phone on format +CC-XXXXXXXXXX with leading country code dash phone number
  """
  ice_phone: String!

  """
  phone on format +CC-XXXXXXXXXX with leading country code dash phone number
  """
  phone: String!

  """
  returns result in visible format, if allowed to see for user making request
  """
  get_result_display: String!

  """country calling codes tuples"""
  get_cc_calling_choices: [ChoiceNode!]!
  get_sex_choices: [ChoiceNode!]!
  get_region_choices: [ChoiceNode!]!
  get_state_choices: [ChoiceNode!]!

  """returns list of id's to club-members is any that can compete for"""
  get_club_member_choices: [ChoiceNode!]!

  """returns list if admin/staff"""
  get_status_choices: [ChoiceNode!]!

  """returns list if admin/staff"""
  get_code_choices: [ChoiceNode!]!

  """
  returns list of avilable squads to choose from (if admin or approved competitor)
  """
  get_squad_choices: [ChoiceNode!]!

  """
  returns PIN code for self or if admin or staff of event (allows for off-line valuation if pin set)
  """
  pin: String!
  get_division_display: String!
  get_category_display: String!
  get_classification_display: String!
  get_dq_reason_display: String!
  event: GenericMatchNode!
  squad: GenericSquadNode
  division: String!
  category: String!
  classification: String!
  generic_num: String!
  dq_reason: String!
  get_division_choices: [ChoiceNode!]!
  get_category_choices: [ChoiceNode!]!
  get_classification_choices: [ChoiceNode!]!
  get_dq_reason_choices: [ChoiceNode!]!
}

"""PpcSerieCompetitor"""
type PpcSerieCompetitorNode implements CompetitorInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!

  """
  Returns true if all orders are paid *or* if self._paid = True (if there are no orders)
  """
  is_paid: Boolean!
  is_alread_logged: Boolean!
  is_locked: Boolean!

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime
  details: String!
  scorecards: [ScoreCardInterface!]!
  shooter: ShooterNode!
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode!
  get_club_display: String!
  get_club_short_display: String!
  get_sex_display: String!
  get_region_display: String!
  get_state_display: String!
  get_status_display: String!
  get_code_display: String!

  """max 30 char"""
  first_name: String!

  """max 30 char"""
  last_name: String!

  """value, 1 char"""
  sex: String!

  """max 300 char"""
  email: String!

  """ISO3166A3, 3 char. --- if no region or none"""
  region: String!

  """US state, 3 char"""
  state: String!

  """free text name of club, inferior to club_member if this is set"""
  club: String!

  """is for a club-member, can be used then to access club"""
  club_member: DjangoModelType

  """0 or blank means no number yet set, can take 5 min from registration"""
  number: Int!

  """registraion status, 1 char"""
  status: String!
  code: String!
  comment: String!

  """is competitor in prematch, default is False"""
  prematch: Boolean!

  """license number, 30 char"""
  license: String!
  notify: Boolean!

  """
  used to express if they did not show or stopped/left and this removed from scoring/results
  """
  did_not_finish: Boolean!
  has_accepted_event_data_policy: Boolean!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!

  """
  returns scoring version history iff not stages used in sport (i.e. scores stored directly per competitor)
  """
  scoring_history: [VersionNode!]!

  """
  assumes event uses stages & returns a comma separated string of ints for a five-tuple; <verified, unverified, scored, unscored, total_to_score>
  """
  scoring_progress: ScoringProgressNode!
  payments: [PaymentInterface!]!
  merchandize_orders: [MerchandizeOrderNode!]!

  """
  can current user update instance (e.g. are you allowed to update on yourself, or are you organizer)
  """
  can_current_update: Boolean!

  """
  ICE phone on format +CC-XXXXXXXXXX with leading country code dash phone number
  """
  ice_phone: String!

  """
  phone on format +CC-XXXXXXXXXX with leading country code dash phone number
  """
  phone: String!

  """
  returns result in visible format, if allowed to see for user making request
  """
  get_result_display: String!

  """country calling codes tuples"""
  get_cc_calling_choices: [ChoiceNode!]!
  get_sex_choices: [ChoiceNode!]!
  get_region_choices: [ChoiceNode!]!
  get_state_choices: [ChoiceNode!]!

  """returns list of id's to club-members is any that can compete for"""
  get_club_member_choices: [ChoiceNode!]!

  """returns list if admin/staff"""
  get_status_choices: [ChoiceNode!]!

  """returns list if admin/staff"""
  get_code_choices: [ChoiceNode!]!

  """
  returns list of avilable squads to choose from (if admin or approved competitor)
  """
  get_squad_choices: [ChoiceNode!]!

  """
  returns PIN code for self or if admin or staff of event (allows for off-line valuation if pin set)
  """
  pin: String!
  event: PpcSerieNode!
  get_weapon_class_display: String!
  get_classification_display: String!
  weapon_class: String!
  classification: String!
  waid: String!
  weapon_class_choices: [ChoiceNode!]!
  classification_choices: [ChoiceNode!]!
}

"""IpscSerieCompetitor"""
type IpscSerieCompetitorNode implements CompetitorInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!

  """
  Returns true if all orders are paid *or* if self._paid = True (if there are no orders)
  """
  is_paid: Boolean!
  is_alread_logged: Boolean!
  is_locked: Boolean!

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime
  details: String!
  scorecards: [ScoreCardInterface!]!
  shooter: ShooterNode!
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode!
  get_club_display: String!
  get_club_short_display: String!
  get_sex_display: String!
  get_region_display: String!
  get_state_display: String!
  get_status_display: String!
  get_code_display: String!

  """max 30 char"""
  first_name: String!

  """max 30 char"""
  last_name: String!

  """value, 1 char"""
  sex: String!

  """max 300 char"""
  email: String!

  """ISO3166A3, 3 char. --- if no region or none"""
  region: String!

  """US state, 3 char"""
  state: String!

  """free text name of club, inferior to club_member if this is set"""
  club: String!

  """is for a club-member, can be used then to access club"""
  club_member: DjangoModelType

  """0 or blank means no number yet set, can take 5 min from registration"""
  number: Int!

  """registraion status, 1 char"""
  status: String!
  code: String!
  comment: String!

  """is competitor in prematch, default is False"""
  prematch: Boolean!

  """license number, 30 char"""
  license: String!
  notify: Boolean!

  """
  used to express if they did not show or stopped/left and this removed from scoring/results
  """
  did_not_finish: Boolean!
  has_accepted_event_data_policy: Boolean!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!

  """
  returns scoring version history iff not stages used in sport (i.e. scores stored directly per competitor)
  """
  scoring_history: [VersionNode!]!

  """
  assumes event uses stages & returns a comma separated string of ints for a five-tuple; <verified, unverified, scored, unscored, total_to_score>
  """
  scoring_progress: ScoringProgressNode!
  payments: [PaymentInterface!]!
  merchandize_orders: [MerchandizeOrderNode!]!

  """
  can current user update instance (e.g. are you allowed to update on yourself, or are you organizer)
  """
  can_current_update: Boolean!

  """
  ICE phone on format +CC-XXXXXXXXXX with leading country code dash phone number
  """
  ice_phone: String!

  """
  phone on format +CC-XXXXXXXXXX with leading country code dash phone number
  """
  phone: String!

  """
  returns result in visible format, if allowed to see for user making request
  """
  get_result_display: String!

  """country calling codes tuples"""
  get_cc_calling_choices: [ChoiceNode!]!
  get_sex_choices: [ChoiceNode!]!
  get_region_choices: [ChoiceNode!]!
  get_state_choices: [ChoiceNode!]!

  """returns list of id's to club-members is any that can compete for"""
  get_club_member_choices: [ChoiceNode!]!

  """returns list if admin/staff"""
  get_status_choices: [ChoiceNode!]!

  """returns list if admin/staff"""
  get_code_choices: [ChoiceNode!]!

  """
  returns list of avilable squads to choose from (if admin or approved competitor)
  """
  get_squad_choices: [ChoiceNode!]!

  """
  returns PIN code for self or if admin or staff of event (allows for off-line valuation if pin set)
  """
  pin: String!
  event: IpscSerieNode!
  category: String!
  get_handgun_div_display: String!
  get_handgun_pf_display: String!
  get_rifle_div_display: String!
  get_rifle_pf_display: String!
  get_mini_rifle_div_display: String!
  get_prec_rifle_div_display: String!
  get_prec_rifle_pf_display: String!
  get_shotgun_div_display: String!
  get_air_div_display: String!
  get_pcc_div_display: String!
  get_serie_division_display: String!
  get_category_display: String!
  get_classification_display: String!
  handgun_div: String!
  handgun_pf: String!
  rifle_div: String!
  rifle_pf: String!
  mini_rifle_div: String!
  prec_rifle_div: String!
  prec_rifle_pf: String!
  shotgun_div: String!
  air_div: String!
  pcc_div: String!
  serie_division: String!
  classification: String!
  ics_alias: String!
  uspsa_num: String!
  three_gun_id: String!
  sra_num: String!
  handgun_pf_choices: [ChoiceNode!]!
  rifle_pf_choices: [ChoiceNode!]!
  prec_rifle_pf_choices: [ChoiceNode!]!
  category_choices: [ChoiceNode!]!
  classification_choices: [ChoiceNode!]!
  get_handgun_div_choices: [ChoiceNode!]!
  get_rifle_div_choices: [ChoiceNode!]!
  get_mini_rifle_div_choices: [ChoiceNode!]!
  get_prec_rifle_div_choices: [ChoiceNode!]!
  get_shotgun_div_choices: [ChoiceNode!]!
  get_air_div_choices: [ChoiceNode!]!
  get_pcc_div_choices: [ChoiceNode!]!
  get_serie_division_choices: [ChoiceNode!]!
}

"""
IpscTeam(id, number, name, region, state, status, paid, comment, _locked, created_by, created, updated_by, updated, lock_changed_by, lock_changed, event, handgun_div, rifle_div, mini_rifle_div, prec_rifle_div, shotgun_div, air_div, pcc_div, tournament_division, category, classification, _div_place, _div_percent, _div_points, _combined_place, _combined_percent, _combined_points)
"""
type IpscTeamNode implements TeamInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!
  is_locked: Boolean!

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode!
  get_state_display: String!
  get_region_display: String!
  get_status_display: String!
  number_of_team_members: Int!
  number: Int!

  """char 45"""
  name: String!

  """region 3 char"""
  region: String!
  state: String!

  """registration status, 1 char"""
  status: String!
  paid: Boolean!

  """internal, 300 char"""
  comment: String!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_member: TeamMemberInterface!
  get_state_choices: [ChoiceNode!]!
  get_region_choices: [ChoiceNode!]!
  get_status_choices: [ChoiceNode!]!
  event: IpscMatchNode!
  members: [IpscTeamMemberNode!]!
  div_place: Int!
  div_percent: Decimal!
  div_points: Decimal!
  combined_place: Int!
  combined_percent: Decimal!
  combined_points: Decimal!
  get_handgun_div_display: String!
  get_rifle_div_display: String!
  get_mini_rifle_div_display: String!
  get_prec_rifle_div_display: String!
  get_shotgun_div_display: String!
  get_air_div_display: String!
  get_pcc_div_display: String!
  get_tournament_division_display: String!
  get_category_display: String!
  get_classification_display: String!
  handgun_div: String!
  rifle_div: String!
  mini_rifle_div: String!
  prec_rifle_div: String!
  shotgun_div: String!
  air_div: String!
  pcc_div: String!
  tournament_division: String!
  category: String!
  classification: String!
  category_choices: [ChoiceNode!]!
  classification_choices: [ChoiceNode!]!
  get_handgun_div_choices: [ChoiceNode!]!
  get_rifle_div_choices: [ChoiceNode!]!
  get_mini_rifle_div_choices: [ChoiceNode!]!
  get_prec_rifle_div_choices: [ChoiceNode!]!
  get_shotgun_div_choices: [ChoiceNode!]!
  get_air_div_choices: [ChoiceNode!]!
  get_pcc_div_choices: [ChoiceNode!]!
  get_tournament_division_choices: [ChoiceNode!]!
}

"""
IpscTeamMember(id, status, comment, _locked, created_by, created, updated_by, updated, lock_changed_by, lock_changed, team, competitor)
"""
type IpscTeamMemberNode implements TeamMemberInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!
  is_locked: Boolean!

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode!
  get_status_display: String!

  """registration status of team member"""
  status: String!

  """internal, 300 char"""
  comment: String!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!
  get_status_choices: [ChoiceNode!]!
  team: IpscTeamNode!
  competitor: IpscCompetitorNode!
}

"""
PpcTeam(id, number, name, region, state, status, paid, comment, _locked, created_by, created, updated_by, updated, lock_changed_by, lock_changed, event, weapon_class, classification, _total_points, _string)
"""
type PpcTeamNode implements TeamInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!
  is_locked: Boolean!

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode!
  get_state_display: String!
  get_region_display: String!
  get_status_display: String!
  number_of_team_members: Int!
  number: Int!

  """char 45"""
  name: String!

  """region 3 char"""
  region: String!
  state: String!

  """registration status, 1 char"""
  status: String!
  paid: Boolean!

  """internal, 300 char"""
  comment: String!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_member: TeamMemberInterface!
  get_state_choices: [ChoiceNode!]!
  get_region_choices: [ChoiceNode!]!
  get_status_choices: [ChoiceNode!]!
  event: PpcMatchNode!
  members: [PpcTeamMemberNode!]!
  total_points: Int!

  """score of team as comma separated string of integers X 10 9 8 7 0 M"""
  string: String!
  get_weapon_class_display: String!
  get_classification_display: String!
  weapon_class: String!
  classification: String!
  weapon_class_choices: [ChoiceNode!]!
  classification_choices: [ChoiceNode!]!
}

"""
PpcTeamMember(id, status, comment, _locked, created_by, created, updated_by, updated, lock_changed_by, lock_changed, team, competitor)
"""
type PpcTeamMemberNode implements TeamMemberInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!
  is_locked: Boolean!

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode!
  get_status_display: String!

  """registration status of team member"""
  status: String!

  """internal, 300 char"""
  comment: String!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!
  get_status_choices: [ChoiceNode!]!
  team: PpcTeamNode!
  competitor: PpcCompetitorNode!
}

"""
CmpTeam(id, number, name, region, state, status, paid, comment, _locked, created_by, created, updated_by, updated, lock_changed_by, lock_changed, event, rifle_div, rimfire_rifle_div, pistol_div, rimfire_pistol_div, category, _place, _combined_place, _tot_points)
"""
type CmpTeamNode implements TeamInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!
  is_locked: Boolean!

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode!
  get_state_display: String!
  get_region_display: String!
  get_status_display: String!
  number_of_team_members: Int!
  number: Int!

  """char 45"""
  name: String!

  """region 3 char"""
  region: String!
  state: String!

  """registration status, 1 char"""
  status: String!
  paid: Boolean!

  """internal, 300 char"""
  comment: String!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_member: TeamMemberInterface!
  get_state_choices: [ChoiceNode!]!
  get_region_choices: [ChoiceNode!]!
  get_status_choices: [ChoiceNode!]!
  event: CmpMatchNode!
  members: [CmpTeamMemberNode!]!
  combined_place: Int!
  place: Int!
  tot_points: Int!
  get_rifle_div_display: String!
  get_rimfire_rifle_div_display: String!
  get_pistol_div_display: String!
  get_rimfire_pistol_div_display: String!
  get_category_display: String!
  rifle_div: String!
  rimfire_rifle_div: String!
  pistol_div: String!
  rimfire_pistol_div: String!
  category: String!
  get_category_choices: [ChoiceNode!]!
  rifle_div_choices: [ChoiceNode!]!
  get_rimfire_rifle_div_choices: [ChoiceNode!]!
  get_pistol_div_choices: [ChoiceNode!]!
  get_rimfire_pistol_div_choices: [ChoiceNode!]!
}

"""
CmpTeamMember(id, status, comment, _locked, created_by, created, updated_by, updated, lock_changed_by, lock_changed, team, competitor)
"""
type CmpTeamMemberNode implements TeamMemberInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!
  is_locked: Boolean!

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode!
  get_status_display: String!

  """registration status of team member"""
  status: String!

  """internal, 300 char"""
  comment: String!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!
  get_status_choices: [ChoiceNode!]!
  team: CmpTeamNode!
  competitor: CmpCompetitorNode!
}

"""
IdpaTeam(id, number, name, region, state, status, paid, comment, _locked, created_by, created, updated_by, updated, lock_changed_by, lock_changed, event, handgun_div, rifle_div, shotgun_div, dmg_div, category, classification, _score)
"""
type IdpaTeamNode implements TeamInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!
  is_locked: Boolean!

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode!
  get_state_display: String!
  get_region_display: String!
  get_status_display: String!
  number_of_team_members: Int!
  number: Int!

  """char 45"""
  name: String!

  """region 3 char"""
  region: String!
  state: String!

  """registration status, 1 char"""
  status: String!
  paid: Boolean!

  """internal, 300 char"""
  comment: String!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_member: TeamMemberInterface!
  get_state_choices: [ChoiceNode!]!
  get_region_choices: [ChoiceNode!]!
  get_status_choices: [ChoiceNode!]!
  event: IdpaMatchNode!
  members: [IdpaTeamMemberNode!]!
  score: Decimal!
  get_handgun_div_display: String!
  get_rifle_div_display: String!
  get_shotgun_div_display: String!
  get_dmg_div_display: String!
  get_category_display: String!
  get_classification_display: String!
  handgun_div: String!
  rifle_div: String!
  shotgun_div: String!
  dmg_div: String!
  category: String!
  classification: String!
  get_handgun_div_choices: [ChoiceNode!]!
  get_rifle_div_choices: [ChoiceNode!]!
  get_shotgun_div_choices: [ChoiceNode!]!
  get_dmg_div_choices: [ChoiceNode!]!
  get_category_choices: [ChoiceNode!]!
  get_classification_choices: [ChoiceNode!]!
}

"""
IdpaTeamMember(id, status, comment, _locked, created_by, created, updated_by, updated, lock_changed_by, lock_changed, team, competitor)
"""
type IdpaTeamMemberNode implements TeamMemberInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!
  is_locked: Boolean!

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode!
  get_status_display: String!

  """registration status of team member"""
  status: String!

  """internal, 300 char"""
  comment: String!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!
  get_status_choices: [ChoiceNode!]!
  team: IdpaTeamNode!
  competitor: IdpaCompetitorNode!
}

"""
SassTeam(id, number, name, region, state, status, paid, comment, _locked, created_by, created, updated_by, updated, lock_changed_by, lock_changed, event, main_cat, side_cat, long_cat, mounted_cat, _overall_place, _overall_rank, _overall_match_time, _category_place, _category_rank, _category_match_time, dq)
"""
type SassTeamNode implements TeamInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!
  is_locked: Boolean!

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode!
  get_state_display: String!
  get_region_display: String!
  get_status_display: String!
  number_of_team_members: Int!
  number: Int!

  """char 45"""
  name: String!

  """region 3 char"""
  region: String!
  state: String!

  """registration status, 1 char"""
  status: String!
  paid: Boolean!

  """internal, 300 char"""
  comment: String!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_member: TeamMemberInterface!
  get_state_choices: [ChoiceNode!]!
  get_region_choices: [ChoiceNode!]!
  get_status_choices: [ChoiceNode!]!
  event: DjangoModelType!
  members: [SassTeamMemberNode!]!
  overall_place: Int!
  overall_rank: Int!
  overall_match_time: Decimal!
  category_place: Int!
  category_rank: Int!
  category_match_time: Decimal!
  get_main_cat_display: String!
  get_side_cat_display: String!
  get_long_cat_display: String!
  get_mounted_cat_display: String!
  main_cat: String!
  side_cat: String!
  long_cat: String!
  mounted_cat: String!
  dq: Boolean!
  get_main_cat_choices: [ChoiceNode!]!
  get_side_cat_choices: [ChoiceNode!]!
  get_long_cat_choices: [ChoiceNode!]!
  get_mounted_cat_choices: [ChoiceNode!]!
}

"""
SassTeamMember(id, status, comment, _locked, created_by, created, updated_by, updated, lock_changed_by, lock_changed, team, competitor)
"""
type SassTeamMemberNode implements TeamMemberInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!
  is_locked: Boolean!

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode!
  get_status_display: String!

  """registration status of team member"""
  status: String!

  """internal, 300 char"""
  comment: String!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!
  get_status_choices: [ChoiceNode!]!
  team: SassTeamNode!
  competitor: SassCompetitorNode!
}

"""
Fältskjutning; A, B, C & R - 3 shooters and 2 reserv. C Lady, C Junior and C Veteran - 2 shooters and 2 reserv 
"""
type NordicTeamNode implements TeamInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!
  is_locked: Boolean!

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode!
  get_state_display: String!
  get_region_display: String!
  get_status_display: String!
  number_of_team_members: Int!
  number: Int!

  """char 45"""
  name: String!

  """region 3 char"""
  region: String!
  state: String!

  """registration status, 1 char"""
  status: String!
  paid: Boolean!

  """internal, 300 char"""
  comment: String!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_member: TeamMemberInterface!
  get_state_choices: [ChoiceNode!]!
  get_region_choices: [ChoiceNode!]!
  get_status_choices: [ChoiceNode!]!
  event: NordicMatchNode!
  members: [NordicTeamMemberNode!]!
  place: Int!
  combined_place: Int!
  tot_hits: Int!
  tot_inner_hits: Int!
  tot_targets_hit: Int!
  tot_precision_points: Int!
  get_weapon_groups_display: String!
  get_competence_classes_display: String!
  get_categories_display: String!
  weapon_groups: String!
  competence_classes: String!
  categories: String!
  get_weapon_groups_choices: [ChoiceNode!]!
  get_competence_classes_choices: [ChoiceNode!]!
  get_categories_choices: [ChoiceNode!]!
}

"""
NordicTeamMember(id, status, comment, _locked, created_by, created, updated_by, updated, lock_changed_by, lock_changed, team, competitor)
"""
type NordicTeamMemberNode implements TeamMemberInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!
  is_locked: Boolean!

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode!
  get_status_display: String!

  """registration status of team member"""
  status: String!

  """internal, 300 char"""
  comment: String!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!
  get_status_choices: [ChoiceNode!]!
  team: NordicTeamNode!
  competitor: NordicCompetitorNode!
}

"""
PrecisionTeam(id, number, name, region, state, status, paid, comment, _locked, created_by, created, updated_by, updated, lock_changed_by, lock_changed, event, kind, division, category, classification, _combined_place, _division_place, _category_place, _classification_place, _total_time, _decimal_points, _points, _deductions, _score, _s)
"""
type PrecisionTeamNode implements TeamInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!
  is_locked: Boolean!

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode!
  get_state_display: String!
  get_region_display: String!
  get_status_display: String!
  number_of_team_members: Int!
  number: Int!

  """char 45"""
  name: String!

  """region 3 char"""
  region: String!
  state: String!

  """registration status, 1 char"""
  status: String!
  paid: Boolean!

  """internal, 300 char"""
  comment: String!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_member: TeamMemberInterface!
  get_state_choices: [ChoiceNode!]!
  get_region_choices: [ChoiceNode!]!
  get_status_choices: [ChoiceNode!]!
  event: PrecisionMatchNode!
  members: [PrecisionTeamMemberNode!]!
  combined_place: Int!
  division_place: Int!
  category_place: Int!
  classification_place: Int!
  total_time: Decimal!
  decimal_points: Decimal!
  points: Int!
  deductions: Int!
  score: Int!
  s: String!
  get_kind_display: String!
  get_division_display: String!
  get_classifications_display: String!
  get_category_display: String!
  kind: String!
  division: String!
  category: String!
  classification: String!
  get_kind_choices: [ChoiceNode!]!
  get_division_choices: [ChoiceNode!]!
  get_classification_choices: [ChoiceNode!]!
  get_category_choices: [ChoiceNode!]!
}

"""
GenericTeam(id, number, name, region, state, status, paid, comment, _locked, created_by, created, updated_by, updated, lock_changed_by, lock_changed, event)
"""
type GenericTeamNode implements TeamInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!
  is_locked: Boolean!

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode!
  get_state_display: String!
  get_region_display: String!
  get_status_display: String!
  number_of_team_members: Int!
  number: Int!

  """char 45"""
  name: String!

  """region 3 char"""
  region: String!
  state: String!

  """registration status, 1 char"""
  status: String!
  paid: Boolean!

  """internal, 300 char"""
  comment: String!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!

  """
  returns a abstract class that can be used to call methods and functions on
  """
  get_abstract_member: TeamMemberInterface!
  get_state_choices: [ChoiceNode!]!
  get_region_choices: [ChoiceNode!]!
  get_status_choices: [ChoiceNode!]!
  event: GenericMatchNode!
  members: [GenericTeamMemberNode!]!
}

"""
GenericTeamMember(id, status, comment, _locked, created_by, created, updated_by, updated, lock_changed_by, lock_changed, team, competitor)
"""
type GenericTeamMemberNode implements TeamMemberInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!
  is_locked: Boolean!

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode!
  get_status_display: String!

  """registration status of team member"""
  status: String!

  """internal, 300 char"""
  comment: String!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!
  get_status_choices: [ChoiceNode!]!
  team: GenericTeamNode!
  competitor: GenericCompetitorNode!
}

"""
PrecisionTeamMember(id, status, comment, _locked, created_by, created, updated_by, updated, lock_changed_by, lock_changed, team, competitor)
"""
type PrecisionTeamMemberNode implements TeamMemberInterface {
  id: ID!
  get_content_type_key: Int!
  get_content_type_model: String!
  is_locked: Boolean!

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!

  """ISO-8601 formatted"""
  lock_changed: DateTime
  created_by: ShooterNode!
  updated_by: ShooterNode!
  lock_changed_by: ShooterNode!
  get_status_display: String!

  """registration status of team member"""
  status: String!

  """internal, 300 char"""
  comment: String!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!
  get_status_choices: [ChoiceNode!]!
  team: PrecisionTeamNode!
  competitor: PrecisionCompetitorNode!
}

type RootQuery {
  """
  Calculates the valid active roles between Subject and Target. First                     gets all generic roles of subject, then gets model roles between subject and target model                     and last but not least gets instance roles between subject and target instance and returns a                     set of all these roles.
  """
  get_active_roles(su_ct: Int!, su_id: Int!, tg_ct: Int!, tg_id: Int!): [String!]!

  """
  Calculates the valid active roles between Current User (as subject) and Target. First                             gets all generic roles of subject, then gets model roles between subject and target model                             and last but not least gets instance roles between subject and target instance and returns a                             set of all these roles.
  """
  get_current_active_roles(tg_ct: Int!, tg_id: Int!): [String!]!

  """
  has Subject (sub) permission to perform Operation on Object (obj) in relation to Target (tgt)
  """
  has_permission(ob_ct: Int!, ob_id: Int!, operation: String!, su_ct: Int!, su_id: Int!, tg_ct: Int!, tg_id: Int!): Boolean!

  """
  has Current user (subject) permission to perform Operation on Object (objct/objid) in relation to Group (id)
  """
  has_current_permission_wrt_group(ob_ct: Int!, ob_id: Int!, operation: String!): Boolean!

  """
  has Current user (subject) permission to perform Operation on Object (ct/id), possibly in relation to Target (tgt)
  """
  has_current_extended_permission(ob_ct: Int!, ob_id: Int!, operation: String!, tg_ct: Int!, tg_id: Int!): Boolean!

  """returns a un-instantiated user with default only values & choices"""
  get_abstract_user: ShooterNode!
  me: ShooterNode

  """
  returns shooter/user, access to data depends on if this is yourself, a friend or someone else and their settings
  """
  shooter(id: Int!): ShooterNode!

  """
  returns shooter/user, access to data depends on if this is yourself, a friend or someone else and their settings
  """
  shooters(
    """free text to search for in first name (case insentitive)"""
    first_name: String = null

    """free text to search for in last name (case insentitive)"""
    last_name: String = null

    """free text to search for in email etc."""
    email: String = null
  ): [ShooterNode!]!

  """
  Returns a firearm if you are allowed to see it (friend, premium or within org)
  """
  firearm(id: Int!): FirearmNode!

  """Search for Firearms, returns public or friends"""
  firearms(
    """free text to search for in name etc."""
    search: String = null

    """key for caliber"""
    caliber: String = null

    """key for model/brand"""
    make: String = null

    """can be; rifle, shotgun, handgun or air"""
    weapon_generic: String = null

    """explicit weapon-type as used in this field."""
    weapon_type: String = null
  ): [FirearmNode!]!

  """
  Returns a sight if you are allowed to see it (friend, premium or within org)
  """
  sight(id: Int!): SightNode!

  """Search for Sights, returns public or friends"""
  sights(
    """free text to search for name, make, brand, etc."""
    search: String = null

    """key for model/brand"""
    make: String = null

    """free text for model"""
    model: String = null
  ): [SightNode!]!

  """
  Returns a suppressor if you are allowed to see it (friend, premium or within org)
  """
  suppressor(id: Int!): SuppressorNode!

  """Search for Suppressors, returns public or friends"""
  suppressors(
    """free text to search for name, make, brand, etc."""
    search: String = null

    """key for model/brand"""
    make: String = null

    """free text for model"""
    model: String = null

    """key for caliber"""
    caliber: String = null
  ): [SuppressorNode!]!

  """
  Returns a handloadrecipe if you are allowed to see it (friend, premium or within org)
  """
  handload(id: Int!): HandloadRecipeNode!

  """Search for Handload recipes, returns public or friends"""
  handloads(
    """free text to search for name, make, brand, powder etc."""
    search: String = null

    """key for caliber"""
    caliber: String = null

    """bullet weight in gram, two decimals max"""
    bullet_weight_gram: String = null
  ): [HandloadRecipeNode!]!

  """
  Returns ammunition if you are allowed to see it (friend, premium or within org)
  """
  ammunition(id: Int!): AmmunitionNode!

  """Search for Ammunition, returns public or friends"""
  ammunitions(
    """free text to search for in name etc."""
    search: String = null

    """key for caliber"""
    caliber: String = null
  ): [AmmunitionNode!]!

  """
  Returns a Logentry if you are allowed to see it (friend, premium or within org)
  """
  logentry(id: Int!): LogEntryNode!
  get_abstract_logentry: LogEntryNode!
  get_abstract_firearm: FirearmNode!
  get_abstract_sight: SightNode!
  get_abstract_suppressor: SuppressorNode!
  get_abstract_handload: HandloadRecipeNode!
  get_abstract_ammunition: AmmunitionNode!

  """
  returns events matching criterias, limteded to max 100, sorted on start date
  """
  events(
    """free text to search for in name etc."""
    search: String = null

    """date formatted as YYYY-MM-DD"""
    starts_after: String = null

    """date formatted as YYYY-MM-DD"""
    starts_before: String = null

    """
    one or more comma separated SSI event status choices; dr,on,ol,pr,cp,cs
    """
    status: String = null

    """region code, ISO3601"""
    region: String = null

    """state, if supplied will set region to USA"""
    state: String = null

    """rule in SSI event coding"""
    rule: String = null

    """sub_rule in SSI event coding"""
    sub_rule: String = null

    """as applicable according to rule/sub-rule"""
    firearms: String = null

    """level-id if sport supports this"""
    level: String = null

    """matches that I am related to with some role"""
    has_role: Boolean = null
  ): [EventInterface!]!

  """Returns a match/series or None given content_type id and event id"""
  event(
    """content-type of event"""
    content_type: Int!

    """id of event"""
    id: String!
  ): EventInterface!

  """returns abstract match or serie used to get field-choices e.g."""
  get_abstract_event(rule: String!, sub_rule: String!, serie_type: String = null, firearms: String = null, classifier: String = null): EventInterface!

  """returns the squad for content_type and id"""
  squad(
    """content-type of squad"""
    content_type: Int!

    """id of squad"""
    id: String!
  ): SquadInterface!

  """a specific team"""
  team(
    """content-type of team"""
    content_type: Int!

    """id of team"""
    id: String!
  ): TeamInterface!

  """a specific team-member"""
  teammember(
    """content-type of team-member"""
    content_type: Int!

    """id of team-member"""
    id: String!
  ): TeamMemberInterface!

  """a specific stage"""
  stage(content_type: Int!, id: String!): StageInterface!

  """a specific competitor"""
  competitor(content_type: Int!, id: String!): CompetitorInterface!

  """a specific scorecard"""
  scorecard(content_type: Int!, id: String!): ScoreCardInterface!

  """returns scoring-progress for squad on stage"""
  squad_scoring_progress_at_stage(
    """content-type of squad"""
    content_type: Int!

    """id of squad"""
    sq_id: String!

    """content-type of stage"""
    st_content_type: Int!

    """id of stage"""
    st_id: String!
  ): ScoringProgressNode!

  """returns scoring-progress for squad on stage"""
  squad_scoring_progress_for_string(
    """content-type of squad"""
    content_type: Int!

    """id of squad"""
    id: Int!
    index: String!
  ): ScoringProgressNode!

  """
  returns scoring-progress for all competitors (all approved & non-DQ) for a string in event
  """
  event_scoring_progress_for_string(
    """content-type of event"""
    content_type: Int!

    """id of event"""
    id: String!
    index: Int!
  ): ScoringProgressNode!

  """
  returns list of tuples <competitor, true/false if scoring started> for all competitors                                 (all approved) in squad in event at stage (optional), set shift-on to stage-number for 1:1 indexing with SSI
  """
  squad_competitors_indexed_w_wo_scorecards(
    """content-type of event"""
    content_type: Int!

    """id of squad"""
    sq_id: String!

    """content-type of stage"""
    st_content_type: Int!

    """id of stage"""
    st_id: String!
    shift_on: Int! = 1
    incl_dnf: Boolean! = false
    incl_dqed: Boolean! = false
  ): [CompetitorScoringNode!]!

  """
  returns list of tuples <competitor, true/false if scoring started> for all competitors                                     (all approved) in squad in event at stage (optional)
  """
  squad_competitors_w_wo_scorecards(
    """content-type of event"""
    content_type: Int!

    """id of squad"""
    sq_id: String!

    """content-type of stage"""
    st_content_type: Int!

    """id of stage"""
    st_id: String!
    incl_dnf: Boolean! = false
    incl_dqed: Boolean! = false
  ): [CompetitorScoringNode!]!

  """
  returns list of tuples <competitor, true/false if scoring started> for all competitors                                 (all approved) on stage in event for a squad (optional), set shift-on to stage-number for 1:1 indexing with SSI
  """
  stage_competitors_indexed_w_wo_scorecards(
    """content-type of event"""
    content_type: Int!

    """id of stage"""
    st_id: String!

    """content-type of squad"""
    sq_content_type: Int!

    """id of squad"""
    sq_id: String!
    shift_on: Int! = 1
    incl_dnf: Boolean! = false
    incl_dqed: Boolean! = false
  ): [CompetitorScoringNode!]!

  """
  returns list of tuples <competitor, true/false if scoring started> for all competitors                                 (all approved) on a stage within squad (optional)
  """
  stage_competitors_w_wo_scorecards(
    """content-type of event"""
    content_type: Int!

    """id of stage"""
    st_id: String!

    """content-type of squad"""
    sq_content_type: Int!

    """id of squad"""
    sq_id: String!
    incl_dnf: Boolean! = false
    incl_dqed: Boolean! = false
  ): [CompetitorScoringNode!]!
  payment(
    """content-type for payment"""
    content_type: Int!

    """id for payment"""
    id: String!
  ): PaymentInterface!
  get_abstract_merchandize: MerchandizeNode!
  merchandize(id: Int!): MerchandizeNode!
  merchandize_order(id: Int!): MerchandizeOrderNode!

  """Returns a Friend"""
  friend(id: Int!): FriendNode!

  """Returns a Shoot Group"""
  group(id: Int!): GroupNode!

  """Returns a group member, if you are allowed to see it"""
  group_member(id: Int!): GroupMemberNode!

  """Returns a organization, if you are allowed to see it"""
  organization(id: Int!): OrganizationNode!

  """Returns a organizations matching"""
  organizations(
    """free text to search for in name etc."""
    search: String!
    region: String = null
  ): [OrganizationNode!]!
  get_abstract_organization: OrganizationNode!

  """Returns a organization member, if you are allowed to see it"""
  organization_member(id: Int!): OrganizationMemberNode!
}

"""Handload Recipe Node"""
type HandloadRecipeNode {
  get_velocity_w_unit: String!
  get_oal_w_unit: String!
  get_powder_weight_w_unit: String!
  get_powder_w_unit: String!
  get_powder_cost_w_unit: String!
  get_powder_cost_per_round_w_unit: String!
  get_bullet_weight_w_unit: String!
  get_bullet_w_unit: String!
  get_bullet_cost_per_round_w_unit: String!
  get_bullet_length_w_unit: String!
  get_bullet_diameter_w_unit: String!
  get_brass_cost_per_round_w_unit: String!
  get_primer_cost_per_round_w_unit: String!
  get_other_cost_per_round_w_unit: String!
  get_cost_per_round_w_unit: String!
  get_cost_whole_batch_w_unit: String!
  get_input_units_display: String!
  get_output_units_display: String!
  get_caliber_display: String!
  get_purpose_display: String!
  get_bullet_bc_drag_model_display: String!
  get_currency_display: String!
  organization: DjangoModelType
  input_units: String!

  """not used, unclear"""
  output_units: String!

  """name/reference of load, char 40"""
  name: String!

  """caliber for load, char 8"""
  caliber: String!

  """purpose of load, char 400 comma separated list"""
  purpose: String!

  """Take caution, special usage, requirements or other"""
  take_caution: Boolean!
  velocity_ms: Decimal!
  velocity_fps: Decimal!
  oal_mm: Decimal!
  oal_inches: Decimal!

  """powder, char 40"""
  powder_make: String!

  """powder, char 40"""
  powder_lot: String!
  powder_weight_gram: Decimal!
  powder_weight_grains: Decimal!
  powder_cost_500_gram: Decimal!
  powder_cost_pound: Decimal!

  """powder, char 40"""
  bullet_make: String!
  bullet_weight_gram: Decimal!
  bullet_weight_grains: Decimal!
  bullet_length_mm: Decimal!
  bullet_length_inches: Decimal!
  bullet_diameter_mm: Decimal!
  bullet_diameter_inches: Decimal!

  """BC, max 9999999.999"""
  bullet_bc: Decimal!

  """BC Drag model, 3 char, e.g. G1"""
  bullet_bc_drag_model: String!

  """bullet cost, max 99999999.99"""
  bullet_cost: Decimal!

  """cost per round, max 99999999.99"""
  other_cost_per_round: Decimal!

  """powder, char 40"""
  primer_make: String!

  """primer cost, max 99999999.99"""
  primer_cost: Decimal!

  """powder, char 40"""
  brass_make: String!

  """brass cost, max 99999999.99"""
  brass_cost: Decimal!

  """ISO4217, 3 char"""
  currency: String!
  v1_ms: Decimal!
  v2_ms: Decimal!
  v3_ms: Decimal!
  v4_ms: Decimal!
  v5_ms: Decimal!
  v6_ms: Decimal!
  v7_ms: Decimal!
  v8_ms: Decimal!
  v9_ms: Decimal!
  v10_ms: Decimal!
  v1_fps: Decimal!
  v2_fps: Decimal!
  v3_fps: Decimal!
  v4_fps: Decimal!
  v5_fps: Decimal!
  v6_fps: Decimal!
  v7_fps: Decimal!
  v8_fps: Decimal!
  v9_fps: Decimal!
  v10_fps: Decimal!
  pw1_gram: Decimal!
  pw2_gram: Decimal!
  pw3_gram: Decimal!
  pw4_gram: Decimal!
  pw5_gram: Decimal!
  pw6_gram: Decimal!
  pw7_gram: Decimal!
  pw8_gram: Decimal!
  pw9_gram: Decimal!
  pw10_gram: Decimal!
  pw1_grains: Decimal!
  pw2_grains: Decimal!
  pw3_grains: Decimal!
  pw4_grains: Decimal!
  pw5_grains: Decimal!
  pw6_grains: Decimal!
  pw7_grains: Decimal!
  pw8_grains: Decimal!
  pw9_grains: Decimal!
  pw10_grains: Decimal!

  """for 3rd party apps, never used within SSI or accessed, max 500 char"""
  custom_api: String!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!
  get_input_units_choices: [ChoiceNode!]!
  get_output_units_choices: [ChoiceNode!]!
  get_caliber_choices: [ChoiceNode!]!
  get_purpose_choices: [ChoiceNode!]!
  get_bullet_bc_drag_model_choices: [ChoiceNode!]!
  get_currency_choices: [ChoiceNode!]!
}

"""
returns a competitor + if scoring is started or not in this context (stage/event)
"""
type CompetitorScoringNode {
  competitor: CompetitorInterface!
  scoring_started: Boolean!
}

"\n        Group Node\n        All of SSI has an RBAC system in the backend that can be re-used for matches and organizations. This means that every event or org has a Group associated with it where users can be added/removed in this group and be assigned as Admin (do everything), Staff (do a little less but still update and change things) and Assistants (less, e.g. only enter scores).\n        This means for someone to enter scores (and be allowed to do this over GQL) they will need to be admin/staff or assistant in a group assigned to this event.\n        Groups can then be Permanent meaning they can be reused (not needing to create it again for your club) for a new event, or an existing event changed to use this group.\n\n    "
type GroupNode {
  id: ID!
  created_by: ShooterNode!
  updated_by: ShooterNode!

  """ISO-8601 formatted"""
  created: DateTime!

  """ISO-8601 formatted"""
  updated: DateTime!
  active: Boolean!
  name: String!
  description: String!
  auto_assign_role: String!
  permanent: Boolean!
  public: Boolean!

  """events managed by group"""
  events: EventInterface!

  """organizations managed by group"""
  organizations: [OrganizationNode!]!

  """members, aka accepted invitations"""
  members: [GroupMemberNode!]!

  """pending member-invitations to join"""
  invitations_pending: [GroupMemberNode!]!

  """rejected member-invitations to join"""
  invitations_rejected: [GroupMemberNode!]!

  """cancelled member-invitations to join"""
  invitations_cancelled: [GroupMemberNode!]!

  """returns an un-instatiate member, can be used to get choices/defaults"""
  get_abstract_member: GroupMemberNode!
  get_auto_assign_role_choices: [ChoiceNode!]!
}

"""
ShootMember (or a membership in a group once accepted, prior to this invitation/request to join one)
"""
type GroupMemberNode {
  id: ID!
  user: DjangoModelType!
  created_by: ShooterNode!

  """ISO-8601 formatted"""
  expires: DateTime
  get_officials_display: String!
  get_org_officials_display: String!
  get_status_display: String!
  get_role_display: String!
  group: DjangoModelType!
  role: DjangoModelType!
  officials: String!
  org_officials: String!
  status: String!

  """absolute URL to access on SSI web"""
  get_full_absolute_url: String!
  get_status_choices: [ChoiceNode!]!

  """officials choices value/display tuples"""
  get_officials_choices: [ChoiceNode!]!

  """org officials choices value/display tuples"""
  get_org_officials_choices: [ChoiceNode!]!
}

"""All available SSI mutations. Most of them require authentication."""
type Mutation {
  "Obtain JSON web token for given user.\n\n    Allow to perform login with different fields, The fields are defined\n    on settings.\n\n    Not verified users can log in by default. This can be changes on\n    settings.\n\n    If user is archived, make it unarchived and return\n    `unarchiving=True` on OutputBase.\n    "
  token_auth(email: String!, password: String!): ObtainJSONWebTokenType!

  "### Checks if a token is not expired and correct.\n\n    *Note that this is not for refresh tokens.*\n    "
  verify_token(token: String!): VerifyTokenType!

  "### refreshToken to generate a new login token:\n\n    *Use this only if `JWT_LONG_RUNNING_REFRESH_TOKEN` is True*\n\n    using the refresh-token you already got during authorization, and\n    obtain a brand-new token (and possibly a new refresh token if you\n    revoked the previous). This is an alternative to log in when your\n    token expired.\n    "
  refresh_token(refresh_token: String!, revoke_refresh_token: Boolean!): ObtainJSONWebTokenType!

  "### Suspends a refresh token.\n\n    *token must exist to be revoked.*\n    "
  revoke_token(refresh_token: String!): RevokeRefreshTokenType!

  "Register user with fields defined in the settings. If the email field of\n    the user model is part of the registration fields (default), check if there\n    is no user with that email.\n\n    If it exists, it does not register the user, even if the email field\n    is not defined as unique (default of the default django user model).\n\n    When creating the user, it also creates a `UserStatus` related to\n    that user, making it possible to track if the user is archived /\n    verified.\n\n    Send account verification email.\n\n    If allowed to not verified users login, return token.\n    "
  register(region: String!, password2: String!, sex: String!, email: String!, password1: String!, timezone: String!): MutationNormalOutput!

  "Update user model fields, defined on settings.\n\n    User must be verified.\n    "
  update_account(first_name: String, last_name: String): MutationNormalOutput!

  "Change account password when user knows the old password.\n\n    A new token and refresh token are sent. User must be verified.\n    "
  password_change(new_password2: String!, new_password1: String!, old_password: String!): ObtainJSONWebTokenType!
  send_password_reset_email(email: String!): MutationNormalOutput!

  "Change user password without old password.\n\n    Receive the token that was sent by email.\n\n    If token and new passwords are valid, update user password and in\n    case of using refresh tokens, revoke all of them.\n\n    Also, if user has not been verified yet, verify it.\n    "
  password_reset(token: String!, new_password1: String!, new_password2: String!): MutationNormalOutput!

  "\n    Set user password - for password-less registration\n\n    Receive the token that was sent by email.\n\n    If token and new passwords are valid, set\n    user password and in case of using refresh\n    tokens, revoke all of them.\n\n    Also, if user has not been verified yet, verify it.\n    "
  password_set(token: String!, new_password1: String!, new_password2: String!): MutationNormalOutput!

  "Social Auth takes OAuth Provider and OAuth Access Token\n\n    Allow user to perform social auth for the given OAuth provider and OAuth Access token\n    :returns\n        user: Entire User Object (Get your social data using user.social_user)\n        errors: Any error occurred in the process of getting the Social User\n    "
  social_auth(access_token: String!, provider: String!): SocialType!

  "\nCreate any event. Must specify rule (and possibly sub-rule & serie-type) for correct validation/creation\n        Shoot'n Score It support lots and lots of sports and code have both for historical reasons and\n        for logical reasons, as some sports are dialects of each other, overloaded several sport on\n        same models. For example IpscMatch if used for IPSC, USPSA & SRA as these all are closely related.\n\n        The following is a listing of with each model and sport supported in hierarchy and also exactly which\n        rules and sub-rules that they use.\n\n        This is also a listing that can be used when generating search or create-event logic.\n\n            CmpMatch - Civilian Markmanship Program rule:cm\n\n                    CMP Issued Rifle A Match         rule: cm, sub_rule: rga>\n                    CMP Issued Rifle B Match         rule: cm, sub_rule: rgb>\n                    CMP M1 Carbine Match             rule: cm, sub_rule: rm1>\n                    CMP Vintage Sniper Match         rule: cm, sub_rule: rvs>\n                    CMP Rimfire Sporter Match         rule: cm, sub_rule: rrf>\n                    CMP 3-Gun Match                 rule: cm, sub_rule: r3g>\n                    CMP 4-Gun Match                 rule: cm, sub_rule: r4g>\n                    CMP Issued Pistol Match         rule: cm, sub_rule: hgp>\n\n\n                GenericMatch (a generic match - only used for registrations/sqaudding and not scoring, no sport really)\n\n                    NTSA Match                     rule:nt, sub-rule:nm\n\n\n                IdpaMatch - mainly for IDPA but also SADPA & ICORE\n\n                    IDPA Handgun Match              rule: 'id', sub_rule:'hg'\n                    IDPA Classifier Match        rule: 'id', sub_rule:'hg', classifier='handgun'\n                    IDPA PCC Classifier Match    rule: 'id', sub_rule:'hg' , classifier=pcc\n                    IDPA DMG Match                rule: 'id', sub_rule:'dmg'\n\n                    SADPA MPD Handgun            rule: 'is', sub_rule:'hg'\n                    SADAP MPD Rifle                rule: 'is', sub_rule:'rf'\n                    SADPA MPD Shotgun            rule: 'is', sub_rule:'sg'\n                    SADPA MPD Multi-platform    rule: 'is', sub_rule:'mp'\n\n                    ICORE Match                    rule: 'ir', sub_rule: 'hg'\n                    ICORE 4-Gun Tactical        rule: '4g', sub_rule:'dmg'\n\n\n                IpscMatch - for IPSC but also USPSA, SRA, 3-Gun and SivilPistol\n\n                    IPSC Handgun        rule: ip, sub-rule: nm firerams: hg\n                    IPSC Rifle            rule: ip, sub-rule: nm firerams: rf\n                    IPSC Mini-rifle        rule: ip, sub-rule: nm firerams: mr\n                    IPSC Shotgun        rule: ip, sub-rule: nm firerams: sg\n                    IPSC Air            rule: ip, sub-rule: nm firerams: ai\n                    IPSC PCC            rule: ip, sub-rule: nm firerams: pc\n                    IPSC Tournament        rule: ip, sub-rule: to firearms:'rf,sg,hg'\n\n                    Sivil Pistol match        rule: si, sub-rule: nm, firearms: hg\n\n                    USPSA Handgun            rule: us, sub-rule: nm, fireams hg\n                    USPSA Rifle                rule: us, sub-rule: nm, fireams rf\n                    USPSA Precision Rifle    rule: us, sub-rule: nm, fireams pr\n                    USPSA Shotgun            rule: us, sub-rule: nm, fireams sg\n                    USPSA Multigun            rule: us, sub-rule: to, fireams rf,sg,hg # this can then be changed when creating a tournament\n\n                    3-Gun Match                rule: 3g, sub-rule: to, fireams: 'rf,sg,hg'\n\n                    SRA Match                rule: sr, sub-rule: to, fireams: 'rf,sg,hg'\n\n\n                NordicMatch - used for Clay-shooting, SPSF sports like Fältskytte and Resul.fi sports\n\n                    Fältskytte match                rule: nd, sub_rule: pf\n                    Poäng-fältskytte match            rule: nd, sub_rule: hf\n                    Magnumfält match                rule: nd, sub_rule: mf\n                    Magnumprecisionskytte match        rule: nd, sub_rule: mp\n                    Precisionsskytte match            rule: nd, sub_rule: pr\n                    Snabbmatch                        rule: nd, sub_rule: sm\n                    Militär Snabbmatch                rule: nd, sub_rule: ms\n\n                    COMPAK sporting match            rule: 'cl', sub_rule: 'CPK'\n                    Sporting match                    rule: 'cl', sub_rule: 'FSP'\n                    English Sporting match            rule: 'cl', sub_rule: 'ESP'\n\n                    Resul 300m Traditional Rifle    rule: rl, sub_rule: r3p\n                    Resul 150m Traditional Rifle     rule: rl, sub_rule: r1a\n                    Resul 150m Traditional Rifle    rule: rl, sub_rule: r1k\n                    Resul 300m RA1 Rifle            rule: rl, sub_rule: r11\n                    Resul 300m RA2 Rifle            rule: rl, sub_rule: r12\n                    Resul 25m RA3 Pistol            rule: rl, sub_rule: p23\n                    Resul 25m RA4 Pistol            rule: rl, sub_rule: p24\n                    Resul 25m Scholastic Pistol        rule: rl, sub_rule: p2u\n                    Resul 25m Traditional Pistol    rule: rl, sub_rule: p2o\n                    Resul 50m Traditional Pistol    rule: rl, sub_rule: p5e\n                    Result 25m Fast-pistol            rule: rl, sub_rule: p2p\n\n\n                PpcMatch\n\n                    PPC Match                     rule: pp, sub_rule: wa\n                    PPC Shotgun March            rule: pp, sub_rule: sg\n\n\n                PrecisionMatch\n\n                    PRS Match                   rule: ps, sub_rule: prt\n                    PRS Points Match            rule: ps, sub_rule: prp\n\n                    Note - Precison Matches are also included under a NRA Series (but created / managed under this then and never standalone)\n\n\n                SassMatch - used only for SASS matches\n\n                    SASS main-match                rule: ss, sub_rule: mm\n                    SASS side-match                rule: ss, sub_rule: sm\n                    SASS Longrange match        rule: ss, sub_rule: lr\n                    SASS Mounted match            rule: ss, sub_rule: mt\n\n\n                SteelMatch - used for Steel Challenge, NSSD and ISSA Match\n\n                    Steel Challenge match            rule: sc\n                    ISSA match                        rule: ia\n                    NSSF match                        rule: ns\n\n\n                IpscSerie\n\n                    IPSC Cup                    serie_type:'cp',  rule: 'ip'\n                    IPSC League                    serie_type:'lg', rule: 'ip'\n                    IPSC Grand Tournament        serie_type:'gt', rule: 'ip'\n\n                    USPSA Cup                    serie_type:'cp', rule: 'us'\n                    USPSA League                serie_type:'lg', rule: 'us'\n                    USPSA Tournament            serie_type:'gt', rule: 'us'\n\n                    3-Gun Cup                    serie_type:'cp', rule: '3g'\n                    3-Gun League                serie_type:'lg', rule: '3g'\n\n                    SRA Cup                        serie_type:'cp', rule: 'sr'\n                    SRA League                    serie_type:'lg', rule: 'sr'\n\n\n                NordicSerie\n\n                    Fältskytte cup                    serie_type: cp, 'rule:' nd, sub_rule: pf\n                    Poäng-fältskytte cup            serie_type: cp, 'rule:' nd, sub_rule: hf\n                    Magnumfält cup                    serie_type: cp, 'rule:' nd, sub_rule: mf\n                    Magnumprecisionskytte cup        serie_type: cp, 'rule:' nd, sub_rule: mp\n                    Precisionsskytte cup            serie_type: cp, 'rule:' nd, sub_rule: pr\n                    Snabbmatch cup                    serie_type: cp, 'rule:' nd, sub_rule: sm\n                    Militär Snabbmatch cup            serie_type: cp, 'rule:' nd, sub_rule: ms\n\n                    Fältskytte league                serie_type: lg, 'rule:' nd, sub_rule: pf\n                    Poäng-fältskytte league            serie_type: lg, 'rule:' nd, sub_rule: hf\n                    Magnumfält league                serie_type: lg, 'rule:' nd, sub_rule: mf\n                    Magnumprecisionskytte league    serie_type: lg, 'rule:' nd, sub_rule: mp\n                    Precisionsskytte league            serie_type: lg, 'rule:' nd, sub_rule: pr\n                    Snabbmatch league                serie_type: lg, 'rule:' nd, sub_rule: sm\n                    Militär Snabbmatch league        serie_type: lg, 'rule:' nd, sub_rule: ms\n\n                    COMPAK sporting cup                serie_type:'cp', rule: 'cl', sub_rule:'SPx'\n                    Sporting cup                    serie_type:'cp', rule: 'cl', sub_rule:'TRx'\n                    English Sporting cup            serie_type:'cp', rule: 'cl', sub_rule:'SKx'\n\n                    COMPAK sporting cup                serie_type:'lg', rule: 'cl', sub_rule:'SPx'\n                    Sporting cup                    serie_type:'lg', rule: 'cl', sub_rule:'TRx'\n                    English Sporting cup            serie_type:'lg', rule: 'cl', sub_rule:'SKx'\n\n\n\n                PpcSerie\n\n                    PPC Cup                            serie_type:'cp' 'rule:' pp\n                    PPC League                        serie_type:'lg' 'rule:' pp\n\n\n                PrecisionSerie\n\n                    PRS Cup                            serie_type:'cp', rule:'ps', sub_rule: 'prs'\n                    PRS League                        serie_type:'lg', rule:'ps', sub_rule: 'prs'\n\n                    NRA Cup                            serie_type:'cp', rule:'nr'\n                    NRA League                        serie_type:'lg', rule:'nr'\n                    NRA Tournament                    serie_type:'to', rule:'nr'\n                    NRA Precision Pistol Match        serie_type:'to', rule:'nr', sub_rule: ncp\n"
  create_event(form_input: JSON!, rule: String!, sub_rule: String!, firearms: String = null, serie_type: String = null, classifier: String = null): EventInterface!
  create_scorecard(
    form_input: JSON!

    """content-type of stage"""
    st_content_type: Int!

    """id of stage"""
    st_id: String!

    """content-type of competitor"""
    cp_content_type: Int!

    """id of competitor"""
    cp_id: String!
    asynchronous: Boolean = false
  ): ScoreCardInterface!
  update_scorecard(
    form_input: JSON!

    """content-type of scorcard"""
    content_type: Int!

    """id of scorecard"""
    id: String!
    asynchronous: Boolean = false
  ): ScoreCardInterface!
  delete_scorecard(
    """content-type of scorcard"""
    content_type: Int!

    """id of scorecard"""
    id: String!
  ): Void
  verify_scorecard(
    """content-type of scorcard"""
    content_type: Int!

    """id of scorecard"""
    id: String!
  ): ScoreCardInterface!
  unverify_scorecard(
    """content-type of scorcard"""
    content_type: Int!

    """id of scorecard"""
    id: String!
  ): ScoreCardInterface!
  create_update_scorecards(
    """
    ordered array of JSON form-inputs to create/update scorecard for on stage, returns nodes in same order as input
    """
    forms_input: JSON!

    """content-type of stage"""
    content_type: Int!

    """id of stage"""
    id: String!
    asynchronous: Boolean = true
  ): [CreateUpdateScoreCardNode!]!

  """
  Set competitor as did not finish to indicate they did not show up at event or left during it, if set they should not be scored and also not in results
  """
  set_did_not_finish_competitor(
    """true to set did not finish or false to undo it"""
    value: Boolean!

    """content-type for competitor"""
    content_type: Int!

    """id for competitor"""
    id: String!
    asynchronous: Boolean = false
  ): CompetitorInterface!
}

"\n    encapsulates token data, and refresh token data if `JWT_LONG_RUNNING_REFRESH_TOKEN` is on.\n    with an output interface.\n    "
type ObtainJSONWebTokenType implements OutputInterface {
  success: Boolean!
  errors: ExpectedError
  user: UserType
  token: TokenType
  refresh_token: RefreshTokenType
}

interface OutputInterface {
  success: Boolean!
  errors: ExpectedError
}

"\n     Errors messages and codes mapped to\n    fields or non fields errors.\n    Example:\n    {\n        field_name: [\n            {\n                \"message\": \"error message\",\n                \"code\": \"error_code\"\n            }\n        ],\n        other_field: [\n            {\n                \"message\": \"error message\",\n                \"code\": \"error_code\"\n            }\n        ],\n        nonFieldErrors: [\n            {\n                \"message\": \"error message\",\n                \"code\": \"error_code\"\n            }\n        ]\n    }\n    "
scalar ExpectedError

"""The Django User model merged with user profile within SSI"""
type UserType {
  logentry_set: [DjangoModelType!]!

  """
  Designates that this user has all permissions without explicitly assigning them.
  """
  is_superuser: Boolean!
  last_login: DateTime

  """Designates whether the user can log into this admin site."""
  is_staff: Boolean!

  """
  Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
  """
  is_active: Boolean!
  date_joined: DateTime!
  status: UserStatusType!
  last_name: String
  first_name: String
  email: String!
  id: ID!
  archived: Boolean!
  verified: Boolean!
}

"""A helper model that handles user account stuff."""
type UserStatusType {
  verified: Boolean!
  archived: Boolean!
}

"\nencapsulates the token with the payload that was used to create the token.\n"
type TokenType {
  payload: TokenPayloadType!

  """The encoded payload, namely a token."""
  token: String!
}

"\nthe data that was used to create the token.\n"
type TokenPayloadType {
  """when the token was created"""
  origIat: DateTime!

  """when the token will be expired"""
  exp: DateTime!
  username: String!
}

"\nRefresh token can be used to obtain a new token instead of log in again\nwhen the token expires.\n\n*This is only used if `JWT_LONG_RUNNING_REFRESH_TOKEN` is set to True.*\n"
type RefreshTokenType {
  """randomly generated token that is attached to a FK user."""
  token: String!
  created: DateTime!
  revoked: DateTime
  expires_at: DateTime!
  is_expired: Boolean!
}

type VerifyTokenType implements OutputInterface {
  success: Boolean!
  errors: ExpectedError
  token: TokenType
  user: UserType
}

type RevokeRefreshTokenType {
  success: Boolean!
  refresh_token: RefreshTokenType
  errors: ExpectedError
}

type MutationNormalOutput {
  success: Boolean!
  errors: ExpectedError
}

type SocialType implements OutputInterface {
  success: Boolean!
  errors: ExpectedError
  user: UserType
  token: TokenType
  refresh_token: RefreshTokenType

  """User's uid"""
  uid: String

  """User's Avarar's URL"""
  avatar: String

  """OAUTH provider"""
  provider: String

  """Extra data requested from user"""
  extra_data: SocialJSON
}

scalar SocialJSON

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""Represents NULL values"""
scalar Void

"""
Represents an updated/created scorecard and info message, if error or other the scorecard data as-it-is-now is returned and a alert. Success shows if update/create went ok or not
"""
type CreateUpdateScoreCardNode {
  scorecard: ScoreCardInterface
  success: Boolean!
  alert: String!
}